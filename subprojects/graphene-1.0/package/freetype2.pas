unit FreeType2;

interface

uses
  ctypes;

  {$IFDEF FPC}
  {$PACKRECORDS C}
  {$ENDIF}

const
  {$IFDEF Linux}
  freetype_lib = 'libfreetype';
  {$ENDIF}

  {$IFDEF Windows}
  freetype_lib = 'libfreetype-6.dll';
  {$ENDIF}


  // ==== integer-types.h

const
  SHRT_MAX = 32767;   // limits.h

  FT_CHAR_BIT = 8;
  FT_SIZEOF_INT = Sizeof(cint);
  FT_SIZEOF_LONG = Sizeof(clong);
  FT_SIZEOF_LONG_LONG = Sizeof(clonglong);

  // === freetype.h

type
  PFT_Encoding = ^TFT_Encoding;
  TFT_Encoding = longint;

const
  FT_ENCODING_NONE = 0;

  FT_ENCODING_MS_SYMBOL = byte('s') shl 24 + byte('y') shl 16 + byte('m') shl 8 + byte('b');
  FT_ENCODING_UNICODE = byte('u') shl 24 + byte('n') shl 16 + byte('i') shl 8 + byte('c');

  FT_ENCODING_SJIS = byte('s') shl 24 + byte('j') shl 16 + byte('i') shl 8 + byte('s');
  FT_ENCODING_PRC = byte('g') shl 24 + byte('b') shl 16 + byte(' ') shl 8 + byte(' ');
  FT_ENCODING_BIG5 = byte('b') shl 24 + byte('i') shl 16 + byte('g') shl 8 + byte('5');
  FT_ENCODING_WANSUNG = byte('w') shl 24 + byte('a') shl 16 + byte('n') shl 8 + byte('s');
  FT_ENCODING_JOHAB = byte('j') shl 24 + byte('o') shl 16 + byte('h') shl 8 + byte('a');

  FT_ENCODING_GB2312 = FT_ENCODING_PRC;
  FT_ENCODING_MS_SJIS = FT_ENCODING_SJIS;
  FT_ENCODING_MS_GB2312 = FT_ENCODING_PRC;
  FT_ENCODING_MS_BIG5 = FT_ENCODING_BIG5;
  FT_ENCODING_MS_WANSUNG = FT_ENCODING_WANSUNG;
  FT_ENCODING_MS_JOHAB = FT_ENCODING_JOHAB;

  FT_ENCODING_ADOBE_STANDARD = byte('A') shl 24 + byte('D') shl 16 + byte('O') shl 8 + byte('B');
  FT_ENCODING_ADOBE_EXPERT = byte('A') shl 24 + byte('D') shl 16 + byte('B') shl 8 + byte('E');
  FT_ENCODING_ADOBE_CUSTOM = byte('A') shl 24 + byte('D') shl 16 + byte('B') shl 8 + byte('C');
  FT_ENCODING_ADOBE_LATIN_1 = byte('l') shl 24 + byte('a') shl 16 + byte('t') shl 8 + byte('1');
  FT_ENCODING_OLD_LATIN_2 = byte('l') shl 24 + byte('a') shl 16 + byte('t') shl 8 + byte('2');
  FT_ENCODING_APPLE_ROMAN = byte('a') shl 24 + byte('r') shl 16 + byte('m') shl 8 + byte('n');


const
  FT_OPEN_MEMORY = $1;
  FT_OPEN_STREAM = $2;
  FT_OPEN_PATHNAME = $4;
  FT_OPEN_DRIVER = $8;
  FT_OPEN_PARAMS = $10;

const
  FT_FACE_FLAG_SCALABLE = 1 shl 0;
  FT_FACE_FLAG_FIXED_SIZES = 1 shl 1;
  FT_FACE_FLAG_FIXED_WIDTH = 1 shl 2;
  FT_FACE_FLAG_SFNT = 1 shl 3;
  FT_FACE_FLAG_HORIZONTAL = 1 shl 4;
  FT_FACE_FLAG_VERTICAL = 1 shl 5;
  FT_FACE_FLAG_KERNING = 1 shl 6;
  FT_FACE_FLAG_FAST_GLYPHS = 1 shl 7;
  FT_FACE_FLAG_MULTIPLE_MASTERS = 1 shl 8;
  FT_FACE_FLAG_GLYPH_NAMES = 1 shl 9;
  FT_FACE_FLAG_EXTERNAL_STREAM = 1 shl 10;
  FT_FACE_FLAG_HINTER = 1 shl 11;
  FT_FACE_FLAG_CID_KEYED = 1 shl 12;
  FT_FACE_FLAG_TRICKY = 1 shl 13;
  FT_FACE_FLAG_COLOR = 1 shl 14;
  FT_FACE_FLAG_VARIATION = 1 shl 15;
  FT_FACE_FLAG_SVG = 1 shl 16;
  FT_FACE_FLAG_SBIX = 1 shl 17;
  FT_FACE_FLAG_SBIX_OVERLAY = 1 shl 18;

const
  FT_STYLE_FLAG_ITALIC = 1 shl 0;
  FT_STYLE_FLAG_BOLD = 1 shl 1;

type
  PFT_Size_Request_Type = ^TFT_Size_Request_Type;
  TFT_Size_Request_Type = longint;

const
  FT_SIZE_REQUEST_TYPE_NOMINAL = 0;
  FT_SIZE_REQUEST_TYPE_REAL_DIM = 1;
  FT_SIZE_REQUEST_TYPE_BBOX = 2;
  FT_SIZE_REQUEST_TYPE_CELL = 3;
  FT_SIZE_REQUEST_TYPE_SCALES = 4;
  FT_SIZE_REQUEST_TYPE_MAX = 5;

const
  FT_LOAD_DEFAULT = $0;
  FT_LOAD_NO_SCALE = 1 shl 0;
  FT_LOAD_NO_HINTING = 1 shl 1;
  FT_LOAD_RENDER = 1 shl 2;
  FT_LOAD_NO_BITMAP = 1 shl 3;
  FT_LOAD_VERTICAL_LAYOUT = 1 shl 4;
  FT_LOAD_FORCE_AUTOHINT = 1 shl 5;
  FT_LOAD_CROP_BITMAP = 1 shl 6;
  FT_LOAD_PEDANTIC = 1 shl 7;
  FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH = 1 shl 9;
  FT_LOAD_NO_RECURSE = 1 shl 10;
  FT_LOAD_IGNORE_TRANSFORM = 1 shl 11;
  FT_LOAD_MONOCHROME = 1 shl 12;
  FT_LOAD_LINEAR_DESIGN = 1 shl 13;
  FT_LOAD_SBITS_ONLY = 1 shl 14;
  FT_LOAD_NO_AUTOHINT = 1 shl 15;
  FT_LOAD_COLOR = 1 shl 20;
  FT_LOAD_COMPUTE_METRICS = 1 shl 21;
  FT_LOAD_BITMAP_METRICS_ONLY = 1 shl 22;
  FT_LOAD_NO_SVG = 1 shl 24;
  FT_LOAD_ADVANCE_ONLY = 1 shl 8;
  FT_LOAD_SVG_ONLY = 1 shl 23;

type
  PFT_Render_Mode = ^TFT_Render_Mode;
  TFT_Render_Mode = longint;

const
  FT_RENDER_MODE_NORMAL = 0;
  FT_RENDER_MODE_LIGHT = 1;
  FT_RENDER_MODE_MONO = 2;
  FT_RENDER_MODE_LCD = 3;
  FT_RENDER_MODE_LCD_V = 4;
  FT_RENDER_MODE_SDF = 5;
  FT_RENDER_MODE_MAX = 6;

  FT_LOAD_TARGET_NORMAL = (FT_RENDER_MODE_NORMAL and 15) shl 16;
  FT_LOAD_TARGET_LIGHT = (FT_RENDER_MODE_LIGHT and 15) shl 16;
  FT_LOAD_TARGET_MONO = (FT_RENDER_MODE_MONO and 15) shl 16;
  FT_LOAD_TARGET_LCD = (FT_RENDER_MODE_LCD and 15) shl 16;
  FT_LOAD_TARGET_LCD_V = (FT_RENDER_MODE_LCD_V and 15) shl 16;


type
  PFT_Kerning_Mode = ^TFT_Kerning_Mode;
  TFT_Kerning_Mode = longint;

const
  FT_KERNING_DEFAULT = 0;
  FT_KERNING_UNFITTED = 1;
  FT_KERNING_UNSCALED = 2;

const
  FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS = 1;
  FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES = 2;
  FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID = 4;
  FT_SUBGLYPH_FLAG_SCALE = 8;
  FT_SUBGLYPH_FLAG_XY_SCALE = $40;
  FT_SUBGLYPH_FLAG_2X2 = $80;
  FT_SUBGLYPH_FLAG_USE_MY_METRICS = $200;

const
  FT_FSTYPE_INSTALLABLE_EMBEDDING = $0000;
  FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING = $0002;
  FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING = $0004;
  FT_FSTYPE_EDITABLE_EMBEDDING = $0008;
  FT_FSTYPE_NO_SUBSETTING = $0100;
  FT_FSTYPE_BITMAP_EMBEDDING_ONLY = $0200;

const
  FREETYPE_MAJOR = 2;
  FREETYPE_MINOR = 13;
  FREETYPE_PATCH = 2;

const
  FT_ANGLE_PI = 180 shl 16;
  FT_ANGLE_2PI = FT_ANGLE_PI * 2;
  FT_ANGLE_PI2 = FT_ANGLE_PI div 2;
  FT_ANGLE_PI4 = FT_ANGLE_PI div 4;


  // ===== ftmm.h

const
  T1_MAX_MM_AXIS = 4;
  T1_MAX_MM_DESIGNS = 16;
  T1_MAX_MM_MAP_POINTS = 20;

const
  FT_VAR_AXIS_FLAG_HIDDEN = 1;

  // ====  ftmodapi.h

const
  FT_MODULE_FONT_DRIVER = 1;
  FT_MODULE_RENDERER = 2;
  FT_MODULE_HINTER = 4;
  FT_MODULE_STYLER = 8;
  FT_MODULE_DRIVER_SCALABLE = $100;
  FT_MODULE_DRIVER_NO_OUTLINES = $200;
  FT_MODULE_DRIVER_HAS_HINTER = $400;
  FT_MODULE_DRIVER_HINTS_LIGHTLY = $800;

const
  FT_DEBUG_HOOK_TRUETYPE = 0;

type
  PFT_TrueTypeEngineType = ^TFT_TrueTypeEngineType;
  TFT_TrueTypeEngineType = longint;

const
  FT_TRUETYPE_ENGINE_TYPE_NONE = 0;
  FT_TRUETYPE_ENGINE_TYPE_UNPATENTED = 1;
  FT_TRUETYPE_ENGINE_TYPE_PATENTED = 2;

  // ====  ftoutln.h

type
  PFT_Orientation = ^TFT_Orientation;
  TFT_Orientation = longint;

const
  FT_ORIENTATION_TRUETYPE = 0;
  FT_ORIENTATION_POSTSCRIPT = 1;
  FT_ORIENTATION_FILL_RIGHT = FT_ORIENTATION_TRUETYPE;
  FT_ORIENTATION_FILL_LEFT = FT_ORIENTATION_POSTSCRIPT;
  FT_ORIENTATION_NONE = (FT_ORIENTATION_POSTSCRIPT) + 1;


  // ====  ftimage.h

type
  PFT_Glyph_Format = ^TFT_Glyph_Format;
  TFT_Glyph_Format = longint;

const
  FT_GLYPH_FORMAT_COMPOSITE = byte('c') shl 24 + byte('o') shl 16 + byte('m') shl 8 + byte('p');
  FT_GLYPH_FORMAT_BITMAP = byte('b') shl 24 + byte('i') shl 16 + byte('t') shl 8 + byte('s');
  FT_GLYPH_FORMAT_OUTLINE = byte('o') shl 24 + byte('u') shl 16 + byte('t') shl 8 + byte('l');
  FT_GLYPH_FORMAT_PLOTTER = byte('p') shl 24 + byte('l') shl 16 + byte('o') shl 8 + byte('t');
  FT_GLYPH_FORMAT_SVG = byte('S') shl 24 + byte('V') shl 16 + byte('G') shl 8 + byte('0');

type
  PFT_Pixel_Mode = ^TFT_Pixel_Mode;
  TFT_Pixel_Mode = longint;

const
  FT_PIXEL_MODE_NONE = 0;
  FT_PIXEL_MODE_MONO = 1;
  FT_PIXEL_MODE_GRAY = 2;
  FT_PIXEL_MODE_GRAY2 = 3;
  FT_PIXEL_MODE_GRAY4 = 4;
  FT_PIXEL_MODE_LCD = 5;
  FT_PIXEL_MODE_LCD_V = 6;
  FT_PIXEL_MODE_BGRA = 7;
  FT_PIXEL_MODE_MAX = 8;

const
  FT_OUTLINE_CONTOURS_MAX = SHRT_MAX;
  FT_OUTLINE_POINTS_MAX = SHRT_MAX;
  FT_OUTLINE_NONE = $0;
  FT_OUTLINE_OWNER = $1;
  FT_OUTLINE_EVEN_ODD_FILL = $2;
  FT_OUTLINE_REVERSE_FILL = $4;
  FT_OUTLINE_IGNORE_DROPOUTS = $8;
  FT_OUTLINE_SMART_DROPOUTS = $10;
  FT_OUTLINE_INCLUDE_STUBS = $20;
  FT_OUTLINE_OVERLAP = $40;
  FT_OUTLINE_HIGH_PRECISION = $100;
  FT_OUTLINE_SINGLE_PASS = $200;

const
  FT_CURVE_TAG_ON = $01;
  FT_CURVE_TAG_CONIC = $00;
  FT_CURVE_TAG_CUBIC = $02;
  FT_CURVE_TAG_HAS_SCANMODE = $04;
  FT_CURVE_TAG_TOUCH_X = $08;
  FT_CURVE_TAG_TOUCH_Y = $10;
  FT_CURVE_TAG_TOUCH_BOTH = FT_CURVE_TAG_TOUCH_X or FT_CURVE_TAG_TOUCH_Y;

const
  FT_RASTER_FLAG_DEFAULT = $0;
  FT_RASTER_FLAG_AA = $1;
  FT_RASTER_FLAG_DIRECT = $2;
  FT_RASTER_FLAG_CLIP = $4;
  FT_RASTER_FLAG_SDF = $8;

  // ====  ftlcdfil.h

type
  PFT_LcdFilter = ^TFT_LcdFilter;
  TFT_LcdFilter = longint;

const
  FT_LCD_FILTER_NONE = 0;
  FT_LCD_FILTER_DEFAULT = 1;
  FT_LCD_FILTER_LIGHT = 2;
  FT_LCD_FILTER_LEGACY1 = 3;
  FT_LCD_FILTER_LEGACY = 16;
  FT_LCD_FILTER_MAX = 17;

const
  FT_LCD_FILTER_FIVE_TAPS = 5;

  // ====  ttnameid.h

const
  TT_PLATFORM_APPLE_UNICODE = 0;
  TT_PLATFORM_MACINTOSH = 1;
  TT_PLATFORM_ISO = 2;
  TT_PLATFORM_MICROSOFT = 3;
  TT_PLATFORM_CUSTOM = 4;
  TT_PLATFORM_ADOBE = 7;
  TT_APPLE_ID_DEFAULT = 0;
  TT_APPLE_ID_UNICODE_1_1 = 1;
  TT_APPLE_ID_ISO_10646 = 2;
  TT_APPLE_ID_UNICODE_2_0 = 3;
  TT_APPLE_ID_UNICODE_32 = 4;
  TT_APPLE_ID_VARIANT_SELECTOR = 5;
  TT_APPLE_ID_FULL_UNICODE = 6;

  TT_MAC_ID_ROMAN = 0;
  TT_MAC_ID_JAPANESE = 1;
  TT_MAC_ID_TRADITIONAL_CHINESE = 2;
  TT_MAC_ID_KOREAN = 3;
  TT_MAC_ID_ARABIC = 4;
  TT_MAC_ID_HEBREW = 5;
  TT_MAC_ID_GREEK = 6;
  TT_MAC_ID_RUSSIAN = 7;
  TT_MAC_ID_RSYMBOL = 8;
  TT_MAC_ID_DEVANAGARI = 9;
  TT_MAC_ID_GURMUKHI = 10;
  TT_MAC_ID_GUJARATI = 11;
  TT_MAC_ID_ORIYA = 12;
  TT_MAC_ID_BENGALI = 13;
  TT_MAC_ID_TAMIL = 14;
  TT_MAC_ID_TELUGU = 15;
  TT_MAC_ID_KANNADA = 16;
  TT_MAC_ID_MALAYALAM = 17;
  TT_MAC_ID_SINHALESE = 18;
  TT_MAC_ID_BURMESE = 19;
  TT_MAC_ID_KHMER = 20;
  TT_MAC_ID_THAI = 21;
  TT_MAC_ID_LAOTIAN = 22;
  TT_MAC_ID_GEORGIAN = 23;
  TT_MAC_ID_ARMENIAN = 24;
  TT_MAC_ID_MALDIVIAN = 25;
  TT_MAC_ID_SIMPLIFIED_CHINESE = 25;
  TT_MAC_ID_TIBETAN = 26;
  TT_MAC_ID_MONGOLIAN = 27;
  TT_MAC_ID_GEEZ = 28;
  TT_MAC_ID_SLAVIC = 29;
  TT_MAC_ID_VIETNAMESE = 30;
  TT_MAC_ID_SINDHI = 31;
  TT_MAC_ID_UNINTERP = 32;

  TT_ISO_ID_7BIT_ASCII = 0;
  TT_ISO_ID_10646 = 1;
  TT_ISO_ID_8859_1 = 2;

  TT_MS_ID_SYMBOL_CS = 0;
  TT_MS_ID_UNICODE_CS = 1;
  TT_MS_ID_SJIS = 2;
  TT_MS_ID_PRC = 3;
  TT_MS_ID_BIG_5 = 4;
  TT_MS_ID_WANSUNG = 5;
  TT_MS_ID_JOHAB = 6;
  TT_MS_ID_UCS_4 = 10;
  TT_MS_ID_GB2312 = TT_MS_ID_PRC;

  TT_ADOBE_ID_STANDARD = 0;
  TT_ADOBE_ID_EXPERT = 1;
  TT_ADOBE_ID_CUSTOM = 2;
  TT_ADOBE_ID_LATIN_1 = 3;

  TT_MAC_LANGID_ENGLISH = 0;
  TT_MAC_LANGID_FRENCH = 1;
  TT_MAC_LANGID_GERMAN = 2;
  TT_MAC_LANGID_ITALIAN = 3;
  TT_MAC_LANGID_DUTCH = 4;
  TT_MAC_LANGID_SWEDISH = 5;
  TT_MAC_LANGID_SPANISH = 6;
  TT_MAC_LANGID_DANISH = 7;
  TT_MAC_LANGID_PORTUGUESE = 8;
  TT_MAC_LANGID_NORWEGIAN = 9;
  TT_MAC_LANGID_HEBREW = 10;
  TT_MAC_LANGID_JAPANESE = 11;
  TT_MAC_LANGID_ARABIC = 12;
  TT_MAC_LANGID_FINNISH = 13;
  TT_MAC_LANGID_GREEK = 14;
  TT_MAC_LANGID_ICELANDIC = 15;
  TT_MAC_LANGID_MALTESE = 16;
  TT_MAC_LANGID_TURKISH = 17;
  TT_MAC_LANGID_CROATIAN = 18;
  TT_MAC_LANGID_CHINESE_TRADITIONAL = 19;
  TT_MAC_LANGID_URDU = 20;
  TT_MAC_LANGID_HINDI = 21;
  TT_MAC_LANGID_THAI = 22;
  TT_MAC_LANGID_KOREAN = 23;
  TT_MAC_LANGID_LITHUANIAN = 24;
  TT_MAC_LANGID_POLISH = 25;
  TT_MAC_LANGID_HUNGARIAN = 26;
  TT_MAC_LANGID_ESTONIAN = 27;
  TT_MAC_LANGID_LETTISH = 28;
  TT_MAC_LANGID_SAAMISK = 29;
  TT_MAC_LANGID_FAEROESE = 30;
  TT_MAC_LANGID_FARSI = 31;
  TT_MAC_LANGID_RUSSIAN = 32;
  TT_MAC_LANGID_CHINESE_SIMPLIFIED = 33;
  TT_MAC_LANGID_FLEMISH = 34;
  TT_MAC_LANGID_IRISH = 35;
  TT_MAC_LANGID_ALBANIAN = 36;
  TT_MAC_LANGID_ROMANIAN = 37;
  TT_MAC_LANGID_CZECH = 38;
  TT_MAC_LANGID_SLOVAK = 39;
  TT_MAC_LANGID_SLOVENIAN = 40;
  TT_MAC_LANGID_YIDDISH = 41;
  TT_MAC_LANGID_SERBIAN = 42;
  TT_MAC_LANGID_MACEDONIAN = 43;
  TT_MAC_LANGID_BULGARIAN = 44;
  TT_MAC_LANGID_UKRAINIAN = 45;
  TT_MAC_LANGID_BYELORUSSIAN = 46;
  TT_MAC_LANGID_UZBEK = 47;
  TT_MAC_LANGID_KAZAKH = 48;
  TT_MAC_LANGID_AZERBAIJANI = 49;
  TT_MAC_LANGID_AZERBAIJANI_CYRILLIC_SCRIPT = 49;
  TT_MAC_LANGID_AZERBAIJANI_ARABIC_SCRIPT = 50;
  TT_MAC_LANGID_ARMENIAN = 51;
  TT_MAC_LANGID_GEORGIAN = 52;
  TT_MAC_LANGID_MOLDAVIAN = 53;
  TT_MAC_LANGID_KIRGHIZ = 54;
  TT_MAC_LANGID_TAJIKI = 55;
  TT_MAC_LANGID_TURKMEN = 56;
  TT_MAC_LANGID_MONGOLIAN = 57;
  TT_MAC_LANGID_MONGOLIAN_MONGOLIAN_SCRIPT = 57;
  TT_MAC_LANGID_MONGOLIAN_CYRILLIC_SCRIPT = 58;
  TT_MAC_LANGID_PASHTO = 59;
  TT_MAC_LANGID_KURDISH = 60;
  TT_MAC_LANGID_KASHMIRI = 61;
  TT_MAC_LANGID_SINDHI = 62;
  TT_MAC_LANGID_TIBETAN = 63;
  TT_MAC_LANGID_NEPALI = 64;
  TT_MAC_LANGID_SANSKRIT = 65;
  TT_MAC_LANGID_MARATHI = 66;
  TT_MAC_LANGID_BENGALI = 67;
  TT_MAC_LANGID_ASSAMESE = 68;
  TT_MAC_LANGID_GUJARATI = 69;
  TT_MAC_LANGID_PUNJABI = 70;
  TT_MAC_LANGID_ORIYA = 71;
  TT_MAC_LANGID_MALAYALAM = 72;
  TT_MAC_LANGID_KANNADA = 73;
  TT_MAC_LANGID_TAMIL = 74;
  TT_MAC_LANGID_TELUGU = 75;
  TT_MAC_LANGID_SINHALESE = 76;
  TT_MAC_LANGID_BURMESE = 77;
  TT_MAC_LANGID_KHMER = 78;
  TT_MAC_LANGID_LAO = 79;
  TT_MAC_LANGID_VIETNAMESE = 80;
  TT_MAC_LANGID_INDONESIAN = 81;
  TT_MAC_LANGID_TAGALOG = 82;
  TT_MAC_LANGID_MALAY_ROMAN_SCRIPT = 83;
  TT_MAC_LANGID_MALAY_ARABIC_SCRIPT = 84;
  TT_MAC_LANGID_AMHARIC = 85;
  TT_MAC_LANGID_TIGRINYA = 86;
  TT_MAC_LANGID_GALLA = 87;
  TT_MAC_LANGID_SOMALI = 88;
  TT_MAC_LANGID_SWAHILI = 89;
  TT_MAC_LANGID_RUANDA = 90;
  TT_MAC_LANGID_RUNDI = 91;
  TT_MAC_LANGID_CHEWA = 92;
  TT_MAC_LANGID_MALAGASY = 93;
  TT_MAC_LANGID_ESPERANTO = 94;
  TT_MAC_LANGID_WELSH = 128;
  TT_MAC_LANGID_BASQUE = 129;
  TT_MAC_LANGID_CATALAN = 130;
  TT_MAC_LANGID_LATIN = 131;
  TT_MAC_LANGID_QUECHUA = 132;
  TT_MAC_LANGID_GUARANI = 133;
  TT_MAC_LANGID_AYMARA = 134;
  TT_MAC_LANGID_TATAR = 135;
  TT_MAC_LANGID_UIGHUR = 136;
  TT_MAC_LANGID_DZONGKHA = 137;
  TT_MAC_LANGID_JAVANESE = 138;
  TT_MAC_LANGID_SUNDANESE = 139;
  TT_MAC_LANGID_GALICIAN = 140;
  TT_MAC_LANGID_AFRIKAANS = 141;
  TT_MAC_LANGID_BRETON = 142;
  TT_MAC_LANGID_INUKTITUT = 143;
  TT_MAC_LANGID_SCOTTISH_GAELIC = 144;
  TT_MAC_LANGID_MANX_GAELIC = 145;
  TT_MAC_LANGID_IRISH_GAELIC = 146;
  TT_MAC_LANGID_TONGAN = 147;
  TT_MAC_LANGID_GREEK_POLYTONIC = 148;
  TT_MAC_LANGID_GREELANDIC = 149;
  TT_MAC_LANGID_AZERBAIJANI_ROMAN_SCRIPT = 150;
  TT_MS_LANGID_ARABIC_SAUDI_ARABIA = $0401;
  TT_MS_LANGID_ARABIC_IRAQ = $0801;
  TT_MS_LANGID_ARABIC_EGYPT = $0C01;
  TT_MS_LANGID_ARABIC_LIBYA = $1001;
  TT_MS_LANGID_ARABIC_ALGERIA = $1401;
  TT_MS_LANGID_ARABIC_MOROCCO = $1801;
  TT_MS_LANGID_ARABIC_TUNISIA = $1C01;
  TT_MS_LANGID_ARABIC_OMAN = $2001;
  TT_MS_LANGID_ARABIC_YEMEN = $2401;
  TT_MS_LANGID_ARABIC_SYRIA = $2801;
  TT_MS_LANGID_ARABIC_JORDAN = $2C01;
  TT_MS_LANGID_ARABIC_LEBANON = $3001;
  TT_MS_LANGID_ARABIC_KUWAIT = $3401;
  TT_MS_LANGID_ARABIC_UAE = $3801;
  TT_MS_LANGID_ARABIC_BAHRAIN = $3C01;
  TT_MS_LANGID_ARABIC_QATAR = $4001;
  TT_MS_LANGID_BULGARIAN_BULGARIA = $0402;
  TT_MS_LANGID_CATALAN_CATALAN = $0403;
  TT_MS_LANGID_CHINESE_TAIWAN = $0404;
  TT_MS_LANGID_CHINESE_PRC = $0804;
  TT_MS_LANGID_CHINESE_HONG_KONG = $0C04;
  TT_MS_LANGID_CHINESE_SINGAPORE = $1004;
  TT_MS_LANGID_CHINESE_MACAO = $1404;
  TT_MS_LANGID_CZECH_CZECH_REPUBLIC = $0405;
  TT_MS_LANGID_DANISH_DENMARK = $0406;
  TT_MS_LANGID_GERMAN_GERMANY = $0407;
  TT_MS_LANGID_GERMAN_SWITZERLAND = $0807;
  TT_MS_LANGID_GERMAN_AUSTRIA = $0C07;
  TT_MS_LANGID_GERMAN_LUXEMBOURG = $1007;
  TT_MS_LANGID_GERMAN_LIECHTENSTEIN = $1407;
  TT_MS_LANGID_GREEK_GREECE = $0408;
  TT_MS_LANGID_ENGLISH_UNITED_STATES = $0409;
  TT_MS_LANGID_ENGLISH_UNITED_KINGDOM = $0809;
  TT_MS_LANGID_ENGLISH_AUSTRALIA = $0C09;
  TT_MS_LANGID_ENGLISH_CANADA = $1009;
  TT_MS_LANGID_ENGLISH_NEW_ZEALAND = $1409;
  TT_MS_LANGID_ENGLISH_IRELAND = $1809;
  TT_MS_LANGID_ENGLISH_SOUTH_AFRICA = $1C09;
  TT_MS_LANGID_ENGLISH_JAMAICA = $2009;
  TT_MS_LANGID_ENGLISH_CARIBBEAN = $2409;
  TT_MS_LANGID_ENGLISH_BELIZE = $2809;
  TT_MS_LANGID_ENGLISH_TRINIDAD = $2C09;
  TT_MS_LANGID_ENGLISH_ZIMBABWE = $3009;
  TT_MS_LANGID_ENGLISH_PHILIPPINES = $3409;
  TT_MS_LANGID_ENGLISH_INDIA = $4009;
  TT_MS_LANGID_ENGLISH_MALAYSIA = $4409;
  TT_MS_LANGID_ENGLISH_SINGAPORE = $4809;
  TT_MS_LANGID_SPANISH_SPAIN_TRADITIONAL_SORT = $040A;
  TT_MS_LANGID_SPANISH_MEXICO = $080A;
  TT_MS_LANGID_SPANISH_SPAIN_MODERN_SORT = $0C0A;
  TT_MS_LANGID_SPANISH_GUATEMALA = $100A;
  TT_MS_LANGID_SPANISH_COSTA_RICA = $140A;
  TT_MS_LANGID_SPANISH_PANAMA = $180A;
  TT_MS_LANGID_SPANISH_DOMINICAN_REPUBLIC = $1C0A;
  TT_MS_LANGID_SPANISH_VENEZUELA = $200A;
  TT_MS_LANGID_SPANISH_COLOMBIA = $240A;
  TT_MS_LANGID_SPANISH_PERU = $280A;
  TT_MS_LANGID_SPANISH_ARGENTINA = $2C0A;
  TT_MS_LANGID_SPANISH_ECUADOR = $300A;
  TT_MS_LANGID_SPANISH_CHILE = $340A;
  TT_MS_LANGID_SPANISH_URUGUAY = $380A;
  TT_MS_LANGID_SPANISH_PARAGUAY = $3C0A;
  TT_MS_LANGID_SPANISH_BOLIVIA = $400A;
  TT_MS_LANGID_SPANISH_EL_SALVADOR = $440A;
  TT_MS_LANGID_SPANISH_HONDURAS = $480A;
  TT_MS_LANGID_SPANISH_NICARAGUA = $4C0A;
  TT_MS_LANGID_SPANISH_PUERTO_RICO = $500A;
  TT_MS_LANGID_SPANISH_UNITED_STATES = $540A;
  TT_MS_LANGID_FINNISH_FINLAND = $040B;
  TT_MS_LANGID_FRENCH_FRANCE = $040C;
  TT_MS_LANGID_FRENCH_BELGIUM = $080C;
  TT_MS_LANGID_FRENCH_CANADA = $0C0C;
  TT_MS_LANGID_FRENCH_SWITZERLAND = $100C;
  TT_MS_LANGID_FRENCH_LUXEMBOURG = $140C;
  TT_MS_LANGID_FRENCH_MONACO = $180C;
  TT_MS_LANGID_HEBREW_ISRAEL = $040D;
  TT_MS_LANGID_HUNGARIAN_HUNGARY = $040E;
  TT_MS_LANGID_ICELANDIC_ICELAND = $040F;
  TT_MS_LANGID_ITALIAN_ITALY = $0410;
  TT_MS_LANGID_ITALIAN_SWITZERLAND = $0810;
  TT_MS_LANGID_JAPANESE_JAPAN = $0411;
  TT_MS_LANGID_KOREAN_KOREA = $0412;
  TT_MS_LANGID_DUTCH_NETHERLANDS = $0413;
  TT_MS_LANGID_DUTCH_BELGIUM = $0813;
  TT_MS_LANGID_NORWEGIAN_NORWAY_BOKMAL = $0414;
  TT_MS_LANGID_NORWEGIAN_NORWAY_NYNORSK = $0814;
  TT_MS_LANGID_POLISH_POLAND = $0415;
  TT_MS_LANGID_PORTUGUESE_BRAZIL = $0416;
  TT_MS_LANGID_PORTUGUESE_PORTUGAL = $0816;
  TT_MS_LANGID_ROMANSH_SWITZERLAND = $0417;
  TT_MS_LANGID_ROMANIAN_ROMANIA = $0418;
  TT_MS_LANGID_RUSSIAN_RUSSIA = $0419;
  TT_MS_LANGID_CROATIAN_CROATIA = $041A;
  TT_MS_LANGID_SERBIAN_SERBIA_LATIN = $081A;
  TT_MS_LANGID_SERBIAN_SERBIA_CYRILLIC = $0C1A;
  TT_MS_LANGID_CROATIAN_BOSNIA_HERZEGOVINA = $101A;
  TT_MS_LANGID_BOSNIAN_BOSNIA_HERZEGOVINA = $141A;
  TT_MS_LANGID_SERBIAN_BOSNIA_HERZ_LATIN = $181A;
  TT_MS_LANGID_SERBIAN_BOSNIA_HERZ_CYRILLIC = $1C1A;
  TT_MS_LANGID_BOSNIAN_BOSNIA_HERZ_CYRILLIC = $201A;
  TT_MS_LANGID_SLOVAK_SLOVAKIA = $041B;
  TT_MS_LANGID_ALBANIAN_ALBANIA = $041C;
  TT_MS_LANGID_SWEDISH_SWEDEN = $041D;
  TT_MS_LANGID_SWEDISH_FINLAND = $081D;
  TT_MS_LANGID_THAI_THAILAND = $041E;
  TT_MS_LANGID_TURKISH_TURKEY = $041F;
  TT_MS_LANGID_URDU_PAKISTAN = $0420;
  TT_MS_LANGID_INDONESIAN_INDONESIA = $0421;
  TT_MS_LANGID_UKRAINIAN_UKRAINE = $0422;
  TT_MS_LANGID_BELARUSIAN_BELARUS = $0423;
  TT_MS_LANGID_SLOVENIAN_SLOVENIA = $0424;
  TT_MS_LANGID_ESTONIAN_ESTONIA = $0425;
  TT_MS_LANGID_LATVIAN_LATVIA = $0426;
  TT_MS_LANGID_LITHUANIAN_LITHUANIA = $0427;
  TT_MS_LANGID_TAJIK_TAJIKISTAN = $0428;
  TT_MS_LANGID_VIETNAMESE_VIET_NAM = $042A;
  TT_MS_LANGID_ARMENIAN_ARMENIA = $042B;
  TT_MS_LANGID_AZERI_AZERBAIJAN_LATIN = $042C;
  TT_MS_LANGID_AZERI_AZERBAIJAN_CYRILLIC = $082C;
  TT_MS_LANGID_BASQUE_BASQUE = $042D;
  TT_MS_LANGID_UPPER_SORBIAN_GERMANY = $042E;
  TT_MS_LANGID_LOWER_SORBIAN_GERMANY = $082E;
  TT_MS_LANGID_MACEDONIAN_MACEDONIA = $042F;
  TT_MS_LANGID_SETSWANA_SOUTH_AFRICA = $0432;
  TT_MS_LANGID_ISIXHOSA_SOUTH_AFRICA = $0434;
  TT_MS_LANGID_ISIZULU_SOUTH_AFRICA = $0435;
  TT_MS_LANGID_AFRIKAANS_SOUTH_AFRICA = $0436;
  TT_MS_LANGID_GEORGIAN_GEORGIA = $0437;
  TT_MS_LANGID_FAEROESE_FAEROE_ISLANDS = $0438;
  TT_MS_LANGID_HINDI_INDIA = $0439;
  TT_MS_LANGID_MALTESE_MALTA = $043A;
  TT_MS_LANGID_SAMI_NORTHERN_NORWAY = $043B;
  TT_MS_LANGID_SAMI_NORTHERN_SWEDEN = $083B;
  TT_MS_LANGID_SAMI_NORTHERN_FINLAND = $0C3B;
  TT_MS_LANGID_SAMI_LULE_NORWAY = $103B;
  TT_MS_LANGID_SAMI_LULE_SWEDEN = $143B;
  TT_MS_LANGID_SAMI_SOUTHERN_NORWAY = $183B;
  TT_MS_LANGID_SAMI_SOUTHERN_SWEDEN = $1C3B;
  TT_MS_LANGID_SAMI_SKOLT_FINLAND = $203B;
  TT_MS_LANGID_SAMI_INARI_FINLAND = $243B;
  TT_MS_LANGID_IRISH_IRELAND = $083C;
  TT_MS_LANGID_MALAY_MALAYSIA = $043E;
  TT_MS_LANGID_MALAY_BRUNEI_DARUSSALAM = $083E;
  TT_MS_LANGID_KAZAKH_KAZAKHSTAN = $043F;
  TT_MS_LANGID_KYRGYZ_KYRGYZSTAN = $0440;
  TT_MS_LANGID_KISWAHILI_KENYA = $0441;
  TT_MS_LANGID_TURKMEN_TURKMENISTAN = $0442;
  TT_MS_LANGID_UZBEK_UZBEKISTAN_LATIN = $0443;
  TT_MS_LANGID_UZBEK_UZBEKISTAN_CYRILLIC = $0843;
  TT_MS_LANGID_TATAR_RUSSIA = $0444;
  TT_MS_LANGID_BENGALI_INDIA = $0445;
  TT_MS_LANGID_BENGALI_BANGLADESH = $0845;
  TT_MS_LANGID_PUNJABI_INDIA = $0446;
  TT_MS_LANGID_GUJARATI_INDIA = $0447;
  TT_MS_LANGID_ODIA_INDIA = $0448;
  TT_MS_LANGID_TAMIL_INDIA = $0449;
  TT_MS_LANGID_TELUGU_INDIA = $044A;
  TT_MS_LANGID_KANNADA_INDIA = $044B;
  TT_MS_LANGID_MALAYALAM_INDIA = $044C;
  TT_MS_LANGID_ASSAMESE_INDIA = $044D;
  TT_MS_LANGID_MARATHI_INDIA = $044E;
  TT_MS_LANGID_SANSKRIT_INDIA = $044F;
  TT_MS_LANGID_MONGOLIAN_MONGOLIA = $0450;
  TT_MS_LANGID_MONGOLIAN_PRC = $0850;
  TT_MS_LANGID_TIBETAN_PRC = $0451;
  TT_MS_LANGID_WELSH_UNITED_KINGDOM = $0452;
  TT_MS_LANGID_KHMER_CAMBODIA = $0453;
  TT_MS_LANGID_LAO_LAOS = $0454;
  TT_MS_LANGID_GALICIAN_GALICIAN = $0456;
  TT_MS_LANGID_KONKANI_INDIA = $0457;
  TT_MS_LANGID_SYRIAC_SYRIA = $045A;
  TT_MS_LANGID_SINHALA_SRI_LANKA = $045B;
  TT_MS_LANGID_INUKTITUT_CANADA = $045D;
  TT_MS_LANGID_INUKTITUT_CANADA_LATIN = $085D;
  TT_MS_LANGID_AMHARIC_ETHIOPIA = $045E;
  TT_MS_LANGID_TAMAZIGHT_ALGERIA = $085F;
  TT_MS_LANGID_NEPALI_NEPAL = $0461;
  TT_MS_LANGID_FRISIAN_NETHERLANDS = $0462;
  TT_MS_LANGID_PASHTO_AFGHANISTAN = $0463;
  TT_MS_LANGID_FILIPINO_PHILIPPINES = $0464;
  TT_MS_LANGID_DHIVEHI_MALDIVES = $0465;
  TT_MS_LANGID_HAUSA_NIGERIA = $0468;
  TT_MS_LANGID_YORUBA_NIGERIA = $046A;
  TT_MS_LANGID_QUECHUA_BOLIVIA = $046B;
  TT_MS_LANGID_QUECHUA_ECUADOR = $086B;
  TT_MS_LANGID_QUECHUA_PERU = $0C6B;
  TT_MS_LANGID_SESOTHO_SA_LEBOA_SOUTH_AFRICA = $046C;
  TT_MS_LANGID_BASHKIR_RUSSIA = $046D;
  TT_MS_LANGID_LUXEMBOURGISH_LUXEMBOURG = $046E;
  TT_MS_LANGID_GREENLANDIC_GREENLAND = $046F;
  TT_MS_LANGID_IGBO_NIGERIA = $0470;
  TT_MS_LANGID_YI_PRC = $0478;
  TT_MS_LANGID_MAPUDUNGUN_CHILE = $047A;
  TT_MS_LANGID_MOHAWK_MOHAWK = $047C;
  TT_MS_LANGID_BRETON_FRANCE = $047E;
  TT_MS_LANGID_UIGHUR_PRC = $0480;
  TT_MS_LANGID_MAORI_NEW_ZEALAND = $0481;
  TT_MS_LANGID_OCCITAN_FRANCE = $0482;
  TT_MS_LANGID_CORSICAN_FRANCE = $0483;
  TT_MS_LANGID_ALSATIAN_FRANCE = $0484;
  TT_MS_LANGID_YAKUT_RUSSIA = $0485;
  TT_MS_LANGID_KICHE_GUATEMALA = $0486;
  TT_MS_LANGID_KINYARWANDA_RWANDA = $0487;
  TT_MS_LANGID_WOLOF_SENEGAL = $0488;
  TT_MS_LANGID_DARI_AFGHANISTAN = $048C;
  TT_MS_LANGID_ARABIC_GENERAL = $0001;
  TT_MS_LANGID_CATALAN_SPAIN = TT_MS_LANGID_CATALAN_CATALAN;
  TT_MS_LANGID_CHINESE_GENERAL = $0004;
  TT_MS_LANGID_CHINESE_MACAU = TT_MS_LANGID_CHINESE_MACAO;
  TT_MS_LANGID_GERMAN_LIECHTENSTEI = TT_MS_LANGID_GERMAN_LIECHTENSTEIN;
  TT_MS_LANGID_ENGLISH_GENERAL = $0009;
  TT_MS_LANGID_ENGLISH_INDONESIA = $3809;
  TT_MS_LANGID_ENGLISH_HONG_KONG = $3C09;
  TT_MS_LANGID_SPANISH_SPAIN_INTERNATIONAL_SORT = TT_MS_LANGID_SPANISH_SPAIN_MODERN_SORT;
  TT_MS_LANGID_SPANISH_LATIN_AMERICA = $E40A;
  TT_MS_LANGID_FRENCH_WEST_INDIES = $1C0C;
  TT_MS_LANGID_FRENCH_REUNION = $200C;
  TT_MS_LANGID_FRENCH_CONGO = $240C;
  TT_MS_LANGID_FRENCH_ZAIRE = TT_MS_LANGID_FRENCH_CONGO;
  TT_MS_LANGID_FRENCH_SENEGAL = $280C;
  TT_MS_LANGID_FRENCH_CAMEROON = $2C0C;
  TT_MS_LANGID_FRENCH_COTE_D_IVOIRE = $300C;
  TT_MS_LANGID_FRENCH_MALI = $340C;
  TT_MS_LANGID_FRENCH_MOROCCO = $380C;
  TT_MS_LANGID_FRENCH_HAITI = $3C0C;
  TT_MS_LANGID_FRENCH_NORTH_AFRICA = $E40C;
  TT_MS_LANGID_KOREAN_EXTENDED_WANSUNG_KOREA = TT_MS_LANGID_KOREAN_KOREA;
  TT_MS_LANGID_KOREAN_JOHAB_KOREA = $0812;
  TT_MS_LANGID_RHAETO_ROMANIC_SWITZERLAND = TT_MS_LANGID_ROMANSH_SWITZERLAND;
  TT_MS_LANGID_MOLDAVIAN_MOLDAVIA = $0818;
  TT_MS_LANGID_RUSSIAN_MOLDAVIA = $0819;
  TT_MS_LANGID_URDU_INDIA = $0820;
  TT_MS_LANGID_CLASSIC_LITHUANIAN_LITHUANIA = $0827;
  TT_MS_LANGID_SLOVENE_SLOVENIA = TT_MS_LANGID_SLOVENIAN_SLOVENIA;
  TT_MS_LANGID_FARSI_IRAN = $0429;
  TT_MS_LANGID_BASQUE_SPAIN = TT_MS_LANGID_BASQUE_BASQUE;
  TT_MS_LANGID_SORBIAN_GERMANY = TT_MS_LANGID_UPPER_SORBIAN_GERMANY;
  TT_MS_LANGID_SUTU_SOUTH_AFRICA = $0430;
  TT_MS_LANGID_TSONGA_SOUTH_AFRICA = $0431;
  TT_MS_LANGID_TSWANA_SOUTH_AFRICA = TT_MS_LANGID_SETSWANA_SOUTH_AFRICA;
  TT_MS_LANGID_VENDA_SOUTH_AFRICA = $0433;
  TT_MS_LANGID_XHOSA_SOUTH_AFRICA = TT_MS_LANGID_ISIXHOSA_SOUTH_AFRICA;
  TT_MS_LANGID_ZULU_SOUTH_AFRICA = TT_MS_LANGID_ISIZULU_SOUTH_AFRICA;
  TT_MS_LANGID_SAAMI_LAPONIA = $043B;
  TT_MS_LANGID_IRISH_GAELIC_IRELAND = $043C;
  TT_MS_LANGID_SCOTTISH_GAELIC_UNITED_KINGDOM = $083C;
  TT_MS_LANGID_YIDDISH_GERMANY = $043D;
  TT_MS_LANGID_KAZAK_KAZAKSTAN = TT_MS_LANGID_KAZAKH_KAZAKHSTAN;
  TT_MS_LANGID_KIRGHIZ_KIRGHIZ_REPUBLIC = TT_MS_LANGID_KYRGYZ_KYRGYZSTAN;
  TT_MS_LANGID_KIRGHIZ_KIRGHIZSTAN = TT_MS_LANGID_KYRGYZ_KYRGYZSTAN;
  TT_MS_LANGID_SWAHILI_KENYA = TT_MS_LANGID_KISWAHILI_KENYA;
  TT_MS_LANGID_TATAR_TATARSTAN = TT_MS_LANGID_TATAR_RUSSIA;
  TT_MS_LANGID_PUNJABI_ARABIC_PAKISTAN = $0846;
  TT_MS_LANGID_ORIYA_INDIA = TT_MS_LANGID_ODIA_INDIA;
  TT_MS_LANGID_MONGOLIAN_MONGOLIA_MONGOLIAN = TT_MS_LANGID_MONGOLIAN_PRC;
  TT_MS_LANGID_TIBETAN_CHINA = TT_MS_LANGID_TIBETAN_PRC;
  TT_MS_LANGID_DZONGHKA_BHUTAN = $0851;
  TT_MS_LANGID_TIBETAN_BHUTAN = TT_MS_LANGID_DZONGHKA_BHUTAN;
  TT_MS_LANGID_WELSH_WALES = TT_MS_LANGID_WELSH_UNITED_KINGDOM;
  TT_MS_LANGID_BURMESE_MYANMAR = $0455;
  TT_MS_LANGID_GALICIAN_SPAIN = TT_MS_LANGID_GALICIAN_GALICIAN;
  TT_MS_LANGID_MANIPURI_INDIA = $0458;
  TT_MS_LANGID_SINDHI_INDIA = $0459;
  TT_MS_LANGID_SINDHI_PAKISTAN = $0859;
  TT_MS_LANGID_SINHALESE_SRI_LANKA = TT_MS_LANGID_SINHALA_SRI_LANKA;
  TT_MS_LANGID_CHEROKEE_UNITED_STATES = $045C;
  TT_MS_LANGID_TAMAZIGHT_MOROCCO = $045F;
  TT_MS_LANGID_TAMAZIGHT_MOROCCO_LATIN = TT_MS_LANGID_TAMAZIGHT_ALGERIA;
  TT_MS_LANGID_KASHMIRI_PAKISTAN = $0460;
  TT_MS_LANGID_KASHMIRI_SASIA = $0860;
  TT_MS_LANGID_KASHMIRI_INDIA = TT_MS_LANGID_KASHMIRI_SASIA;
  TT_MS_LANGID_NEPALI_INDIA = $0861;
  TT_MS_LANGID_DIVEHI_MALDIVES = TT_MS_LANGID_DHIVEHI_MALDIVES;
  TT_MS_LANGID_EDO_NIGERIA = $0466;
  TT_MS_LANGID_FULFULDE_NIGERIA = $0467;
  TT_MS_LANGID_IBIBIO_NIGERIA = $0469;
  TT_MS_LANGID_SEPEDI_SOUTH_AFRICA = TT_MS_LANGID_SESOTHO_SA_LEBOA_SOUTH_AFRICA;
  TT_MS_LANGID_SOTHO_SOUTHERN_SOUTH_AFRICA = TT_MS_LANGID_SESOTHO_SA_LEBOA_SOUTH_AFRICA;
  TT_MS_LANGID_KANURI_NIGERIA = $0471;
  TT_MS_LANGID_OROMO_ETHIOPIA = $0472;
  TT_MS_LANGID_TIGRIGNA_ETHIOPIA = $0473;
  TT_MS_LANGID_TIGRIGNA_ERYTHREA = $0873;
  TT_MS_LANGID_TIGRIGNA_ERYTREA = TT_MS_LANGID_TIGRIGNA_ERYTHREA;
  TT_MS_LANGID_GUARANI_PARAGUAY = $0474;
  TT_MS_LANGID_HAWAIIAN_UNITED_STATES = $0475;
  TT_MS_LANGID_LATIN = $0476;
  TT_MS_LANGID_SOMALI_SOMALIA = $0477;
  TT_MS_LANGID_YI_CHINA = TT_MS_LANGID_YI_PRC;
  TT_MS_LANGID_PAPIAMENTU_NETHERLANDS_ANTILLES = $0479;
  TT_MS_LANGID_UIGHUR_CHINA = TT_MS_LANGID_UIGHUR_PRC;

  TT_NAME_ID_COPYRIGHT = 0;
  TT_NAME_ID_FONT_FAMILY = 1;
  TT_NAME_ID_FONT_SUBFAMILY = 2;
  TT_NAME_ID_UNIQUE_ID = 3;
  TT_NAME_ID_FULL_NAME = 4;
  TT_NAME_ID_VERSION_STRING = 5;
  TT_NAME_ID_PS_NAME = 6;
  TT_NAME_ID_TRADEMARK = 7;
  TT_NAME_ID_MANUFACTURER = 8;
  TT_NAME_ID_DESIGNER = 9;
  TT_NAME_ID_DESCRIPTION = 10;
  TT_NAME_ID_VENDOR_URL = 11;
  TT_NAME_ID_DESIGNER_URL = 12;
  TT_NAME_ID_LICENSE = 13;
  TT_NAME_ID_LICENSE_URL = 14;
  TT_NAME_ID_TYPOGRAPHIC_FAMILY = 16;
  TT_NAME_ID_TYPOGRAPHIC_SUBFAMILY = 17;
  TT_NAME_ID_MAC_FULL_NAME = 18;
  TT_NAME_ID_SAMPLE_TEXT = 19;
  TT_NAME_ID_CID_FINDFONT_NAME = 20;
  TT_NAME_ID_WWS_FAMILY = 21;
  TT_NAME_ID_WWS_SUBFAMILY = 22;
  TT_NAME_ID_LIGHT_BACKGROUND = 23;
  TT_NAME_ID_DARK_BACKGROUND = 24;
  TT_NAME_ID_VARIATIONS_PREFIX = 25;
  TT_NAME_ID_PREFERRED_FAMILY = TT_NAME_ID_TYPOGRAPHIC_FAMILY;
  TT_NAME_ID_PREFERRED_SUBFAMILY = TT_NAME_ID_TYPOGRAPHIC_SUBFAMILY;
  TT_UCR_BASIC_LATIN = 1 shl 0;
  TT_UCR_LATIN1_SUPPLEMENT = 1 shl 1;
  TT_UCR_LATIN_EXTENDED_A = 1 shl 2;
  TT_UCR_LATIN_EXTENDED_B = 1 shl 3;
  TT_UCR_IPA_EXTENSIONS = 1 shl 4;
  TT_UCR_SPACING_MODIFIER = 1 shl 5;
  TT_UCR_COMBINING_DIACRITICAL_MARKS = 1 shl 6;
  TT_UCR_GREEK = 1 shl 7;
  TT_UCR_COPTIC = 1 shl 8;
  TT_UCR_CYRILLIC = 1 shl 9;
  TT_UCR_ARMENIAN = 1 shl 10;
  TT_UCR_HEBREW = 1 shl 11;
  TT_UCR_VAI = 1 shl 12;
  TT_UCR_ARABIC = 1 shl 13;
  TT_UCR_NKO = 1 shl 14;
  TT_UCR_DEVANAGARI = 1 shl 15;
  TT_UCR_BENGALI = 1 shl 16;
  TT_UCR_GURMUKHI = 1 shl 17;
  TT_UCR_GUJARATI = 1 shl 18;
  TT_UCR_ORIYA = 1 shl 19;
  TT_UCR_TAMIL = 1 shl 20;
  TT_UCR_TELUGU = 1 shl 21;
  TT_UCR_KANNADA = 1 shl 22;
  TT_UCR_MALAYALAM = 1 shl 23;
  TT_UCR_THAI = 1 shl 24;
  TT_UCR_LAO = 1 shl 25;
  TT_UCR_GEORGIAN = 1 shl 26;
  TT_UCR_BALINESE = 1 shl 27;
  TT_UCR_HANGUL_JAMO = 1 shl 28;
  TT_UCR_LATIN_EXTENDED_ADDITIONAL = 1 shl 29;
  TT_UCR_GREEK_EXTENDED = 1 shl 30;
  TT_UCR_GENERAL_PUNCTUATION = 1 shl 31;
  TT_UCR_SUPERSCRIPTS_SUBSCRIPTS = 1 shl 0;
  TT_UCR_CURRENCY_SYMBOLS = 1 shl 1;
  TT_UCR_COMBINING_DIACRITICAL_MARKS_SYMB = 1 shl 2;
  TT_UCR_LETTERLIKE_SYMBOLS = 1 shl 3;
  TT_UCR_NUMBER_FORMS = 1 shl 4;
  TT_UCR_ARROWS = 1 shl 5;
  TT_UCR_MATHEMATICAL_OPERATORS = 1 shl 6;
  TT_UCR_MISCELLANEOUS_TECHNICAL = 1 shl 7;
  TT_UCR_CONTROL_PICTURES = 1 shl 8;
  TT_UCR_OCR = 1 shl 9;
  TT_UCR_ENCLOSED_ALPHANUMERICS = 1 shl 10;
  TT_UCR_BOX_DRAWING = 1 shl 11;
  TT_UCR_BLOCK_ELEMENTS = 1 shl 12;
  TT_UCR_GEOMETRIC_SHAPES = 1 shl 13;
  TT_UCR_MISCELLANEOUS_SYMBOLS = 1 shl 14;
  TT_UCR_DINGBATS = 1 shl 15;
  TT_UCR_CJK_SYMBOLS = 1 shl 16;
  TT_UCR_HIRAGANA = 1 shl 17;
  TT_UCR_KATAKANA = 1 shl 18;
  TT_UCR_BOPOMOFO = 1 shl 19;
  TT_UCR_HANGUL_COMPATIBILITY_JAMO = 1 shl 20;
  TT_UCR_CJK_MISC = 1 shl 21;
  TT_UCR_KANBUN = TT_UCR_CJK_MISC;
  TT_UCR_ENCLOSED_CJK_LETTERS_MONTHS = 1 shl 22;
  TT_UCR_CJK_COMPATIBILITY = 1 shl 23;
  TT_UCR_HANGUL = 1 shl 24;
  TT_UCR_SURROGATES = 1 shl 25;
  TT_UCR_NON_PLANE_0 = TT_UCR_SURROGATES;
  TT_UCR_PHOENICIAN = 1 shl 26;
  TT_UCR_CJK_UNIFIED_IDEOGRAPHS = 1 shl 27;
  TT_UCR_PRIVATE_USE = 1 shl 28;
  TT_UCR_CJK_COMPATIBILITY_IDEOGRAPHS = 1 shl 29;
  TT_UCR_ALPHABETIC_PRESENTATION_FORMS = 1 shl 30;
  TT_UCR_ARABIC_PRESENTATION_FORMS_A = 1 shl 31;
  TT_UCR_COMBINING_HALF_MARKS = 1 shl 0;
  TT_UCR_CJK_COMPATIBILITY_FORMS = 1 shl 1;
  TT_UCR_SMALL_FORM_VARIANTS = 1 shl 2;
  TT_UCR_ARABIC_PRESENTATION_FORMS_B = 1 shl 3;
  TT_UCR_HALFWIDTH_FULLWIDTH_FORMS = 1 shl 4;
  TT_UCR_SPECIALS = 1 shl 5;
  TT_UCR_TIBETAN = 1 shl 6;
  TT_UCR_SYRIAC = 1 shl 7;
  TT_UCR_THAANA = 1 shl 8;
  TT_UCR_SINHALA = 1 shl 9;
  TT_UCR_MYANMAR = 1 shl 10;
  TT_UCR_ETHIOPIC = 1 shl 11;
  TT_UCR_CHEROKEE = 1 shl 12;
  TT_UCR_CANADIAN_ABORIGINAL_SYLLABICS = 1 shl 13;
  TT_UCR_OGHAM = 1 shl 14;
  TT_UCR_RUNIC = 1 shl 15;
  TT_UCR_KHMER = 1 shl 16;
  TT_UCR_MONGOLIAN = 1 shl 17;
  TT_UCR_BRAILLE = 1 shl 18;
  TT_UCR_YI = 1 shl 19;
  TT_UCR_PHILIPPINE = 1 shl 20;
  TT_UCR_OLD_ITALIC = 1 shl 21;
  TT_UCR_GOTHIC = 1 shl 22;
  TT_UCR_DESERET = 1 shl 23;
  TT_UCR_MUSICAL_SYMBOLS = 1 shl 24;
  TT_UCR_MATH_ALPHANUMERIC_SYMBOLS = 1 shl 25;
  TT_UCR_PRIVATE_USE_SUPPLEMENTARY = 1 shl 26;
  TT_UCR_VARIATION_SELECTORS = 1 shl 27;
  TT_UCR_TAGS = 1 shl 28;
  TT_UCR_LIMBU = 1 shl 29;
  TT_UCR_TAI_LE = 1 shl 30;
  TT_UCR_NEW_TAI_LUE = 1 shl 31;
  TT_UCR_BUGINESE = 1 shl 0;
  TT_UCR_GLAGOLITIC = 1 shl 1;
  TT_UCR_TIFINAGH = 1 shl 2;
  TT_UCR_YIJING = 1 shl 3;
  TT_UCR_SYLOTI_NAGRI = 1 shl 4;
  TT_UCR_LINEAR_B = 1 shl 5;
  TT_UCR_ANCIENT_GREEK_NUMBERS = 1 shl 6;
  TT_UCR_UGARITIC = 1 shl 7;
  TT_UCR_OLD_PERSIAN = 1 shl 8;
  TT_UCR_SHAVIAN = 1 shl 9;
  TT_UCR_OSMANYA = 1 shl 10;
  TT_UCR_CYPRIOT_SYLLABARY = 1 shl 11;
  TT_UCR_KHAROSHTHI = 1 shl 12;
  TT_UCR_TAI_XUAN_JING = 1 shl 13;
  TT_UCR_CUNEIFORM = 1 shl 14;
  TT_UCR_COUNTING_ROD_NUMERALS = 1 shl 15;
  TT_UCR_SUNDANESE = 1 shl 16;
  TT_UCR_LEPCHA = 1 shl 17;
  TT_UCR_OL_CHIKI = 1 shl 18;
  TT_UCR_SAURASHTRA = 1 shl 19;
  TT_UCR_KAYAH_LI = 1 shl 20;
  TT_UCR_REJANG = 1 shl 21;
  TT_UCR_CHAM = 1 shl 22;
  TT_UCR_ANCIENT_SYMBOLS = 1 shl 23;
  TT_UCR_PHAISTOS_DISC = 1 shl 24;
  TT_UCR_OLD_ANATOLIAN = 1 shl 25;
  TT_UCR_GAME_TILES = 1 shl 26;
  TT_UCR_ARABIC_PRESENTATION_A = TT_UCR_ARABIC_PRESENTATION_FORMS_A;
  TT_UCR_ARABIC_PRESENTATION_B = TT_UCR_ARABIC_PRESENTATION_FORMS_B;
  TT_UCR_COMBINING_DIACRITICS = TT_UCR_COMBINING_DIACRITICAL_MARKS;
  TT_UCR_COMBINING_DIACRITICS_SYMB = TT_UCR_COMBINING_DIACRITICAL_MARKS_SYMB;

  // ====  ftbdf.h

type
  PBDF_PropertyType = ^TBDF_PropertyType;
  TBDF_PropertyType = longint;

const
  BDF_PROPERTY_TYPE_NONE = 0;
  BDF_PROPERTY_TYPE_ATOM = 1;
  BDF_PROPERTY_TYPE_INTEGER = 2;
  BDF_PROPERTY_TYPE_CARDINAL = 3;

  // ====  ftcid.h

type
  PFT_Sfnt_Tag = ^TFT_Sfnt_Tag;
  TFT_Sfnt_Tag = longint;

const
  FT_SFNT_HEAD = 0;
  FT_SFNT_MAXP = 1;
  FT_SFNT_OS2 = 2;
  FT_SFNT_HHEA = 3;
  FT_SFNT_VHEA = 4;
  FT_SFNT_POST = 5;
  FT_SFNT_PCLT = 6;
  FT_SFNT_MAX = 7;

  // ====  ftcolor.h

const
  FT_PALETTE_FOR_LIGHT_BACKGROUND = $01;
  FT_PALETTE_FOR_DARK_BACKGROUND = $02;

  // ====  ftcolor.h

type
  PFT_PaintFormat = ^TFT_PaintFormat;
  TFT_PaintFormat = longint;

const
  FT_COLR_PAINTFORMAT_COLR_LAYERS = 1;
  FT_COLR_PAINTFORMAT_SOLID = 2;
  FT_COLR_PAINTFORMAT_LINEAR_GRADIENT = 4;
  FT_COLR_PAINTFORMAT_RADIAL_GRADIENT = 6;
  FT_COLR_PAINTFORMAT_SWEEP_GRADIENT = 8;
  FT_COLR_PAINTFORMAT_GLYPH = 10;
  FT_COLR_PAINTFORMAT_COLR_GLYPH = 11;
  FT_COLR_PAINTFORMAT_TRANSFORM = 12;
  FT_COLR_PAINTFORMAT_TRANSLATE = 14;
  FT_COLR_PAINTFORMAT_SCALE = 16;
  FT_COLR_PAINTFORMAT_ROTATE = 24;
  FT_COLR_PAINTFORMAT_SKEW = 28;
  FT_COLR_PAINTFORMAT_COMPOSITE = 32;
  FT_COLR_PAINT_FORMAT_MAX = 33;
  FT_COLR_PAINTFORMAT_UNSUPPORTED = 255;

type
  PFT_PaintExtend = ^TFT_PaintExtend;
  TFT_PaintExtend = longint;

const
  FT_COLR_PAINT_EXTEND_PAD = 0;
  FT_COLR_PAINT_EXTEND_REPEAT = 1;
  FT_COLR_PAINT_EXTEND_REFLECT = 2;

type
  PFT_Composite_Mode = ^TFT_Composite_Mode;
  TFT_Composite_Mode = longint;

const
  FT_COLR_COMPOSITE_CLEAR = 0;
  FT_COLR_COMPOSITE_SRC = 1;
  FT_COLR_COMPOSITE_DEST = 2;
  FT_COLR_COMPOSITE_SRC_OVER = 3;
  FT_COLR_COMPOSITE_DEST_OVER = 4;
  FT_COLR_COMPOSITE_SRC_IN = 5;
  FT_COLR_COMPOSITE_DEST_IN = 6;
  FT_COLR_COMPOSITE_SRC_OUT = 7;
  FT_COLR_COMPOSITE_DEST_OUT = 8;
  FT_COLR_COMPOSITE_SRC_ATOP = 9;
  FT_COLR_COMPOSITE_DEST_ATOP = 10;
  FT_COLR_COMPOSITE_XOR = 11;
  FT_COLR_COMPOSITE_PLUS = 12;
  FT_COLR_COMPOSITE_SCREEN = 13;
  FT_COLR_COMPOSITE_OVERLAY = 14;
  FT_COLR_COMPOSITE_DARKEN = 15;
  FT_COLR_COMPOSITE_LIGHTEN = 16;
  FT_COLR_COMPOSITE_COLOR_DODGE = 17;
  FT_COLR_COMPOSITE_COLOR_BURN = 18;
  FT_COLR_COMPOSITE_HARD_LIGHT = 19;
  FT_COLR_COMPOSITE_SOFT_LIGHT = 20;
  FT_COLR_COMPOSITE_DIFFERENCE = 21;
  FT_COLR_COMPOSITE_EXCLUSION = 22;
  FT_COLR_COMPOSITE_MULTIPLY = 23;
  FT_COLR_COMPOSITE_HSL_HUE = 24;
  FT_COLR_COMPOSITE_HSL_SATURATION = 25;
  FT_COLR_COMPOSITE_HSL_COLOR = 26;
  FT_COLR_COMPOSITE_HSL_LUMINOSITY = 27;
  FT_COLR_COMPOSITE_MAX = 28;

type
  PFT_Color_Root_Transform = ^TFT_Color_Root_Transform;
  TFT_Color_Root_Transform = longint;

const
  FT_COLOR_INCLUDE_ROOT_TRANSFORM = 0;
  FT_COLOR_NO_ROOT_TRANSFORM = 1;
  FT_COLOR_ROOT_TRANSFORM_MAX = 2;

  // ====  ftadvanc.h

const
  FT_ADVANCE_FLAG_FAST_ONLY = $20000000;

  // ====  ftgxval.h

const
  FT_VALIDATE_feat_INDEX = 0;
  FT_VALIDATE_mort_INDEX = 1;
  FT_VALIDATE_morx_INDEX = 2;
  FT_VALIDATE_bsln_INDEX = 3;
  FT_VALIDATE_just_INDEX = 4;
  FT_VALIDATE_kern_INDEX = 5;
  FT_VALIDATE_opbd_INDEX = 6;
  FT_VALIDATE_trak_INDEX = 7;
  FT_VALIDATE_prop_INDEX = 8;
  FT_VALIDATE_lcar_INDEX = 9;
  FT_VALIDATE_GX_LAST_INDEX = FT_VALIDATE_lcar_INDEX;
  FT_VALIDATE_GX_LENGTH = FT_VALIDATE_GX_LAST_INDEX + 1;

const
  FT_VALIDATE_GX_START = $4000;   // Von ext3.tmp
  FT_VALIDATE_MS = FT_VALIDATE_GX_START shl 0;
  FT_VALIDATE_APPLE = FT_VALIDATE_GX_START shl 1;
  FT_VALIDATE_CKERN = FT_VALIDATE_MS or FT_VALIDATE_APPLE;

  // ====  t1tables.h

type
  PT1_Blend_Flags = ^TT1_Blend_Flags;
  TT1_Blend_Flags = longint;

const
  T1_BLEND_UNDERLINE_POSITION = 0;
  T1_BLEND_UNDERLINE_THICKNESS = 1;
  T1_BLEND_ITALIC_ANGLE = 2;
  T1_BLEND_BLUE_VALUES = 3;
  T1_BLEND_OTHER_BLUES = 4;
  T1_BLEND_STANDARD_WIDTH = 5;
  T1_BLEND_STANDARD_HEIGHT = 6;
  T1_BLEND_STEM_SNAP_WIDTHS = 7;
  T1_BLEND_STEM_SNAP_HEIGHTS = 8;
  T1_BLEND_BLUE_SCALE = 9;
  T1_BLEND_BLUE_SHIFT = 10;
  T1_BLEND_FAMILY_BLUES = 11;
  T1_BLEND_FAMILY_OTHER_BLUES = 12;
  T1_BLEND_FORCE_BOLD = 13;
  T1_BLEND_MAX = 14;

type
  PT1_EncodingType = ^TT1_EncodingType;
  TT1_EncodingType = longint;

const
  T1_ENCODING_TYPE_NONE = 0;
  T1_ENCODING_TYPE_ARRAY = 1;
  T1_ENCODING_TYPE_STANDARD = 2;
  T1_ENCODING_TYPE_ISOLATIN1 = 3;
  T1_ENCODING_TYPE_EXPERT = 4;

type
  PPS_Dict_Keys = ^TPS_Dict_Keys;
  TPS_Dict_Keys = longint;

const
  PS_DICT_FONT_TYPE = 0;
  PS_DICT_FONT_MATRIX = 1;
  PS_DICT_FONT_BBOX = 2;
  PS_DICT_PAINT_TYPE = 3;
  PS_DICT_FONT_NAME = 4;
  PS_DICT_UNIQUE_ID = 5;
  PS_DICT_NUM_CHAR_STRINGS = 6;
  PS_DICT_CHAR_STRING_KEY = 7;
  PS_DICT_CHAR_STRING = 8;
  PS_DICT_ENCODING_TYPE = 9;
  PS_DICT_ENCODING_ENTRY = 10;
  PS_DICT_NUM_SUBRS = 11;
  PS_DICT_SUBR = 12;
  PS_DICT_STD_HW = 13;
  PS_DICT_STD_VW = 14;
  PS_DICT_NUM_BLUE_VALUES = 15;
  PS_DICT_BLUE_VALUE = 16;
  PS_DICT_BLUE_FUZZ = 17;
  PS_DICT_NUM_OTHER_BLUES = 18;
  PS_DICT_OTHER_BLUE = 19;
  PS_DICT_NUM_FAMILY_BLUES = 20;
  PS_DICT_FAMILY_BLUE = 21;
  PS_DICT_NUM_FAMILY_OTHER_BLUES = 22;
  PS_DICT_FAMILY_OTHER_BLUE = 23;
  PS_DICT_BLUE_SCALE = 24;
  PS_DICT_BLUE_SHIFT = 25;
  PS_DICT_NUM_STEM_SNAP_H = 26;
  PS_DICT_STEM_SNAP_H = 27;
  PS_DICT_NUM_STEM_SNAP_V = 28;
  PS_DICT_STEM_SNAP_V = 29;
  PS_DICT_FORCE_BOLD = 30;
  PS_DICT_RND_STEM_UP = 31;
  PS_DICT_MIN_FEATURE = 32;
  PS_DICT_LEN_IV = 33;
  PS_DICT_PASSWORD = 34;
  PS_DICT_LANGUAGE_GROUP = 35;
  PS_DICT_VERSION = 36;
  PS_DICT_NOTICE = 37;
  PS_DICT_FULL_NAME = 38;
  PS_DICT_FAMILY_NAME = 39;
  PS_DICT_WEIGHT = 40;
  PS_DICT_IS_FIXED_PITCH = 41;
  PS_DICT_UNDERLINE_POSITION = 42;
  PS_DICT_UNDERLINE_THICKNESS = 43;
  PS_DICT_FS_TYPE = 44;
  PS_DICT_ITALIC_ANGLE = 45;
  PS_DICT_MAX = PS_DICT_ITALIC_ANGLE;


  // ====  ftotval.h

const
  FT_VALIDATE_BASE = $0100;
  FT_VALIDATE_GDEF = $0200;
  FT_VALIDATE_GPOS = $0400;
  FT_VALIDATE_GSUB = $0800;
  FT_VALIDATE_JSTF = $1000;
  FT_VALIDATE_MATH = $2000;
  FT_VALIDATE_OT = ((((FT_VALIDATE_BASE or FT_VALIDATE_GDEF) or FT_VALIDATE_GPOS) or FT_VALIDATE_GSUB) or FT_VALIDATE_JSTF) or FT_VALIDATE_MATH;


  //====  ftdriver.h

const
  FT_HINTING_FREETYPE = 0;
  FT_HINTING_ADOBE = 1;
  FT_CFF_HINTING_FREETYPE = FT_HINTING_FREETYPE;
  FT_CFF_HINTING_ADOBE = FT_HINTING_ADOBE;
  TT_INTERPRETER_VERSION_35 = 35;
  TT_INTERPRETER_VERSION_38 = 38;
  TT_INTERPRETER_VERSION_40 = 40;
  FT_AUTOHINTER_SCRIPT_NONE = 0;
  FT_AUTOHINTER_SCRIPT_LATIN = 1;
  FT_AUTOHINTER_SCRIPT_CJK = 2;
  FT_AUTOHINTER_SCRIPT_INDIC = 3;


  // ====  ftgasp.h

const
  FT_GASP_NO_TABLE = -(1);
  FT_GASP_DO_GRIDFIT = $01;
  FT_GASP_DO_GRAY = $02;
  FT_GASP_SYMMETRIC_GRIDFIT = $04;
  FT_GASP_SYMMETRIC_SMOOTHING = $08;


  // ====  ftwinfnt.h

const
  FT_WinFNT_ID_CP1252 = 0;
  FT_WinFNT_ID_DEFAULT = 1;
  FT_WinFNT_ID_SYMBOL = 2;
  FT_WinFNT_ID_MAC = 77;
  FT_WinFNT_ID_CP932 = 128;
  FT_WinFNT_ID_CP949 = 129;
  FT_WinFNT_ID_CP1361 = 130;
  FT_WinFNT_ID_CP936 = 134;
  FT_WinFNT_ID_CP950 = 136;
  FT_WinFNT_ID_CP1253 = 161;
  FT_WinFNT_ID_CP1254 = 162;
  FT_WinFNT_ID_CP1258 = 163;
  FT_WinFNT_ID_CP1255 = 177;
  FT_WinFNT_ID_CP1256 = 178;
  FT_WinFNT_ID_CP1257 = 186;
  FT_WinFNT_ID_CP1251 = 204;
  FT_WinFNT_ID_CP874 = 222;
  FT_WinFNT_ID_CP1250 = 238;
  FT_WinFNT_ID_OEM = 255;


  // ====  ftstroke.h

type
  PFT_Stroker_LineJoin = ^TFT_Stroker_LineJoin;
  TFT_Stroker_LineJoin = longint;

const
  FT_STROKER_LINEJOIN_ROUND = 0;
  FT_STROKER_LINEJOIN_BEVEL = 1;
  FT_STROKER_LINEJOIN_MITER_VARIABLE = 2;
  FT_STROKER_LINEJOIN_MITER = FT_STROKER_LINEJOIN_MITER_VARIABLE;
  FT_STROKER_LINEJOIN_MITER_FIXED = 3;

type
  PFT_Stroker_LineCap = ^TFT_Stroker_LineCap;
  TFT_Stroker_LineCap = longint;

const
  FT_STROKER_LINECAP_BUTT = 0;
  FT_STROKER_LINECAP_ROUND = 1;
  FT_STROKER_LINECAP_SQUARE = 2;

type
  PFT_StrokerBorder = ^TFT_StrokerBorder;
  TFT_StrokerBorder = longint;

const
  FT_STROKER_BORDER_LEFT = 0;
  FT_STROKER_BORDER_RIGHT = 1;


  // ====  ftglyph.h

type
  PFT_Glyph_BBox_Mode = ^TFT_Glyph_BBox_Mode;
  TFT_Glyph_BBox_Mode = longint;

const
  FT_GLYPH_BBOX_UNSCALED = 0;
  FT_GLYPH_BBOX_SUBPIXELS = 0;
  FT_GLYPH_BBOX_GRIDFIT = 1;
  FT_GLYPH_BBOX_TRUNCATE = 2;
  FT_GLYPH_BBOX_PIXELS = 3;


  // ====  fterrors.h

const
  FT_ERR_BASE = 0;


  // ====  ftoption.h

const
  FT_RENDER_POOL_SIZE = 16384;
  FT_MAX_MODULES = 32;

  TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES = 1000000;
  T1_MAX_DICT_DEPTH = 5;
  T1_MAX_SUBRS_CALLS = 16;
  T1_MAX_CHARSTRINGS_OPERANDS = 256;

  CFF_CONFIG_OPTION_DARKENING_PARAMETER_X1 = 500;
  CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y1 = 400;
  CFF_CONFIG_OPTION_DARKENING_PARAMETER_X2 = 1000;
  CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y2 = 275;
  CFF_CONFIG_OPTION_DARKENING_PARAMETER_X3 = 1667;
  CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y3 = 275;
  CFF_CONFIG_OPTION_DARKENING_PARAMETER_X4 = 2333;
  CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y4 = 0;

  // ====  tttags.h

  TTAG_avar = byte('a') shl 24 + byte('v') shl 16 + byte('a') shl 8 + byte('r');
  TTAG_BASE = byte('B') shl 24 + byte('A') shl 16 + byte('S') shl 8 + byte('E');
  TTAG_bdat = byte('b') shl 24 + byte('d') shl 16 + byte('a') shl 8 + byte('t');
  TTAG_BDF = byte('B') shl 24 + byte('D') shl 16 + byte('F') shl 8 + byte(' ');
  TTAG_bhed = byte('b') shl 24 + byte('h') shl 16 + byte('e') shl 8 + byte('d');
  TTAG_bloc = byte('b') shl 24 + byte('l') shl 16 + byte('o') shl 8 + byte('c');
  TTAG_bsln = byte('b') shl 24 + byte('s') shl 16 + byte('l') shl 8 + byte('n');
  TTAG_CBDT = byte('C') shl 24 + byte('B') shl 16 + byte('D') shl 8 + byte('T');
  TTAG_CBLC = byte('C') shl 24 + byte('B') shl 16 + byte('L') shl 8 + byte('C');
  TTAG_CFF = byte('C') shl 24 + byte('F') shl 16 + byte('F') shl 8 + byte(' ');
  TTAG_CFF2 = byte('C') shl 24 + byte('F') shl 16 + byte('F') shl 8 + byte('2');
  TTAG_CID = byte('C') shl 24 + byte('I') shl 16 + byte('D') shl 8 + byte(' ');
  TTAG_cmap = byte('c') shl 24 + byte('m') shl 16 + byte('a') shl 8 + byte('p');
  TTAG_COLR = byte('C') shl 24 + byte('O') shl 16 + byte('L') shl 8 + byte('R');
  TTAG_CPAL = byte('C') shl 24 + byte('P') shl 16 + byte('A') shl 8 + byte('L');
  TTAG_cvar = byte('c') shl 24 + byte('v') shl 16 + byte('a') shl 8 + byte('r');
  TTAG_cvt = byte('c') shl 24 + byte('v') shl 16 + byte('t') shl 8 + byte(' ');
  TTAG_DSIG = byte('D') shl 24 + byte('S') shl 16 + byte('I') shl 8 + byte('G');
  TTAG_EBDT = byte('E') shl 24 + byte('B') shl 16 + byte('D') shl 8 + byte('T');
  TTAG_EBLC = byte('E') shl 24 + byte('B') shl 16 + byte('L') shl 8 + byte('C');
  TTAG_EBSC = byte('E') shl 24 + byte('B') shl 16 + byte('S') shl 8 + byte('C');
  TTAG_feat = byte('f') shl 24 + byte('e') shl 16 + byte('a') shl 8 + byte('t');
  TTAG_FOND = byte('F') shl 24 + byte('O') shl 16 + byte('N') shl 8 + byte('D');
  TTAG_fpgm = byte('f') shl 24 + byte('p') shl 16 + byte('g') shl 8 + byte('m');
  TTAG_fvar = byte('f') shl 24 + byte('v') shl 16 + byte('a') shl 8 + byte('r');
  TTAG_gasp = byte('g') shl 24 + byte('a') shl 16 + byte('s') shl 8 + byte('p');
  TTAG_GDEF = byte('G') shl 24 + byte('D') shl 16 + byte('E') shl 8 + byte('F');
  TTAG_glyf = byte('g') shl 24 + byte('l') shl 16 + byte('y') shl 8 + byte('f');
  TTAG_GPOS = byte('G') shl 24 + byte('P') shl 16 + byte('O') shl 8 + byte('S');
  TTAG_GSUB = byte('G') shl 24 + byte('S') shl 16 + byte('U') shl 8 + byte('B');
  TTAG_gvar = byte('g') shl 24 + byte('v') shl 16 + byte('a') shl 8 + byte('r');
  TTAG_HVAR = byte('H') shl 24 + byte('V') shl 16 + byte('A') shl 8 + byte('R');
  TTAG_hdmx = byte('h') shl 24 + byte('d') shl 16 + byte('m') shl 8 + byte('x');
  TTAG_head = byte('h') shl 24 + byte('e') shl 16 + byte('a') shl 8 + byte('d');
  TTAG_hhea = byte('h') shl 24 + byte('h') shl 16 + byte('e') shl 8 + byte('a');
  TTAG_hmtx = byte('h') shl 24 + byte('m') shl 16 + byte('t') shl 8 + byte('x');
  TTAG_JSTF = byte('J') shl 24 + byte('S') shl 16 + byte('T') shl 8 + byte('F');
  TTAG_just = byte('j') shl 24 + byte('u') shl 16 + byte('s') shl 8 + byte('t');
  TTAG_kern = byte('k') shl 24 + byte('e') shl 16 + byte('r') shl 8 + byte('n');
  TTAG_lcar = byte('l') shl 24 + byte('c') shl 16 + byte('a') shl 8 + byte('r');
  TTAG_loca = byte('l') shl 24 + byte('o') shl 16 + byte('c') shl 8 + byte('a');
  TTAG_LTSH = byte('L') shl 24 + byte('T') shl 16 + byte('S') shl 8 + byte('H');
  TTAG_LWFN = byte('L') shl 24 + byte('W') shl 16 + byte('F') shl 8 + byte('N');
  TTAG_MATH = byte('M') shl 24 + byte('A') shl 16 + byte('T') shl 8 + byte('H');
  TTAG_maxp = byte('m') shl 24 + byte('a') shl 16 + byte('x') shl 8 + byte('p');
  TTAG_META = byte('M') shl 24 + byte('E') shl 16 + byte('T') shl 8 + byte('A');
  TTAG_MMFX = byte('M') shl 24 + byte('M') shl 16 + byte('F') shl 8 + byte('X');
  TTAG_MMSD = byte('M') shl 24 + byte('M') shl 16 + byte('S') shl 8 + byte('D');
  TTAG_mort = byte('m') shl 24 + byte('o') shl 16 + byte('r') shl 8 + byte('t');
  TTAG_morx = byte('m') shl 24 + byte('o') shl 16 + byte('r') shl 8 + byte('x');
  TTAG_MVAR = byte('M') shl 24 + byte('V') shl 16 + byte('A') shl 8 + byte('R');
  TTAG_name = byte('n') shl 24 + byte('a') shl 16 + byte('m') shl 8 + byte('e');
  TTAG_opbd = byte('o') shl 24 + byte('p') shl 16 + byte('b') shl 8 + byte('d');
  TTAG_OS2 = byte('O') shl 24 + byte('S') shl 16 + byte('/') shl 8 + byte('2');
  TTAG_OTTO = byte('O') shl 24 + byte('T') shl 16 + byte('T') shl 8 + byte('O');
  TTAG_PCLT = byte('P') shl 24 + byte('C') shl 16 + byte('L') shl 8 + byte('T');
  TTAG_POST = byte('P') shl 24 + byte('O') shl 16 + byte('S') shl 8 + byte('T');
  TTAG_post_ = byte('p') shl 24 + byte('o') shl 16 + byte('s') shl 8 + byte('t');
  TTAG_prep = byte('p') shl 24 + byte('r') shl 16 + byte('e') shl 8 + byte('p');
  TTAG_prop = byte('p') shl 24 + byte('r') shl 16 + byte('o') shl 8 + byte('p');
  TTAG_sbix = byte('s') shl 24 + byte('b') shl 16 + byte('i') shl 8 + byte('x');
  TTAG_sfnt = byte('s') shl 24 + byte('f') shl 16 + byte('n') shl 8 + byte('t');
  TTAG_SING = byte('S') shl 24 + byte('I') shl 16 + byte('N') shl 8 + byte('G');
  TTAG_SVG = byte('S') shl 24 + byte('V') shl 16 + byte('G') shl 8 + byte(' ');
  TTAG_trak = byte('t') shl 24 + byte('r') shl 16 + byte('a') shl 8 + byte('k');
  TTAG_true = byte('t') shl 24 + byte('r') shl 16 + byte('u') shl 8 + byte('e');
  TTAG_ttc = byte('t') shl 24 + byte('t') shl 16 + byte('c') shl 8 + byte(' ');
  TTAG_ttcf = byte('t') shl 24 + byte('t') shl 16 + byte('c') shl 8 + byte('f');
  TTAG_TYP1 = byte('T') shl 24 + byte('Y') shl 16 + byte('P') shl 8 + byte('1');
  TTAG_typ1_ = byte('t') shl 24 + byte('y') shl 16 + byte('p') shl 8 + byte('1');
  TTAG_VDMX = byte('V') shl 24 + byte('D') shl 16 + byte('M') shl 8 + byte('X');
  TTAG_vhea = byte('v') shl 24 + byte('h') shl 16 + byte('e') shl 8 + byte('a');
  TTAG_vmtx = byte('v') shl 24 + byte('m') shl 16 + byte('t') shl 8 + byte('x');
  TTAG_VVAR = byte('V') shl 24 + byte('V') shl 16 + byte('A') shl 8 + byte('R');
  TTAG_wOFF = byte('w') shl 24 + byte('O') shl 16 + byte('F') shl 8 + byte('F');
  TTAG_wOF2 = byte('w') shl 24 + byte('O') shl 16 + byte('F') shl 8 + byte('2');


  TTAG_0xA5kbd = $A5 shl 24 + byte('k') shl 16 + byte('b') shl 8 + byte('d');
  TTAG_0xA5lst = $A5 shl 24 + byte('l') shl 16 + byte('s') shl 8 + byte('t');

  // ====  ftparams

  FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY = byte('i') shl 24 + byte('g') shl 16 + byte('p') shl 8 + byte('f');
  FT_PARAM_TAG_IGNORE_PREFERRED_FAMILY = FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY;
  FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY = byte('i') shl 24 + byte('g') shl 16 + byte('p') shl 8 + byte('s');
  FT_PARAM_TAG_IGNORE_PREFERRED_SUBFAMILY = FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY;
  FT_PARAM_TAG_INCREMENTAL = byte('i') shl 24 + byte('n') shl 16 + byte('c') shl 8 + byte('r');
  FT_PARAM_TAG_IGNORE_SBIX = byte('i') shl 24 + byte('s') shl 16 + byte('b') shl 8 + byte('x');
  FT_PARAM_TAG_LCD_FILTER_WEIGHTS = byte('l') shl 24 + byte('c') shl 16 + byte('d') shl 8 + byte('f');
  FT_PARAM_TAG_RANDOM_SEED = byte('s') shl 24 + byte('e') shl 16 + byte('e') shl 8 + byte('d');
  FT_PARAM_TAG_STEM_DARKENING = byte('d') shl 24 + byte('a') shl 16 + byte('r') shl 8 + byte('k');
  FT_PARAM_TAG_UNPATENTED_HINTING = byte('u') shl 24 + byte('n') shl 16 + byte('p') shl 8 + byte('a');


  // =================== Typen ============================

type
  // ======= integer-types.h

  PFT_Int16 = ^TFT_Int16;
  TFT_Int16 = int16;

  PFT_UInt16 = ^TFT_UInt16;
  TFT_UInt16 = uint16;

  PFT_Int32 = ^TFT_Int32;
  TFT_Int32 = int32;

  PFT_UInt32 = ^TFT_UInt32;
  TFT_UInt32 = uint32;

  PFT_Int64 = ^TFT_Int64;
  TFT_Int64 = int64;

  PFT_UInt64 = ^TFT_UInt64;
  TFT_UInt64 = uint64;

  PFT_Fast = ^TFT_Fast;
  TFT_Fast = longint;

  PFT_UFast = ^TFT_UFast;
  TFT_UFast = dword;


  // ======== fttypes.h

  PFT_Bool = ^TFT_Bool;
  TFT_Bool = Boolean8;

  PFT_FWord = ^TFT_FWord;
  TFT_FWord = csshort;

  PFT_UFWord = ^TFT_UFWord;
  TFT_UFWord = cushort;

  PFT_Char = ^TFT_Char;
  TFT_Char = cschar;

  PPFT_Byte = ^PFT_Byte;
  PFT_Byte = ^TFT_Byte;
  TFT_Byte = cuchar;

  PFT_Bytes = ^TFT_Bytes;
  TFT_Bytes = PFT_Byte;

  PFT_Tag = ^TFT_Tag;
  TFT_Tag = TFT_UInt32;

  PFT_String = ^TFT_String;
  TFT_String = char;

  PFT_Short = ^TFT_Short;
  TFT_Short = csshort;

  PFT_UShort = ^TFT_UShort;
  TFT_UShort = cushort;

  PFT_Int = ^TFT_Int;
  TFT_Int = csint;

  PFT_UInt = ^TFT_UInt;
  TFT_UInt = cuint;

  PFT_Long = ^TFT_Long;
  TFT_Long = cslong;

  PFT_ULong = ^TFT_ULong;
  TFT_ULong = culong;

  PFT_F2Dot14 = ^TFT_F2Dot14;
  TFT_F2Dot14 = csshort;

  PFT_F26Dot6 = ^TFT_F26Dot6;
  TFT_F26Dot6 = cslong;

  PFT_Fixed = ^TFT_Fixed;
  TFT_Fixed = cslong;

  PFT_Error = ^TFT_Error;
  TFT_Error = cint;

  PFT_Pointer = ^TFT_Pointer;
  TFT_Pointer = Pointer;

  PFT_Offset = ^TFT_Offset;
  TFT_Offset = csize_t;

  PFT_PtrDist = ^TFT_PtrDist;
  TFT_PtrDist = SizeUInt;


  TFT_UnitVector = record
    x: TFT_F2Dot14;
    y: TFT_F2Dot14;
  end;
  PFT_UnitVector = ^TFT_UnitVector;

  TFT_Matrix = record
    xx: TFT_Fixed;
    xy: TFT_Fixed;
    yx: TFT_Fixed;
    yy: TFT_Fixed;
  end;
  PFT_Matrix = ^TFT_Matrix;

  TFT_Data = record
    pointer: PFT_Byte;
    length: TFT_UInt;
  end;
  PFT_Data = ^TFT_Data;

  TFT_Generic_Finalizer = procedure(object_: pointer); cdecl;

  TFT_Generic = record
    Data: pointer;
    finalizer: TFT_Generic_Finalizer;
  end;
  PFT_Generic = ^TFT_Generic;

  TFT_ListNodeRec = record
    prev: ^TFT_ListNodeRec;
    Next: ^TFT_ListNodeRec;
    Data: pointer;
  end;
  PFT_ListNodeRec = ^TFT_ListNodeRec;
  PFT_ListNode = ^TFT_ListNode;
  TFT_ListNode = PFT_ListNodeRec;

  TFT_ListRec = record
    head: TFT_ListNode;
    tail: TFT_ListNode;
  end;
  PFT_ListRec = ^TFT_ListRec;
  PFT_List = ^TFT_List;
  TFT_List = ^TFT_ListRec;


  // ===== ftmm.h

  TFT_MM_Axis = record
    Name: PFT_String;
    minimum: TFT_Long;
    maximum: TFT_Long;
  end;
  PFT_MM_Axis = ^TFT_MM_Axis;

  TFT_Multi_Master = record
    num_axis: TFT_UInt;
    num_designs: TFT_UInt;
    axis: array[0..(T1_MAX_MM_AXIS) - 1] of TFT_MM_Axis;
  end;
  PFT_Multi_Master = ^TFT_Multi_Master;

  TFT_Var_Axis = record
    Name: PFT_String;
    minimum: TFT_Fixed;
    def: TFT_Fixed;
    maximum: TFT_Fixed;
    tag: TFT_ULong;
    strid: TFT_UInt;
  end;
  PFT_Var_Axis = ^TFT_Var_Axis;

  TFT_Var_Named_Style = record
    coords: PFT_Fixed;
    strid: TFT_UInt;
    psid: TFT_UInt;
  end;
  PFT_Var_Named_Style = ^TFT_Var_Named_Style;

  TFT_MM_Var = record
    num_axis: TFT_UInt;
    num_designs: TFT_UInt;
    num_namedstyles: TFT_UInt;
    axis: PFT_Var_Axis;
    namedstyle: PFT_Var_Named_Style;
  end;
  PFT_MM_Var = ^TFT_MM_Var;
  PPFT_MM_Var = ^PFT_MM_Var;

  // ==== ftsystem.h

  TFT_Memory = ^TFT_MemoryRec;
  PFT_Memory = ^TFT_Memory;

  TFT_Alloc_Func = function(memory: TFT_Memory; size: longint): pointer; cdecl;
  TFT_Free_Func = procedure(memory: TFT_Memory; block: pointer); cdecl;
  TFT_Realloc_Func = function(memory: TFT_Memory; cur_size: clong; new_size: clong; block: pointer): pointer; cdecl;

  TFT_MemoryRec = record
    user: pointer;//cdecl;
    alloc: TFT_Alloc_Func;
    Free: TFT_Free_Func;
    realloc: TFT_Realloc_Func;
  end;
  PFT_MemoryRec = ^TFT_MemoryRec;

  TFT_StreamDesc = record
    case longint of
      0: (Value: clong);
      1: (pointer_: pointer);
  end;
  PFT_StreamDesc = ^TFT_StreamDesc;
  PFT_Stream = ^TFT_Stream;
  TFT_Stream = ^TFT_StreamRec;
  TFT_Stream_CloseFunc = procedure(stream: TFT_Stream); cdecl;
  TFT_Stream_IoFunc = function(stream: TFT_Stream; offset: culong; buffer: pbyte; Count: culong): culong; cdecl;

  TFT_StreamRec = record
    base: pbyte;
    size: culong;
    pos: culong;
    descriptor: TFT_StreamDesc;
    pathname: TFT_StreamDesc;
    Read: TFT_Stream_IoFunc;
    Close: TFT_Stream_CloseFunc;
    memory: TFT_Memory;
    cursor: pbyte;
    limit: pbyte;
  end;
  PFT_StreamRec = ^TFT_StreamRec;

  // ==== ftimage.h

  TFT_Pos = cslong;
  PFT_Pos = ^TFT_Pos;

  TFT_Vector = record
    x: TFT_Pos;
    y: TFT_Pos;
  end;
  PFT_Vector = ^TFT_Vector;

  TFT_BBox = record
    xMin: TFT_Pos;
    yMin: TFT_Pos;
    xMax: TFT_Pos;
    yMax: TFT_Pos;
  end;
  PFT_BBox = ^TFT_BBox;

  TFT_Bitmap = record
    rows: dword;
    Width: dword;
    pitch: longint;
    buffer: pbyte;
    num_grays: word;
    pixel_mode: byte;
    palette_mode: byte;
    palette: pointer;
  end;
  PFT_Bitmap = ^TFT_Bitmap;

  TFT_Outline = record
    n_contours: smallint;
    n_points: smallint;
    points: PFT_Vector;
    tags: PChar;
    contours: Psmallint;
    flags: longint;
  end;
  PFT_Outline = ^TFT_Outline;

  TFT_Outline_MoveToFunc = function(to_: PFT_Vector; user: pointer): longint; cdecl;
  FT_Outline_MoveTo_Func = TFT_Outline_MoveToFunc;
  TFT_Outline_LineToFunc = function(to_: PFT_Vector; user: pointer): longint; cdecl;
  FT_Outline_LineTo_Func = TFT_Outline_LineToFunc;
  TFT_Outline_ConicToFunc = function(control: PFT_Vector; to_: PFT_Vector; user: pointer): longint; cdecl;
  FT_Outline_ConicTo_Func = TFT_Outline_ConicToFunc;
  TFT_Outline_CubicToFunc = function(control1: PFT_Vector; control2: PFT_Vector; to_: PFT_Vector; user: pointer): longint; cdecl;
  FT_Outline_CubicTo_Func = TFT_Outline_CubicToFunc;

  TFT_Outline_Funcs = record
    move_to: TFT_Outline_MoveToFunc;
    line_to: TFT_Outline_LineToFunc;
    conic_to: TFT_Outline_ConicToFunc;
    cubic_to: TFT_Outline_CubicToFunc;
    shift: longint;
    delta: TFT_Pos;
  end;
  PFT_Outline_Funcs = ^TFT_Outline_Funcs;

  TFT_Span = record
    x: smallint;
    len: word;
    coverage: byte;
  end;
  PFT_Span = ^TFT_Span;

  TFT_SpanFunc = procedure(y: longint; Count: longint; spans: PFT_Span; user: pointer); cdecl;
  FT_Raster_Span_Func = TFT_SpanFunc;
  TFT_Raster_BitTest_Func = function(y: longint; x: longint; user: pointer): longint; cdecl;
  TFT_Raster_BitSet_Func = procedure(y: longint; x: longint; user: pointer); cdecl;

  TFT_Raster_Params = record
    target: PFT_Bitmap;
    Source: pointer;
    flags: longint;
    gray_spans: TFT_SpanFunc;
    black_spans: TFT_SpanFunc;
    bit_test: TFT_Raster_BitTest_Func;
    bit_set: TFT_Raster_BitSet_Func;
    user: pointer;
    clip_box: TFT_BBox;
  end;
  PFT_Raster_Params = ^TFT_Raster_Params;

  PFT_Raster = ^TFT_Raster;
  TFT_Raster = Pointer; // PFT_RasterRec_;

  TFT_Raster_NewFunc = function(memory: pointer; raster: PFT_Raster): longint; cdecl;
  FT_Raster_New_Func = TFT_Raster_NewFunc;

  TFT_Raster_DoneFunc = procedure(raster: TFT_Raster); cdecl;
  FT_Raster_Done_Func = TFT_Raster_DoneFunc;

  TFT_Raster_ResetFunc = procedure(raster: TFT_Raster; pool_base: pbyte; pool_size: culong); cdecl;
  FT_Raster_Reset_Func = TFT_Raster_ResetFunc;

  TFT_Raster_SetModeFunc = function(raster: TFT_Raster; mode: culong; args: pointer): longint; cdecl;
  FT_Raster_Set_Mode_Func = TFT_Raster_SetModeFunc;

  TFT_Raster_RenderFunc = function(raster: TFT_Raster; params: PFT_Raster_Params): longint; cdecl;
  FT_Raster_Render_Func = TFT_Raster_RenderFunc;

  TFT_Raster_Funcs = record
    glyph_format: TFT_Glyph_Format;
    raster_new: TFT_Raster_NewFunc;
    raster_reset: TFT_Raster_ResetFunc;
    raster_set_mode: TFT_Raster_SetModeFunc;
    raster_render: TFT_Raster_RenderFunc;
    raster_done: TFT_Raster_DoneFunc;
  end;
  PFT_Raster_Funcs = ^TFT_Raster_Funcs;

  // ==== freetype.h

  TFT_Glyph_Metrics = record
    Width: TFT_Pos;
    Height: TFT_Pos;
    horiBearingX: TFT_Pos;
    horiBearingY: TFT_Pos;
    horiAdvance: TFT_Pos;
    vertBearingX: TFT_Pos;
    vertBearingY: TFT_Pos;
    vertAdvance: TFT_Pos;
  end;
  PFT_Glyph_Metrics = ^TFT_Glyph_Metrics;

  TFT_Bitmap_Size = record
    Height: TFT_Short;
    Width: TFT_Short;
    size: TFT_Pos;
    x_ppem: TFT_Pos;
    y_ppem: TFT_Pos;
  end;
  PFT_Bitmap_Size = ^TFT_Bitmap_Size;

  PFT_Library = ^TFT_Library;
  TFT_Library = Pointer;  // PFT_LibraryRec_

  PFT_Module = ^TFT_Module;
  TFT_Module = Pointer; // PFT_ModuleRec_;

  PFT_Driver = ^TFT_Driver;
  TFT_Driver = Pointer; // PFT_DriverRec_;

  PFT_Renderer = ^TFT_Renderer;
  TFT_Renderer = Pointer; // PFT_RendererRec_;

  PFT_SubGlyph = ^TFT_SubGlyph;
  TFT_SubGlyph = Pointer; // PFT_SubGlyphRec_

  PFT_Slot_Internal = ^TFT_Slot_Internal;
  TFT_Slot_Internal = Pointer; // PFT_Slot_InternalRec_

  TFT_GlyphSlotRec = record
    library_: TFT_Library;
    face: ^TFT_Face;
    Next: ^TFT_GlyphSlotRec;
    glyph_index: TFT_UInt;
    generic_: TFT_Generic;
    metrics: TFT_Glyph_Metrics;
    linearHoriAdvance: TFT_Fixed;
    linearVertAdvance: TFT_Fixed;
    advance: TFT_Vector;
    format: TFT_Glyph_Format;
    bitmap: TFT_Bitmap;
    bitmap_left: TFT_Int;
    bitmap_top: TFT_Int;
    outline: TFT_Outline;
    num_subglyphs: TFT_UInt;
    subglyphs: TFT_SubGlyph;
    control_data: pointer;
    control_len: longint;
    lsb_delta: TFT_Pos;
    rsb_delta: TFT_Pos;
    other: pointer;
    internal: TFT_Slot_Internal;
  end;
  PFT_GlyphSlotRec = ^TFT_GlyphSlotRec;
  PFT_GlyphSlot = ^TFT_GlyphSlot;
  TFT_GlyphSlot = PFT_GlyphSlotRec;

  TFT_Size_Metrics = record
    x_ppem: TFT_UShort;
    y_ppem: TFT_UShort;
    x_scale: TFT_Fixed;
    y_scale: TFT_Fixed;
    ascender: TFT_Pos;
    descender: TFT_Pos;
    Height: TFT_Pos;
    max_advance: TFT_Pos;
  end;
  PFT_Size_Metrics = ^TFT_Size_Metrics;

  PFT_Size_Internal = ^TFT_Size_Internal;
  TFT_Size_Internal = Pointer; // PFT_Size_InternalRec_;

  TFT_SizeRec = record
    face: ^TFT_FaceRec;
    generic_: TFT_Generic;
    metrics: TFT_Size_Metrics;
    internal: TFT_Size_Internal;
  end;
  PFT_SizeRec = ^TFT_SizeRec;
  TFT_Size = PFT_SizeRec;
  PFT_Size = ^TFT_Size;

  TFT_CharMapRec = record
    face: ^TFT_FaceRec;
    encoding: TFT_Encoding;
    platform_id: TFT_UShort;
    encoding_id: TFT_UShort;
  end;
  PFT_CharMapRec = ^TFT_CharMapRec;
  PFT_CharMap = ^TFT_CharMap;
  TFT_CharMap = ^TFT_CharMapRec;

  PFT_Face_Internal = ^TFT_Face_Internal;
  TFT_Face_Internal = Pointer; // PFT_Face_InternalRec_;

  TFT_FaceRec = record
    num_faces: TFT_Long;
    face_index: TFT_Long;
    face_flags: TFT_Long;
    style_flags: TFT_Long;
    num_glyphs: TFT_Long;
    family_name: PFT_String;
    style_name: PFT_String;
    num_fixed_sizes: TFT_Int;
    available_sizes: ^TFT_Bitmap_Size;
    num_charmaps: TFT_Int;
    charmaps: ^TFT_CharMap;
    generic_: TFT_Generic;
    bbox: TFT_BBox;
    units_per_EM: TFT_UShort;
    ascender: TFT_Short;
    descender: TFT_Short;
    Height: TFT_Short;
    max_advance_width: TFT_Short;
    max_advance_height: TFT_Short;
    underline_position: TFT_Short;
    underline_thickness: TFT_Short;
    glyph: TFT_GlyphSlot;
    size: TFT_Size;
    charmap: TFT_CharMap;
    driver: TFT_Driver;
    memory: TFT_Memory;
    stream: TFT_Stream;
    sizes_list: TFT_ListRec;
    autohint: TFT_Generic;
    extensions: pointer;
    internal: TFT_Face_Internal;
  end;
  PFT_FaceRec = ^TFT_FaceRec;
  PFT_Face = ^TFT_Face;
  TFT_Face = ^TFT_FaceRec;

  TFT_Parameter = record
    tag: TFT_ULong;
    Data: TFT_Pointer;
  end;
  PFT_Parameter = ^TFT_Parameter;

  TFT_Open_Args = record
    flags: TFT_UInt;
    memory_base: PFT_Byte;
    memory_size: TFT_Long;
    pathname: PFT_String;
    stream: TFT_Stream;
    driver: TFT_Module;
    num_params: TFT_Int;
    params: PFT_Parameter;
  end;
  PFT_Open_Args = ^TFT_Open_Args;

  TFT_Size_RequestRec = record
    _type: TFT_Size_Request_Type;
    Width: TFT_Long;
    Height: TFT_Long;
    horiResolution: TFT_UInt;
    vertResolution: TFT_UInt;
  end;
  PFT_Size_RequestRec = ^TFT_Size_RequestRec;
  PFT_Size_Request = ^TFT_Size_Request;
  TFT_Size_Request = ^TFT_Size_RequestRec;

  PFT_Angle = ^TFT_Angle;
  TFT_Angle = TFT_Fixed;


  // ==== ftcache.h

  PFTC_FaceID = ^TFTC_FaceID;
  TFTC_FaceID = TFT_Pointer;

  TFTC_Face_Requester = function(face_id: TFTC_FaceID; library_: TFT_Library; req_data: TFT_Pointer; aface: PFT_Face): TFT_Error; cdecl;

  PFTC_Manager = ^TFTC_Manager;
  TFTC_Manager = Pointer; // PFTC_ManagerRec_;

  PFTC_Node = ^TFTC_Node;
  TFTC_Node = Pointer; // PFTC_NodeRec_;

  TFTC_ScalerRec = record
    face_id: TFTC_FaceID;
    Width: TFT_UInt;
    Height: TFT_UInt;
    pixel: TFT_Int;
    x_res: TFT_UInt;
    y_res: TFT_UInt;
  end;
  PFTC_ScalerRec = ^TFTC_ScalerRec;
  PFTC_Scaler = ^TFTC_Scaler;
  TFTC_Scaler = PFTC_ScalerRec;

  PFTC_CMapCache = ^TFTC_CMapCache;
  TFTC_CMapCache = Pointer; // PFTC_CMapCacheRec_;

  TFTC_ImageTypeRec = record
    face_id: TFTC_FaceID;
    Width: TFT_UInt;
    Height: TFT_UInt;
    flags: TFT_Int32;
  end;
  PFTC_ImageTypeRec = ^TFTC_ImageTypeRec;
  PFTC_ImageType = ^TFTC_ImageType;
  TFTC_ImageType = PFTC_ImageTypeRec;

  PFTC_ImageCache = ^TFTC_ImageCache;
  TFTC_ImageCache = Pointer; // PFTC_ImageCacheRec_;

  TFTC_SBitRec = record
    Width: TFT_Byte;
    Height: TFT_Byte;
    left: TFT_Char;
    top: TFT_Char;
    format: TFT_Byte;
    max_grays: TFT_Byte;
    pitch: TFT_Short;
    xadvance: TFT_Char;
    yadvance: TFT_Char;
    buffer: PFT_Byte;
  end;
  PFTC_SBitRec = ^TFTC_SBitRec;
  PFTC_SBit = ^TFTC_SBit;
  TFTC_SBit = ^TFTC_SBitRec;

  PFTC_SBitCache = ^TFTC_SBitCache;
  TFTC_SBitCache = Pointer; // PFTC_SBitCacheRec_;


  // ====  ftglyph.h

  TFT_GlyphRec = record
    library_: TFT_Library;
    clazz: ^TFT_Glyph_Class;
    format: TFT_Glyph_Format;
    advance: TFT_Vector;
  end;
  PFT_GlyphRec = ^TFT_GlyphRec;
  PFT_Glyph = ^TFT_Glyph;
  TFT_Glyph = PFT_GlyphRec;

  TFT_BitmapGlyphRec = record
    root: TFT_GlyphRec;
    left: TFT_Int;
    top: TFT_Int;
    bitmap: TFT_Bitmap;
  end;
  PFT_BitmapGlyphRec = ^TFT_BitmapGlyphRec;
  PFT_BitmapGlyph = ^TFT_BitmapGlyph;
  TFT_BitmapGlyph = PFT_BitmapGlyphRec;

  TFT_OutlineGlyphRec = record
    root: TFT_GlyphRec;
    outline: TFT_Outline;
  end;
  PFT_OutlineGlyphRec = ^TFT_OutlineGlyphRec;
  PFT_OutlineGlyph = ^TFT_OutlineGlyph;
  TFT_OutlineGlyph = PFT_OutlineGlyphRec;

  TFT_SvgGlyphRec = record
    root: TFT_GlyphRec;
    svg_document: PFT_Byte;
    svg_document_length: TFT_ULong;
    glyph_index: TFT_UInt;
    metrics: TFT_Size_Metrics;
    units_per_EM: TFT_UShort;
    start_glyph_id: TFT_UShort;
    end_glyph_id: TFT_UShort;
    transform: TFT_Matrix;
    delta: TFT_Vector;
  end;
  PFT_SvgGlyphRec = ^TFT_SvgGlyphRec;
  PFT_SvgGlyph = ^TFT_SvgGlyph;
  TFT_SvgGlyph = PFT_SvgGlyphRec;


  // ====  ftmodapi.h

  PFT_Module_Interface = ^TFT_Module_Interface;
  TFT_Module_Interface = TFT_Pointer;

  TFT_Module_Constructor = function(module: TFT_Module): TFT_Error; cdecl;
  TFT_Module_Destructor = procedure(module: TFT_Module); cdecl;
  TFT_Module_Requester = function(module: TFT_Module; Name: PChar): TFT_Module_Interface; cdecl;

  TFT_Module_Class = record
    module_flags: TFT_ULong;
    module_size: TFT_Long;
    module_name: PFT_String;
    module_version: TFT_Fixed;
    module_requires: TFT_Fixed;
    module_interface: pointer;
    module_init: TFT_Module_Constructor;
    module_done: TFT_Module_Destructor;
    get_interface: TFT_Module_Requester;
  end;
  PFT_Module_Class = ^TFT_Module_Class;

  TFT_DebugHook_Func = function(arg: pointer): TFT_Error; cdecl;

  // ====  ftrender.h

  TFT_Glyph_InitFunc = function(glyph: TFT_Glyph; slot: TFT_GlyphSlot): TFT_Error; cdecl;
  TFT_Glyph_DoneFunc = procedure(glyph: TFT_Glyph); cdecl;
  TFT_Glyph_TransformFunc = procedure(glyph: TFT_Glyph; matrix: PFT_Matrix; delta: PFT_Vector); cdecl;
  TFT_Glyph_GetBBoxFunc = procedure(glyph: TFT_Glyph; abbox: PFT_BBox); cdecl;
  TFT_Glyph_CopyFunc = function(Source: TFT_Glyph; target: TFT_Glyph): TFT_Error; cdecl;
  TFT_Glyph_PrepareFunc = function(glyph: TFT_Glyph; slot: TFT_GlyphSlot): TFT_Error; cdecl;


  TFT_Glyph_Class = record
    glyph_size: TFT_Long;// cdecl;
    glyph_format: TFT_Glyph_Format;
    glyph_init: TFT_Glyph_InitFunc;
    glyph_done: TFT_Glyph_DoneFunc;
    glyph_copy: TFT_Glyph_CopyFunc;
    glyph_transform: TFT_Glyph_TransformFunc;
    glyph_bbox: TFT_Glyph_GetBBoxFunc;
    glyph_prepare: TFT_Glyph_PrepareFunc;
  end;
  PFT_Glyph_Class = ^TFT_Glyph_Class;

  TFT_Renderer_RenderFunc = function(renderer: TFT_Renderer; slot: TFT_GlyphSlot; mode: TFT_Render_Mode; origin: PFT_Vector): TFT_Error; cdecl;
  TFT_Renderer_TransformFunc = function(renderer: TFT_Renderer; slot: TFT_GlyphSlot; matrix: PFT_Matrix; delta: PFT_Vector): TFT_Error; cdecl;
  TFT_Renderer_GetCBoxFunc = procedure(renderer: TFT_Renderer; slot: TFT_GlyphSlot; cbox: PFT_BBox); cdecl;
  TFT_Renderer_SetModeFunc = function(renderer: TFT_Renderer; mode_tag: TFT_ULong; mode_ptr: TFT_Pointer): TFT_Error; cdecl;

  TFT_Renderer_Class = record
    root: TFT_Module_Class;
    glyph_format: TFT_Glyph_Format;
    render_glyph: TFT_Renderer_RenderFunc;
    transform_glyph: TFT_Renderer_TransformFunc;
    get_glyph_cbox: TFT_Renderer_GetCBoxFunc;
    set_mode: TFT_Renderer_SetModeFunc;
    raster_class: ^TFT_Raster_Funcs;
  end;
  PFT_Renderer_Class = ^TFT_Renderer_Class;


  // ====  ftsnames.h

  TFT_SfntName = record
    platform_id: TFT_UShort;
    encoding_id: TFT_UShort;
    language_id: TFT_UShort;
    name_id: TFT_UShort;
    _string: PFT_Byte;
    string_len: TFT_UInt;
  end;
  PFT_SfntName = ^TFT_SfntName;

  TFT_SfntLangTag = record
    _string: PFT_Byte;
    string_len: TFT_UInt;
  end;
  PFT_SfntLangTag = ^TFT_SfntLangTag;

  // ====  otsvg.h

  TSVG_Lib_Init_Func = function(data_pointer: PFT_Pointer): TFT_Error; cdecl;
  TSVG_Lib_Free_Func = procedure(data_pointer: PFT_Pointer); cdecl;
  TSVG_Lib_Render_Func = function(slot: TFT_GlyphSlot; data_pointer: PFT_Pointer): TFT_Error; cdecl;
  TSVG_Lib_Preset_Slot_Func = function(slot: TFT_GlyphSlot; cache: TFT_Bool; state: PFT_Pointer): TFT_Error; cdecl;

  TSVG_RendererHooks = record
    init_svg: TSVG_Lib_Init_Func;
    free_svg: TSVG_Lib_Free_Func;
    render_svg: TSVG_Lib_Render_Func;
    preset_slot: TSVG_Lib_Preset_Slot_Func;
  end;
  PSVG_RendererHooks = ^TSVG_RendererHooks;

  TFT_SVG_DocumentRec = record
    svg_document: PFT_Byte;
    svg_document_length: TFT_ULong;
    metrics: TFT_Size_Metrics;
    units_per_EM: TFT_UShort;
    start_glyph_id: TFT_UShort;
    end_glyph_id: TFT_UShort;
    transform: TFT_Matrix;
    delta: TFT_Vector;
  end;
  PFT_SVG_DocumentRec = ^TFT_SVG_DocumentRec;
  PFT_SVG_Document = ^TFT_SVG_Document;
  TFT_SVG_Document = PFT_SVG_DocumentRec;


  // ====  ftlcdfil.h

  PFT_LcdFiveTapFilter = ^TFT_LcdFiveTapFilter;
  TFT_LcdFiveTapFilter = array[0..(FT_LCD_FILTER_FIVE_TAPS) - 1] of TFT_Byte;


  // ====  ftbdf.h

  TBDF_PropertyRec = record
    _type: TBDF_PropertyType;
    u: record
      case longint of
        0: (atom: PChar);
        1: (integer: TFT_Int32);
        2: (cardinal: TFT_UInt32);
      end;
  end;
  PBDF_PropertyRec = ^TBDF_PropertyRec;
  PBDF_Property = ^TBDF_Property;
  TBDF_Property = PBDF_PropertyRec;

  // ====  ftcid.h

type
  TTT_Header = record
    Table_Version: TFT_Fixed;
    Font_Revision: TFT_Fixed;
    CheckSum_Adjust: TFT_Long;
    Magic_Number: TFT_Long;
    Flags: TFT_UShort;
    Units_Per_EM: TFT_UShort;
    Created: array[0..1] of TFT_ULong;
    Modified: array[0..1] of TFT_ULong;
    xMin: TFT_Short;
    yMin: TFT_Short;
    xMax: TFT_Short;
    yMax: TFT_Short;
    Mac_Style: TFT_UShort;
    Lowest_Rec_PPEM: TFT_UShort;
    Font_Direction: TFT_Short;
    Index_To_Loc_Format: TFT_Short;
    Glyph_Data_Format: TFT_Short;
  end;
  PTT_Header = ^TTT_Header;

  TTT_HoriHeader = record
    Version: TFT_Fixed;
    Ascender: TFT_Short;
    Descender: TFT_Short;
    Line_Gap: TFT_Short;
    advance_Width_Max: TFT_UShort;
    min_Left_Side_Bearing: TFT_Short;
    min_Right_Side_Bearing: TFT_Short;
    xMax_Extent: TFT_Short;
    caret_Slope_Rise: TFT_Short;
    caret_Slope_Run: TFT_Short;
    caret_Offset: TFT_Short;
    Reserved: array[0..3] of TFT_Short;
    metric_Data_Format: TFT_Short;
    number_Of_HMetrics: TFT_UShort;
    long_metrics: pointer;
    short_metrics: pointer;
  end;
  PTT_HoriHeader = ^TTT_HoriHeader;

  TTT_VertHeader = record
    Version: TFT_Fixed;
    Ascender: TFT_Short;
    Descender: TFT_Short;
    Line_Gap: TFT_Short;
    advance_Height_Max: TFT_UShort;
    min_Top_Side_Bearing: TFT_Short;
    min_Bottom_Side_Bearing: TFT_Short;
    yMax_Extent: TFT_Short;
    caret_Slope_Rise: TFT_Short;
    caret_Slope_Run: TFT_Short;
    caret_Offset: TFT_Short;
    Reserved: array[0..3] of TFT_Short;
    metric_Data_Format: TFT_Short;
    number_Of_VMetrics: TFT_UShort;
    long_metrics: pointer;
    short_metrics: pointer;
  end;
  PTT_VertHeader = ^TTT_VertHeader;

  TTT_OS2 = record
    version: TFT_UShort;
    xAvgCharWidth: TFT_Short;
    usWeightClass: TFT_UShort;
    usWidthClass: TFT_UShort;
    fsType: TFT_UShort;
    ySubscriptXSize: TFT_Short;
    ySubscriptYSize: TFT_Short;
    ySubscriptXOffset: TFT_Short;
    ySubscriptYOffset: TFT_Short;
    ySuperscriptXSize: TFT_Short;
    ySuperscriptYSize: TFT_Short;
    ySuperscriptXOffset: TFT_Short;
    ySuperscriptYOffset: TFT_Short;
    yStrikeoutSize: TFT_Short;
    yStrikeoutPosition: TFT_Short;
    sFamilyClass: TFT_Short;
    panose: array[0..9] of TFT_Byte;
    ulUnicodeRange1: TFT_ULong;
    ulUnicodeRange2: TFT_ULong;
    ulUnicodeRange3: TFT_ULong;
    ulUnicodeRange4: TFT_ULong;
    achVendID: array[0..3] of TFT_Char;
    fsSelection: TFT_UShort;
    usFirstCharIndex: TFT_UShort;
    usLastCharIndex: TFT_UShort;
    sTypoAscender: TFT_Short;
    sTypoDescender: TFT_Short;
    sTypoLineGap: TFT_Short;
    usWinAscent: TFT_UShort;
    usWinDescent: TFT_UShort;
    ulCodePageRange1: TFT_ULong;
    ulCodePageRange2: TFT_ULong;
    sxHeight: TFT_Short;
    sCapHeight: TFT_Short;
    usDefaultChar: TFT_UShort;
    usBreakChar: TFT_UShort;
    usMaxContext: TFT_UShort;
    usLowerOpticalPointSize: TFT_UShort;
    usUpperOpticalPointSize: TFT_UShort;
  end;
  PTT_OS2 = ^TTT_OS2;

  TTT_Postscript = record
    FormatType: TFT_Fixed;
    italicAngle: TFT_Fixed;
    underlinePosition: TFT_Short;
    underlineThickness: TFT_Short;
    isFixedPitch: TFT_ULong;
    minMemType42: TFT_ULong;
    maxMemType42: TFT_ULong;
    minMemType1: TFT_ULong;
    maxMemType1: TFT_ULong;
  end;
  PTT_Postscript = ^TTT_Postscript;

  TTT_PCLT = record
    Version: TFT_Fixed;
    FontNumber: TFT_ULong;
    Pitch: TFT_UShort;
    xHeight: TFT_UShort;
    Style: TFT_UShort;
    TypeFamily: TFT_UShort;
    CapHeight: TFT_UShort;
    SymbolSet: TFT_UShort;
    TypeFace: array[0..15] of TFT_Char;
    CharacterComplement: array[0..7] of TFT_Char;
    FileName: array[0..5] of TFT_Char;
    StrokeWeight: TFT_Char;
    WidthType: TFT_Char;
    SerifStyle: TFT_Byte;
    Reserved: TFT_Byte;
  end;
  PTT_PCLT = ^TTT_PCLT;

  TTT_MaxProfile = record
    version: TFT_Fixed;
    numGlyphs: TFT_UShort;
    maxPoints: TFT_UShort;
    maxContours: TFT_UShort;
    maxCompositePoints: TFT_UShort;
    maxCompositeContours: TFT_UShort;
    maxZones: TFT_UShort;
    maxTwilightPoints: TFT_UShort;
    maxStorage: TFT_UShort;
    maxFunctionDefs: TFT_UShort;
    maxInstructionDefs: TFT_UShort;
    maxStackElements: TFT_UShort;
    maxSizeOfInstructions: TFT_UShort;
    maxComponentElements: TFT_UShort;
    maxComponentDepth: TFT_UShort;
  end;
  PTT_MaxProfile = ^TTT_MaxProfile;

  // ====  ftcolor.h

  TFT_Color = record
    blue: TFT_Byte;
    green: TFT_Byte;
    red: TFT_Byte;
    alpha: TFT_Byte;
  end;
  PFT_Color = ^TFT_Color;
  PPFT_Color = ^PFT_Color;

  TFT_Palette_Data = record
    num_palettes: TFT_UShort;
    palette_name_ids: PFT_UShort;
    palette_flags: PFT_UShort;
    num_palette_entries: TFT_UShort;
    palette_entry_name_ids: PFT_UShort;
  end;
  PFT_Palette_Data = ^TFT_Palette_Data;

  TFT_LayerIterator = record
    num_layers: TFT_UInt;
    layer: TFT_UInt;
    p: PFT_Byte;
  end;
  PFT_LayerIterator = ^TFT_LayerIterator;

  TFT_ColorStopIterator = record
    num_color_stops: TFT_UInt;
    current_color_stop: TFT_UInt;
    p: PFT_Byte;
    read_variable: TFT_Bool;
  end;
  PFT_ColorStopIterator = ^TFT_ColorStopIterator;

  TFT_ColorIndex = record
    palette_index: TFT_UInt16;
    alpha: TFT_F2Dot14;
  end;
  PFT_ColorIndex = ^TFT_ColorIndex;

  TFT_ColorStop = record
    stop_offset: TFT_Fixed;
    color: TFT_ColorIndex;
  end;
  PFT_ColorStop = ^TFT_ColorStop;

  TFT_ColorLine = record
    extend: TFT_PaintExtend;
    color_stop_iterator: TFT_ColorStopIterator;
  end;
  PFT_ColorLine = ^TFT_ColorLine;

  TFT_Affine23 = record
    xx: TFT_Fixed;
    xy: TFT_Fixed;
    dx: TFT_Fixed;
    yx: TFT_Fixed;
    yy: TFT_Fixed;
    dy: TFT_Fixed;
  end;
  PFT_Affine23 = ^TFT_Affine23;

  TFT_OpaquePaint = record
    p: PFT_Byte;
    insert_root_transform: TFT_Bool;
  end;
  PFT_OpaquePaint = ^TFT_OpaquePaint;

  TFT_PaintColrLayers = record
    layer_iterator: TFT_LayerIterator;
  end;
  PFT_PaintColrLayers = ^TFT_PaintColrLayers;

  TFT_PaintSolid = record
    color: TFT_ColorIndex;
  end;
  PFT_PaintSolid = ^TFT_PaintSolid;

  TFT_PaintLinearGradient = record
    colorline: TFT_ColorLine;
    p0: TFT_Vector;
    p1: TFT_Vector;
    p2: TFT_Vector;
  end;
  PFT_PaintLinearGradient = ^TFT_PaintLinearGradient;

  TFT_PaintRadialGradient = record
    colorline: TFT_ColorLine;
    c0: TFT_Vector;
    r0: TFT_Pos;
    c1: TFT_Vector;
    r1: TFT_Pos;
  end;
  PFT_PaintRadialGradient = ^TFT_PaintRadialGradient;

  TFT_PaintSweepGradient = record
    colorline: TFT_ColorLine;
    center: TFT_Vector;
    start_angle: TFT_Fixed;
    end_angle: TFT_Fixed;
  end;
  PFT_PaintSweepGradient = ^TFT_PaintSweepGradient;

  TFT_PaintGlyph = record
    paint: TFT_OpaquePaint;
    glyphID: TFT_UInt;
  end;
  PFT_PaintGlyph = ^TFT_PaintGlyph;

  TFT_PaintColrGlyph = record
    glyphID: TFT_UInt;
  end;
  PFT_PaintColrGlyph = ^TFT_PaintColrGlyph;

  TFT_PaintTransform = record
    paint: TFT_OpaquePaint;
    affine: TFT_Affine23;
  end;
  PFT_PaintTransform = ^TFT_PaintTransform;

  TFT_PaintTranslate = record
    paint: TFT_OpaquePaint;
    dx: TFT_Fixed;
    dy: TFT_Fixed;
  end;
  PFT_PaintTranslate = ^TFT_PaintTranslate;

  TFT_PaintScale = record
    paint: TFT_OpaquePaint;
    scale_x: TFT_Fixed;
    scale_y: TFT_Fixed;
    center_x: TFT_Fixed;
    center_y: TFT_Fixed;
  end;
  PFT_PaintScale = ^TFT_PaintScale;

  TFT_PaintRotate = record
    paint: TFT_OpaquePaint;
    angle: TFT_Fixed;
    center_x: TFT_Fixed;
    center_y: TFT_Fixed;
  end;
  PFT_PaintRotate = ^TFT_PaintRotate;

  TFT_PaintSkew = record
    paint: TFT_OpaquePaint;
    x_skew_angle: TFT_Fixed;
    y_skew_angle: TFT_Fixed;
    center_x: TFT_Fixed;
    center_y: TFT_Fixed;
  end;
  PFT_PaintSkew = ^TFT_PaintSkew;

  TFT_PaintComposite = record
    source_paint: TFT_OpaquePaint;
    composite_mode: TFT_Composite_Mode;
    backdrop_paint: TFT_OpaquePaint;
  end;
  PFT_PaintComposite = ^TFT_PaintComposite;

  TFT_COLR_Paint = record
    format: TFT_PaintFormat;
    u: record
      case longint of
        0: (colr_layers: TFT_PaintColrLayers);
        1: (glyph: TFT_PaintGlyph);
        2: (solid: TFT_PaintSolid);
        3: (linear_gradient: TFT_PaintLinearGradient);
        4: (radial_gradient: TFT_PaintRadialGradient);
        5: (sweep_gradient: TFT_PaintSweepGradient);
        6: (transform: TFT_PaintTransform);
        7: (translate: TFT_PaintTranslate);
        8: (scale: TFT_PaintScale);
        9: (rotate: TFT_PaintRotate);
        10: (skew: TFT_PaintSkew);
        11: (composite: TFT_PaintComposite);
        12: (colr_glyph: TFT_PaintColrGlyph);
      end;
  end;
  PFT_COLR_Paint = ^TFT_COLR_Paint;

  TFT_ClipBox = record
    bottom_left: TFT_Vector;
    top_left: TFT_Vector;
    top_right: TFT_Vector;
    bottom_right: TFT_Vector;
  end;
  PFT_ClipBox = ^TFT_ClipBox;

  // ====  t1tables.h

type
  TPS_FontInfoRec = record
    version: PFT_String;
    notice: PFT_String;
    full_name: PFT_String;
    family_name: PFT_String;
    weight: PFT_String;
    italic_angle: TFT_Long;
    is_fixed_pitch: TFT_Bool;
    underline_position: TFT_Short;
    underline_thickness: TFT_UShort;
  end;
  PPS_FontInfoRec = ^TPS_FontInfoRec;
  PPS_FontInfo = ^TPS_FontInfo;
  TPS_FontInfo = PPS_FontInfoRec;

  PT1_FontInfo = ^TT1_FontInfo;
  TT1_FontInfo = TPS_FontInfoRec;

  TPS_PrivateRec = record
    unique_id: TFT_Int;
    lenIV: TFT_Int;
    num_blue_values: TFT_Byte;
    num_other_blues: TFT_Byte;
    num_family_blues: TFT_Byte;
    num_family_other_blues: TFT_Byte;
    blue_values: array[0..13] of TFT_Short;
    other_blues: array[0..9] of TFT_Short;
    family_blues: array[0..13] of TFT_Short;
    family_other_blues: array[0..9] of TFT_Short;
    blue_scale: TFT_Fixed;
    blue_shift: TFT_Int;
    blue_fuzz: TFT_Int;
    standard_width: array[0..0] of TFT_UShort;
    standard_height: array[0..0] of TFT_UShort;
    num_snap_widths: TFT_Byte;
    num_snap_heights: TFT_Byte;
    force_bold: TFT_Bool;
    round_stem_up: TFT_Bool;
    snap_widths: array[0..12] of TFT_Short;
    snap_heights: array[0..12] of TFT_Short;
    expansion_factor: TFT_Fixed;
    language_group: TFT_Long;
    password: TFT_Long;
    min_feature: array[0..1] of TFT_Short;
  end;
  PPS_PrivateRec = ^TPS_PrivateRec;
  PPS_Private = ^TPS_Private;
  TPS_Private = PPS_PrivateRec;

  TCID_FaceDictRec = record
    private_dict: TPS_PrivateRec;
    len_buildchar: TFT_UInt;
    forcebold_threshold: TFT_Fixed;
    stroke_width: TFT_Pos;
    expansion_factor: TFT_Fixed;
    paint_type: TFT_Byte;
    font_type: TFT_Byte;
    font_matrix: TFT_Matrix;
    font_offset: TFT_Vector;
    num_subrs: TFT_UInt;
    subrmap_offset: TFT_ULong;
    sd_bytes: TFT_UInt;
  end;
  PCID_FaceDictRec = ^TCID_FaceDictRec;
  PCID_FaceDict = ^TCID_FaceDict;
  TCID_FaceDict = ^TCID_FaceDictRec;

  PCID_FontDict = ^TCID_FontDict;
  TCID_FontDict = TCID_FaceDictRec;

  TCID_FaceInfoRec = record
    cid_font_name: PFT_String;
    cid_version: TFT_Fixed;
    cid_font_type: TFT_Int;
    registry: PFT_String;
    ordering: PFT_String;
    supplement: TFT_Int;
    font_info: TPS_FontInfoRec;
    font_bbox: TFT_BBox;
    uid_base: TFT_ULong;
    num_xuid: TFT_Int;
    xuid: array[0..15] of TFT_ULong;
    cidmap_offset: TFT_ULong;
    fd_bytes: TFT_UInt;
    gd_bytes: TFT_UInt;
    cid_count: TFT_ULong;
    num_dicts: TFT_UInt;
    font_dicts: TCID_FaceDict;
    data_offset: TFT_ULong;
  end;
  PCID_FaceInfoRec = ^TCID_FaceInfoRec;
  PCID_FaceInfo = ^TCID_FaceInfo;
  TCID_FaceInfo = ^TCID_FaceInfoRec;

  PCID_Info = ^TCID_Info;
  TCID_Info = TCID_FaceInfoRec;


  // ====  ftlist.h

  TFT_List_Iterator = function(node: TFT_ListNode; user: pointer): TFT_Error; cdecl;
  TFT_List_Destructor = procedure(memory: TFT_Memory; Data: pointer; user: pointer); cdecl;


  // ====  ftdriver.h

  TFT_Prop_GlyphToScriptMap = record
    face: TFT_Face;
    map: PFT_UShort;
  end;
  PFT_Prop_GlyphToScriptMap = ^TFT_Prop_GlyphToScriptMap;

  TFT_Prop_IncreaseXHeight = record
    face: TFT_Face;
    limit: TFT_UInt;
  end;
  PFT_Prop_IncreaseXHeight = ^TFT_Prop_IncreaseXHeight;


  // ====  ftwinfnt.h

  TFT_WinFNT_HeaderRec = record
    version: TFT_UShort;
    file_size: TFT_ULong;
    copyright: array[0..59] of TFT_Byte;
    file_type: TFT_UShort;
    nominal_point_size: TFT_UShort;
    vertical_resolution: TFT_UShort;
    horizontal_resolution: TFT_UShort;
    ascent: TFT_UShort;
    internal_leading: TFT_UShort;
    external_leading: TFT_UShort;
    italic: TFT_Byte;
    underline: TFT_Byte;
    strike_out: TFT_Byte;
    weight: TFT_UShort;
    charset: TFT_Byte;
    pixel_width: TFT_UShort;
    pixel_height: TFT_UShort;
    pitch_and_family: TFT_Byte;
    avg_width: TFT_UShort;
    max_width: TFT_UShort;
    first_char: TFT_Byte;
    last_char: TFT_Byte;
    default_char: TFT_Byte;
    break_char: TFT_Byte;
    bytes_per_row: TFT_UShort;
    device_offset: TFT_ULong;
    face_name_offset: TFT_ULong;
    bits_pointer: TFT_ULong;
    bits_offset: TFT_ULong;
    reserved: TFT_Byte;
    flags: TFT_ULong;
    A_space: TFT_UShort;
    B_space: TFT_UShort;
    C_space: TFT_UShort;
    color_table_offset: TFT_UShort;
    reserved1: array[0..3] of TFT_ULong;
  end;
  PFT_WinFNT_HeaderRec = ^TFT_WinFNT_HeaderRec;
  PFT_WinFNT_Header = ^TFT_WinFNT_Header;
  TFT_WinFNT_Header = PFT_WinFNT_HeaderRec;

  // ====  ftstroke.h

  PFT_Stroker = ^TFT_Stroker;
  TFT_Stroker = Pointer; // PFT_StrokerRec;

  // ====  ftincrem.h

  PFT_Incremental = ^TFT_Incremental;
  TFT_Incremental = Pointer; // PFT_IncrementalRec_;

  TFT_Incremental_MetricsRec = record
    bearing_x: TFT_Long;
    bearing_y: TFT_Long;
    advance: TFT_Long;
    advance_v: TFT_Long;
  end;
  PFT_Incremental_MetricsRec = ^TFT_Incremental_MetricsRec;
  PFT_Incremental_Metrics = ^TFT_Incremental_Metrics;
  TFT_Incremental_Metrics = PFT_Incremental_MetricsRec;

  TFT_Incremental_GetGlyphDataFunc = function(incremental: TFT_Incremental; glyph_index: TFT_UInt; adata: PFT_Data): TFT_Error; cdecl;
  TFT_Incremental_FreeGlyphDataFunc = procedure(incremental: TFT_Incremental; Data: PFT_Data); cdecl;
  TFT_Incremental_GetGlyphMetricsFunc = function(incremental: TFT_Incremental; glyph_index: TFT_UInt; vertical: TFT_Bool; ametrics: PFT_Incremental_MetricsRec): TFT_Error; cdecl;

  TFT_Incremental_FuncsRec = record
    get_glyph_data: TFT_Incremental_GetGlyphDataFunc;
    free_glyph_data: TFT_Incremental_FreeGlyphDataFunc;
    get_glyph_metrics: TFT_Incremental_GetGlyphMetricsFunc;
  end;
  PFT_Incremental_FuncsRec = ^TFT_Incremental_FuncsRec;

  TFT_Incremental_InterfaceRec = record
    funcs: PFT_Incremental_FuncsRec;
    object_: TFT_Incremental;
  end;
  PFT_Incremental_InterfaceRec = ^TFT_Incremental_InterfaceRec;
  PFT_Incremental_Interface = ^TFT_Incremental_Interface;
  TFT_Incremental_Interface = PFT_Incremental_InterfaceRec;


  // =============== Externe Functionen ==========================

  // ======== freetype.h

function FT_Init_FreeType(alibrary: PFT_Library): TFT_Error; cdecl; external freetype_lib;
function FT_Done_FreeType(library_: TFT_Library): TFT_Error; cdecl; external freetype_lib;
function FT_New_Face(library_: TFT_Library; filepathname: PChar; face_index: TFT_Long; aface: PFT_Face): TFT_Error; cdecl; external freetype_lib;
function FT_New_Memory_Face(library_: TFT_Library; file_base: PFT_Byte; file_size: TFT_Long; face_index: TFT_Long; aface: PFT_Face): TFT_Error; cdecl; external freetype_lib;
function FT_Open_Face(library_: TFT_Library; args: PFT_Open_Args; face_index: TFT_Long; aface: PFT_Face): TFT_Error; cdecl; external freetype_lib;
function FT_Attach_File(face: TFT_Face; filepathname: PChar): TFT_Error; cdecl; external freetype_lib;
function FT_Attach_Stream(face: TFT_Face; parameters: PFT_Open_Args): TFT_Error; cdecl; external freetype_lib;
function FT_Reference_Face(face: TFT_Face): TFT_Error; cdecl; external freetype_lib;
function FT_Done_Face(face: TFT_Face): TFT_Error; cdecl; external freetype_lib;
function FT_Select_Size(face: TFT_Face; strike_index: TFT_Int): TFT_Error; cdecl; external freetype_lib;
function FT_Request_Size(face: TFT_Face; req: TFT_Size_Request): TFT_Error; cdecl; external freetype_lib;
function FT_Set_Char_Size(face: TFT_Face; char_width: TFT_F26Dot6; char_height: TFT_F26Dot6; horz_resolution: TFT_UInt; vert_resolution: TFT_UInt): TFT_Error; cdecl; external freetype_lib;
function FT_Set_Pixel_Sizes(face: TFT_Face; pixel_width: TFT_UInt; pixel_height: TFT_UInt): TFT_Error; cdecl; external freetype_lib;
function FT_Load_Glyph(face: TFT_Face; glyph_index: TFT_UInt; load_flags: TFT_Int32): TFT_Error; cdecl; external freetype_lib;
function FT_Load_Char(face: TFT_Face; char_code: TFT_ULong; load_flags: TFT_Int32): TFT_Error; cdecl; external freetype_lib;
procedure FT_Set_Transform(face: TFT_Face; matrix: PFT_Matrix; delta: PFT_Vector); cdecl; external freetype_lib;
procedure FT_Get_Transform(face: TFT_Face; matrix: PFT_Matrix; delta: PFT_Vector); cdecl; external freetype_lib;
function FT_Render_Glyph(slot: TFT_GlyphSlot; render_mode: TFT_Render_Mode): TFT_Error; cdecl; external freetype_lib;
function FT_Get_Kerning(face: TFT_Face; left_glyph: TFT_UInt; right_glyph: TFT_UInt; kern_mode: TFT_UInt; akerning: PFT_Vector): TFT_Error; cdecl; external freetype_lib;
function FT_Get_Track_Kerning(face: TFT_Face; point_size: TFT_Fixed; degree: TFT_Int; akerning: PFT_Fixed): TFT_Error; cdecl; external freetype_lib;
function FT_Select_Charmap(face: TFT_Face; encoding: TFT_Encoding): TFT_Error; cdecl; external freetype_lib;
function FT_Set_Charmap(face: TFT_Face; charmap: TFT_CharMap): TFT_Error; cdecl; external freetype_lib;
function FT_Get_Charmap_Index(charmap: TFT_CharMap): TFT_Int; cdecl; external freetype_lib;
function FT_Get_Char_Index(face: TFT_Face; charcode: TFT_ULong): TFT_UInt; cdecl; external freetype_lib;
function FT_Get_First_Char(face: TFT_Face; agindex: PFT_UInt): TFT_ULong; cdecl; external freetype_lib;
function FT_Get_Next_Char(face: TFT_Face; char_code: TFT_ULong; agindex: PFT_UInt): TFT_ULong; cdecl; external freetype_lib;
function FT_Face_Properties(face: TFT_Face; num_properties: TFT_UInt; properties: PFT_Parameter): TFT_Error; cdecl; external freetype_lib;
function FT_Get_Name_Index(face: TFT_Face; glyph_name: PFT_String): TFT_UInt; cdecl; external freetype_lib;
function FT_Get_Glyph_Name(face: TFT_Face; glyph_index: TFT_UInt; buffer: TFT_Pointer; buffer_max: TFT_UInt): TFT_Error; cdecl; external freetype_lib;
function FT_Get_Postscript_Name(face: TFT_Face): PChar; cdecl; external freetype_lib;
function FT_Get_FSType_Flags(face: TFT_Face): TFT_UShort; cdecl; external freetype_lib;
function FT_Face_GetCharVariantIndex(face: TFT_Face; charcode: TFT_ULong; variantSelector: TFT_ULong): TFT_UInt; cdecl; external freetype_lib;
function FT_Face_GetCharVariantIsDefault(face: TFT_Face; charcode: TFT_ULong; variantSelector: TFT_ULong): TFT_Int; cdecl; external freetype_lib;
function FT_Face_GetVariantSelectors(face: TFT_Face): PFT_UInt32; cdecl; external freetype_lib;
function FT_Face_GetVariantsOfChar(face: TFT_Face; charcode: TFT_ULong): PFT_UInt32; cdecl; external freetype_lib;
function FT_Face_GetCharsOfVariant(face: TFT_Face; variantSelector: TFT_ULong): PFT_UInt32; cdecl; external freetype_lib;
function FT_MulDiv(a: TFT_Long; b: TFT_Long; c: TFT_Long): TFT_Long; cdecl; external freetype_lib;
function FT_MulFix(a: TFT_Long; b: TFT_Long): TFT_Long; cdecl; external freetype_lib;
function FT_DivFix(a: TFT_Long; b: TFT_Long): TFT_Long; cdecl; external freetype_lib;
function FT_RoundFix(a: TFT_Fixed): TFT_Fixed; cdecl; external freetype_lib;
function FT_CeilFix(a: TFT_Fixed): TFT_Fixed; cdecl; external freetype_lib;
function FT_FloorFix(a: TFT_Fixed): TFT_Fixed; cdecl; external freetype_lib;
procedure FT_Vector_Transform(vector: PFT_Vector; matrix: PFT_Matrix); cdecl; external freetype_lib;
procedure FT_Library_Version(library_: TFT_Library; amajor: PFT_Int; aminor: PFT_Int; apatch: PFT_Int); cdecl; external freetype_lib;
function FT_Face_CheckTrueTypePatents(face: TFT_Face): TFT_Bool; cdecl; external freetype_lib;
function FT_Face_SetUnpatentedHinting(face: TFT_Face; Value: TFT_Bool): TFT_Bool; cdecl; external freetype_lib;
function FT_Get_SubGlyph_Info(glyph: TFT_GlyphSlot; sub_index: TFT_UInt; p_index: PFT_Int; p_flags: PFT_UInt; p_arg1: PFT_Int; p_arg2: PFT_Int; p_transform: PFT_Matrix): TFT_Error; cdecl; external freetype_lib;

function FT_Sin(angle: TFT_Angle): TFT_Fixed; cdecl; external freetype_lib;
function FT_Cos(angle: TFT_Angle): TFT_Fixed; cdecl; external freetype_lib;
function FT_Tan(angle: TFT_Angle): TFT_Fixed; cdecl; external freetype_lib;
function FT_Atan2(x: TFT_Fixed; y: TFT_Fixed): TFT_Angle; cdecl; external freetype_lib;
function FT_Angle_Diff(angle1: TFT_Angle; angle2: TFT_Angle): TFT_Angle; cdecl; external freetype_lib;
procedure FT_Vector_Unit(vec: PFT_Vector; angle: TFT_Angle); cdecl; external freetype_lib;
procedure FT_Vector_Rotate(vec: PFT_Vector; angle: TFT_Angle); cdecl; external freetype_lib;
function FT_Vector_Length(vec: PFT_Vector): TFT_Fixed; cdecl; external freetype_lib;
procedure FT_Vector_Polarize(vec: PFT_Vector; length: PFT_Fixed; angle: PFT_Angle); cdecl; external freetype_lib;
procedure FT_Vector_From_Polar(vec: PFT_Vector; length: TFT_Fixed; angle: TFT_Angle); cdecl; external freetype_lib;

function FT_HAS_HORIZONTAL(face: TFT_Face): TFT_bool;
function FT_HAS_VERTICAL(face: TFT_Face): TFT_bool;
function FT_HAS_KERNING(face: TFT_Face): TFT_bool;
function FT_IS_SCALABLE(face: TFT_Face): TFT_bool;
function FT_IS_SFNT(face: TFT_Face): TFT_bool;
function FT_IS_FIXED_WIDTH(face: TFT_Face): TFT_bool;
function FT_HAS_FIXED_SIZES(face: TFT_Face): TFT_bool;
function FT_HAS_FAST_GLYPHS(face: TFT_Face): TFT_bool;
function FT_HAS_GLYPH_NAMES(face: TFT_Face): TFT_bool;
function FT_HAS_MULTIPLE_MASTERS(face: TFT_Face): TFT_bool;
function FT_IS_NAMED_INSTANCE(face: TFT_Face): TFT_bool;
function FT_IS_VARIATION(face: TFT_Face): TFT_bool;
function FT_IS_CID_KEYED(face: TFT_Face): TFT_bool;
function FT_IS_TRICKY(face: TFT_Face): TFT_bool;
function FT_HAS_COLOR(face: TFT_Face): TFT_bool;
function FT_HAS_SVG(face: TFT_Face): TFT_bool;
function FT_HAS_SBIX(face: TFT_Face): TFT_bool;
function FT_HAS_SBIX_OVERLAY(face: TFT_Face): TFT_bool;



// ===== ftmm.h

function FT_Get_Multi_Master(face: TFT_Face; amaster: PFT_Multi_Master): TFT_Error; cdecl; external freetype_lib;
function FT_Get_MM_Var(face: TFT_Face; amaster: PPFT_MM_Var): TFT_Error; cdecl; external freetype_lib;
function FT_Done_MM_Var(library_: TFT_Library; amaster: PFT_MM_Var): TFT_Error; cdecl; external freetype_lib;
function FT_Set_MM_Design_Coordinates(face: TFT_Face; num_coords: TFT_UInt; coords: PFT_Long): TFT_Error; cdecl; external freetype_lib;
function FT_Set_Var_Design_Coordinates(face: TFT_Face; num_coords: TFT_UInt; coords: PFT_Fixed): TFT_Error; cdecl; external freetype_lib;
function FT_Get_Var_Design_Coordinates(face: TFT_Face; num_coords: TFT_UInt; coords: PFT_Fixed): TFT_Error; cdecl; external freetype_lib;
function FT_Set_MM_Blend_Coordinates(face: TFT_Face; num_coords: TFT_UInt; coords: PFT_Fixed): TFT_Error; cdecl; external freetype_lib;
function FT_Get_MM_Blend_Coordinates(face: TFT_Face; num_coords: TFT_UInt; coords: PFT_Fixed): TFT_Error; cdecl; external freetype_lib;
function FT_Set_Var_Blend_Coordinates(face: TFT_Face; num_coords: TFT_UInt; coords: PFT_Fixed): TFT_Error; cdecl; external freetype_lib;
function FT_Get_Var_Blend_Coordinates(face: TFT_Face; num_coords: TFT_UInt; coords: PFT_Fixed): TFT_Error; cdecl; external freetype_lib;
function FT_Set_MM_WeightVector(face: TFT_Face; len: TFT_UInt; weightvector: PFT_Fixed): TFT_Error; cdecl; external freetype_lib;
function FT_Get_MM_WeightVector(face: TFT_Face; len: PFT_UInt; weightvector: PFT_Fixed): TFT_Error; cdecl; external freetype_lib;
function FT_Get_Var_Axis_Flags(master: PFT_MM_Var; axis_index: TFT_UInt; flags: PFT_UInt): TFT_Error; cdecl; external freetype_lib;
function FT_Set_Named_Instance(face: TFT_Face; instance_index: TFT_UInt): TFT_Error; cdecl; external freetype_lib;
function FT_Get_Default_Named_Instance(face: TFT_Face; instance_index: PFT_UInt): TFT_Error; cdecl; external freetype_lib;


// ==== ftcache.h

function FTC_Manager_New(library_: TFT_Library; max_faces: TFT_UInt; max_sizes: TFT_UInt; max_bytes: TFT_ULong; requester: TFTC_Face_Requester; req_data: TFT_Pointer; amanager: PFTC_Manager): TFT_Error; cdecl; external freetype_lib;
procedure FTC_Manager_Reset(manager: TFTC_Manager); cdecl; external freetype_lib;
procedure FTC_Manager_Done(manager: TFTC_Manager); cdecl; external freetype_lib;
function FTC_Manager_LookupFace(manager: TFTC_Manager; face_id: TFTC_FaceID; aface: PFT_Face): TFT_Error; cdecl; external freetype_lib;
function FTC_Manager_LookupSize(manager: TFTC_Manager; scaler: TFTC_Scaler; asize: PFT_Size): TFT_Error; cdecl; external freetype_lib;
procedure FTC_Node_Unref(node: TFTC_Node; manager: TFTC_Manager); cdecl; external freetype_lib;
procedure FTC_Manager_RemoveFaceID(manager: TFTC_Manager; face_id: TFTC_FaceID); cdecl; external freetype_lib;
function FTC_CMapCache_New(manager: TFTC_Manager; acache: PFTC_CMapCache): TFT_Error; cdecl; external freetype_lib;
function FTC_CMapCache_Lookup(cache: TFTC_CMapCache; face_id: TFTC_FaceID; cmap_index: TFT_Int; char_code: TFT_UInt32): TFT_UInt; cdecl; external freetype_lib;
function FTC_ImageCache_New(manager: TFTC_Manager; acache: PFTC_ImageCache): TFT_Error; cdecl; external freetype_lib;
function FTC_ImageCache_Lookup(cache: TFTC_ImageCache; _type: TFTC_ImageType; gindex: TFT_UInt; aglyph: PFT_Glyph; anode: PFTC_Node): TFT_Error; cdecl; external freetype_lib;
function FTC_ImageCache_LookupScaler(cache: TFTC_ImageCache; scaler: TFTC_Scaler; load_flags: TFT_ULong; gindex: TFT_UInt; aglyph: PFT_Glyph; anode: PFTC_Node): TFT_Error; cdecl; external freetype_lib;
function FTC_SBitCache_New(manager: TFTC_Manager; acache: PFTC_SBitCache): TFT_Error; cdecl; external freetype_lib;
function FTC_SBitCache_Lookup(cache: TFTC_SBitCache; _type: TFTC_ImageType; gindex: TFT_UInt; sbit: PFTC_SBit; anode: PFTC_Node): TFT_Error; cdecl; external freetype_lib;
function FTC_SBitCache_LookupScaler(cache: TFTC_SBitCache; scaler: TFTC_Scaler; load_flags: TFT_ULong; gindex: TFT_UInt; sbit: PFTC_SBit; anode: PFTC_Node): TFT_Error; cdecl; external freetype_lib;


// ====  ftrender.h

function FT_Get_Renderer(library_: TFT_Library; format: TFT_Glyph_Format): TFT_Renderer; cdecl; external freetype_lib;
function FT_Set_Renderer(library_: TFT_Library; renderer: TFT_Renderer; num_params: TFT_UInt; parameters: PFT_Parameter): TFT_Error; cdecl; external freetype_lib;


// ====  ftmodapi.h

function FT_Add_Module(library_: TFT_Library; clazz: PFT_Module_Class): TFT_Error; cdecl; external freetype_lib;
function FT_Get_Module(library_: TFT_Library; module_name: PChar): TFT_Module; cdecl; external freetype_lib;
function FT_Remove_Module(library_: TFT_Library; module: TFT_Module): TFT_Error; cdecl; external freetype_lib;
function FT_Property_Set(library_: TFT_Library; module_name: PFT_String; property_name: PFT_String; Value: pointer): TFT_Error; cdecl; external freetype_lib;
function FT_Property_Get(library_: TFT_Library; module_name: PFT_String; property_name: PFT_String; Value: pointer): TFT_Error; cdecl; external freetype_lib;
procedure FT_Set_Default_Properties(library_: TFT_Library); cdecl; external freetype_lib;
function FT_Reference_Library(library_: TFT_Library): TFT_Error; cdecl; external freetype_lib;
function FT_New_Library(memory: TFT_Memory; alibrary_: PFT_Library): TFT_Error; cdecl; external freetype_lib;
function FT_Done_Library(library_: TFT_Library): TFT_Error; cdecl; external freetype_lib;
procedure FT_Set_Debug_Hook(library_: TFT_Library; hook_index: TFT_UInt; debug_hook: TFT_DebugHook_Func); cdecl; external freetype_lib;
procedure FT_Add_Default_Modules(library_: TFT_Library); cdecl; external freetype_lib;
function FT_Get_TrueType_Engine_Type(library_: TFT_Library): TFT_TrueTypeEngineType; cdecl; external freetype_lib;


// ====  ftpfr.h

function FT_Get_PFR_Metrics(face: TFT_Face; aoutline_resolution: PFT_UInt; ametrics_resolution: PFT_UInt; ametrics_x_scale: PFT_Fixed; ametrics_y_scale: PFT_Fixed): TFT_Error; cdecl; external freetype_lib;
function FT_Get_PFR_Kerning(face: TFT_Face; left: TFT_UInt; right: TFT_UInt; avector: PFT_Vector): TFT_Error; cdecl; external freetype_lib;
function FT_Get_PFR_Advance(face: TFT_Face; gindex: TFT_UInt; aadvance: PFT_Pos): TFT_Error; cdecl; external freetype_lib;


// ====  ftsnames.h

function FT_Get_Sfnt_Name_Count(face: TFT_Face): TFT_UInt; cdecl; external freetype_lib;
function FT_Get_Sfnt_Name(face: TFT_Face; idx: TFT_UInt; aname: PFT_SfntName): TFT_Error; cdecl; external freetype_lib;
function FT_Get_Sfnt_LangTag(face: TFT_Face; langID: TFT_UInt; alangTag: PFT_SfntLangTag): TFT_Error; cdecl; external freetype_lib;


// ====  ftlcdfil.h

type
  Tsub02 = array[0..2] of TFT_Vector;

function FT_Library_SetLcdFilter(library_: TFT_Library; filter: TFT_LcdFilter): TFT_Error; cdecl; external freetype_lib;
function FT_Library_SetLcdFilterWeights(library_: TFT_Library; weights: pbyte): TFT_Error; cdecl; external freetype_lib;
function FT_Library_SetLcdGeometry(library_: TFT_Library; sub: Tsub02): TFT_Error; cdecl; external freetype_lib;


// ====  ftbdf.h

function FT_Get_BDF_Charset_ID(face: TFT_Face; acharset_encoding: PPchar; acharset_registry: PPchar): TFT_Error; cdecl; external freetype_lib;
function FT_Get_BDF_Property(face: TFT_Face; prop_name: PChar; aproperty: PBDF_PropertyRec): TFT_Error; cdecl; external freetype_lib;


// ====  ftlzw.h

function FT_Stream_OpenLZW(stream: TFT_Stream; Source: TFT_Stream): TFT_Error; cdecl; external freetype_lib;


// ====  ftcid.h

function FT_Get_CID_Registry_Ordering_Supplement(face: TFT_Face; registry: PPchar; ordering: PPchar; supplement: PFT_Int): TFT_Error; cdecl; external freetype_lib;
function FT_Get_CID_Is_Internally_CID_Keyed(face: TFT_Face; is_cid: PFT_Bool): TFT_Error; cdecl; external freetype_lib;
function FT_Get_CID_From_Glyph_Index(face: TFT_Face; glyph_index: TFT_UInt; cid: PFT_UInt): TFT_Error; cdecl; external freetype_lib;


// ====  ftcid.h

function FT_Get_Sfnt_Table(face: TFT_Face; tag: TFT_Sfnt_Tag): pointer; cdecl; external freetype_lib;
function FT_Load_Sfnt_Table(face: TFT_Face; tag: TFT_ULong; offset: TFT_Long; buffer: PFT_Byte; length: PFT_ULong): TFT_Error; cdecl; external freetype_lib;
function FT_Sfnt_Table_Info(face: TFT_Face; table_index: TFT_UInt; tag: PFT_ULong; length: PFT_ULong): TFT_Error; cdecl; external freetype_lib;
function FT_Get_CMap_Language_ID(charmap: TFT_CharMap): TFT_ULong; cdecl; external freetype_lib;
function FT_Get_CMap_Format(charmap: TFT_CharMap): TFT_Long; cdecl; external freetype_lib;


// ====  ftgzip.h

function FT_Stream_OpenGzip(stream: TFT_Stream; Source: TFT_Stream): TFT_Error; cdecl; external freetype_lib;
function FT_Gzip_Uncompress(memory: TFT_Memory; output: PFT_Byte; output_len: PFT_ULong; input: PFT_Byte; input_len: TFT_ULong): TFT_Error; cdecl; external freetype_lib;


// ====  ftbzip2.h

function FT_Stream_OpenBzip2(stream: TFT_Stream; Source: TFT_Stream): TFT_Error; cdecl; external freetype_lib;


// ====  ftbitmap.h

procedure FT_Bitmap_Init(abitmap: PFT_Bitmap); cdecl; external freetype_lib;
procedure FT_Bitmap_New(abitmap: PFT_Bitmap); cdecl; external freetype_lib;
function FT_Bitmap_Copy(library_: TFT_Library; Source: PFT_Bitmap; target: PFT_Bitmap): TFT_Error; cdecl; external freetype_lib;
function FT_Bitmap_Embolden(library_: TFT_Library; bitmap: PFT_Bitmap; xStrength: TFT_Pos; yStrength: TFT_Pos): TFT_Error; cdecl; external freetype_lib;
function FT_Bitmap_Convert(library_: TFT_Library; Source: PFT_Bitmap; target: PFT_Bitmap; alignment: TFT_Int): TFT_Error; cdecl; external freetype_lib;
function FT_Bitmap_Blend(library_: TFT_Library; Source: PFT_Bitmap; source_offset: TFT_Vector; target: PFT_Bitmap; atarget_offset: PFT_Vector; color: TFT_Color): TFT_Error; cdecl; external freetype_lib;
function FT_GlyphSlot_Own_Bitmap(slot: TFT_GlyphSlot): TFT_Error; cdecl; external freetype_lib;
function FT_Bitmap_Done(library_: TFT_Library; bitmap: PFT_Bitmap): TFT_Error; cdecl; external freetype_lib;


// ====  ftcolor.h

function FT_Palette_Data_Get(face: TFT_Face; apalette: PFT_Palette_Data): TFT_Error; cdecl; external freetype_lib;
function FT_Palette_Select(face: TFT_Face; palette_index: TFT_UShort; apalette: PPFT_Color): TFT_Error; cdecl; external freetype_lib;
function FT_Palette_Set_Foreground_Color(face: TFT_Face; foreground_color: TFT_Color): TFT_Error; cdecl; external freetype_lib;
function FT_Get_Color_Glyph_Layer(face: TFT_Face; base_glyph: TFT_UInt; aglyph_index: PFT_UInt; acolor_index: PFT_UInt; iterator: PFT_LayerIterator): TFT_Bool; cdecl; external freetype_lib;
function FT_Get_Color_Glyph_Paint(face: TFT_Face; base_glyph: TFT_UInt; root_transform: TFT_Color_Root_Transform; paint: PFT_OpaquePaint): TFT_Bool; cdecl; external freetype_lib;
function FT_Get_Color_Glyph_ClipBox(face: TFT_Face; base_glyph: TFT_UInt; clip_box: PFT_ClipBox): TFT_Bool; cdecl; external freetype_lib;
function FT_Get_Paint_Layers(face: TFT_Face; iterator: PFT_LayerIterator; paint: PFT_OpaquePaint): TFT_Bool; cdecl; external freetype_lib;
function FT_Get_Colorline_Stops(face: TFT_Face; color_stop: PFT_ColorStop; iterator: PFT_ColorStopIterator): TFT_Bool; cdecl; external freetype_lib;
function FT_Get_Paint(face: TFT_Face; opaque_paint: TFT_OpaquePaint; paint: PFT_COLR_Paint): TFT_Bool; cdecl; external freetype_lib;


// ====  ftadvanc.h

function FT_Get_Advance(face: TFT_Face; gindex: TFT_UInt; load_flags: TFT_Int32; padvance: PFT_Fixed): TFT_Error; cdecl; external freetype_lib;
function FT_Get_Advances(face: TFT_Face; start: TFT_UInt; Count: TFT_UInt; load_flags: TFT_Int32; padvances: PFT_Fixed): TFT_Error; cdecl; external freetype_lib;


// ====  ftgxval.h

type
  TTableArr = array [0..(FT_VALIDATE_GX_LENGTH) - 1] of TFT_Bytes;

function FT_TrueTypeGX_Validate(face: TFT_Face; validation_flags: TFT_UInt; tables: TTableArr; table_length: TFT_UInt): TFT_Error; cdecl; external freetype_lib;
procedure FT_TrueTypeGX_Free(face: TFT_Face; table: TFT_Bytes); cdecl; external freetype_lib;
function FT_ClassicKern_Validate(face: TFT_Face; validation_flags: TFT_UInt; ckern_table: PFT_Bytes): TFT_Error; cdecl; external freetype_lib;
procedure FT_ClassicKern_Free(face: TFT_Face; table: TFT_Bytes); cdecl; external freetype_lib;


// ====  ftoutln.h

function FT_Outline_Decompose(outline: PFT_Outline; func_interface: PFT_Outline_Funcs; user: pointer): TFT_Error; cdecl; external freetype_lib;
function FT_Outline_New(library_: TFT_Library; numPoints: TFT_UInt; numContours: TFT_Int; anoutline: PFT_Outline): TFT_Error; cdecl; external freetype_lib;
function FT_Outline_Done(library_: TFT_Library; outline: PFT_Outline): TFT_Error; cdecl; external freetype_lib;
function FT_Outline_Check(outline: PFT_Outline): TFT_Error; cdecl; external freetype_lib;
procedure FT_Outline_Get_CBox(outline: PFT_Outline; acbox: PFT_BBox); cdecl; external freetype_lib;
procedure FT_Outline_Translate(outline: PFT_Outline; xOffset: TFT_Pos; yOffset: TFT_Pos); cdecl; external freetype_lib;
function FT_Outline_Copy(Source: PFT_Outline; target: PFT_Outline): TFT_Error; cdecl; external freetype_lib;
procedure FT_Outline_Transform(outline: PFT_Outline; matrix: PFT_Matrix); cdecl; external freetype_lib;
function FT_Outline_Embolden(outline: PFT_Outline; strength: TFT_Pos): TFT_Error; cdecl; external freetype_lib;
function FT_Outline_EmboldenXY(outline: PFT_Outline; xstrength: TFT_Pos; ystrength: TFT_Pos): TFT_Error; cdecl; external freetype_lib;
procedure FT_Outline_Reverse(outline: PFT_Outline); cdecl; external freetype_lib;
function FT_Outline_Get_Bitmap(library_: TFT_Library; outline: PFT_Outline; abitmap: PFT_Bitmap): TFT_Error; cdecl; external freetype_lib;
function FT_Outline_Render(library_: TFT_Library; outline: PFT_Outline; params: PFT_Raster_Params): TFT_Error; cdecl; external freetype_lib;
function FT_Outline_Get_Orientation(outline: PFT_Outline): TFT_Orientation; cdecl; external freetype_lib;

// ====  ftmac.h

// === Nur Mac !!!!!
//function FT_New_Face_From_FOND(library_:TFT_Library; fond:THandle; face_index:TFT_Long; aface:PFT_Face):TFT_Error;cdecl; external freetype_lib;
//function FT_GetFile_From_Mac_Name(fontName:Pchar; pathSpec:PFSSpec; face_index:PFT_Long):TFT_Error;cdecl; external freetype_lib;
//function FT_GetFile_From_Mac_ATS_Name(fontName:Pchar; pathSpec:PFSSpec; face_index:PFT_Long):TFT_Error;cdecl; external freetype_lib;
//function FT_GetFilePath_From_Mac_ATS_Name(fontName:Pchar; path:PUInt8; maxPathSize:TUInt32; face_index:PFT_Long):TFT_Error;cdecl; external freetype_lib;
//function FT_New_Face_From_FSSpec(library_:TFT_Library; spec:PFSSpec; face_index:TFT_Long; aface:PFT_Face):TFT_Error;cdecl; external freetype_lib;
//function FT_New_Face_From_FSRef(library_:TFT_Library; ref:PFSRef; face_index:TFT_Long; aface:PFT_Face):TFT_Error;cdecl; external freetype_lib;


// ====  t1tables.h

function FT_Has_PS_Glyph_Names(face: TFT_Face): TFT_Int; cdecl; external freetype_lib;
function FT_Get_PS_Font_Info(face: TFT_Face; afont_info: TPS_FontInfo): TFT_Error; cdecl; external freetype_lib;
function FT_Get_PS_Font_Private(face: TFT_Face; afont_private: TPS_Private): TFT_Error; cdecl; external freetype_lib;
function FT_Get_PS_Font_Value(face: TFT_Face; key: TPS_Dict_Keys; idx: TFT_UInt; Value: pointer; value_len: TFT_Long): TFT_Long; cdecl; external freetype_lib;


// ====  ftotval.h


function FT_OpenType_Validate(face: TFT_Face; validation_flags: TFT_UInt; BASE_table: PFT_Bytes; GDEF_table: PFT_Bytes; GPOS_table: PFT_Bytes; GSUB_table: PFT_Bytes; JSTF_table: PFT_Bytes): TFT_Error; cdecl; external freetype_lib;
procedure FT_OpenType_Free(face: TFT_Face; table: TFT_Bytes); cdecl; external freetype_lib;


// ====  ftlist.h

function FT_List_Find(list: TFT_List; Data: pointer): TFT_ListNode; cdecl; external freetype_lib;
procedure FT_List_Add(list: TFT_List; node: TFT_ListNode); cdecl; external freetype_lib;
procedure FT_List_Insert(list: TFT_List; node: TFT_ListNode); cdecl; external freetype_lib;
procedure FT_List_Remove(list: TFT_List; node: TFT_ListNode); cdecl; external freetype_lib;
procedure FT_List_Up(list: TFT_List; node: TFT_ListNode); cdecl; external freetype_lib;
procedure FT_List_Finalize(list: TFT_List; Destroy: TFT_List_Destructor; memory: TFT_Memory; user: pointer); cdecl; external freetype_lib;
function FT_List_Iterate(list: TFT_List; iterator: TFT_List_Iterator; user: pointer): TFT_Error; cdecl; external freetype_lib;


// ===  ftsizes.h

function FT_New_Size(face: TFT_Face; size: PFT_Size): TFT_Error; cdecl; external freetype_lib;
function FT_Done_Size(size: TFT_Size): TFT_Error; cdecl; external freetype_lib;
function FT_Activate_Size(size: TFT_Size): TFT_Error; cdecl; external freetype_lib;


// ====  ftgasp.h

function FT_Get_Gasp(face: TFT_Face; ppem: TFT_UInt): TFT_Int; cdecl; external freetype_lib;


// ====  ftfntfmt.h

function FT_Get_Font_Format(face: TFT_Face): PChar; cdecl; external freetype_lib;
function FT_Get_X11_Font_Format(face: TFT_Face): PChar; cdecl; external freetype_lib;


// ====  ftwinfnt.h

function FT_Get_WinFNT_Header(face: TFT_Face; aheader: PFT_WinFNT_HeaderRec): TFT_Error; cdecl; external freetype_lib;


// ====  ftbbox.h

function FT_Outline_Get_BBox(outline: PFT_Outline; abbox: PFT_BBox): TFT_Error; cdecl; external freetype_lib;


// ====  ftstroke.h

function FT_Outline_GetInsideBorder(outline: PFT_Outline): TFT_StrokerBorder; cdecl; external freetype_lib;
function FT_Outline_GetOutsideBorder(outline: PFT_Outline): TFT_StrokerBorder; cdecl; external freetype_lib;
function FT_Stroker_New(library_: TFT_Library; astroker: PFT_Stroker): TFT_Error; cdecl; external freetype_lib;
procedure FT_Stroker_Set(stroker: TFT_Stroker; radius: TFT_Fixed; line_cap: TFT_Stroker_LineCap; line_join: TFT_Stroker_LineJoin; miter_limit: TFT_Fixed); cdecl; external freetype_lib;
procedure FT_Stroker_Rewind(stroker: TFT_Stroker); cdecl; external freetype_lib;
function FT_Stroker_ParseOutline(stroker: TFT_Stroker; outline: PFT_Outline; opened: TFT_Bool): TFT_Error; cdecl; external freetype_lib;
function FT_Stroker_BeginSubPath(stroker: TFT_Stroker; to_: PFT_Vector; Open: TFT_Bool): TFT_Error; cdecl; external freetype_lib;
function FT_Stroker_EndSubPath(stroker: TFT_Stroker): TFT_Error; cdecl; external freetype_lib;
function FT_Stroker_LineTo(stroker: TFT_Stroker; to_: PFT_Vector): TFT_Error; cdecl; external freetype_lib;
function FT_Stroker_ConicTo(stroker: TFT_Stroker; control: PFT_Vector; to_: PFT_Vector): TFT_Error; cdecl; external freetype_lib;
function FT_Stroker_CubicTo(stroker: TFT_Stroker; control1: PFT_Vector; control2: PFT_Vector; to_: PFT_Vector): TFT_Error; cdecl; external freetype_lib;
function FT_Stroker_GetBorderCounts(stroker: TFT_Stroker; border: TFT_StrokerBorder; anum_points: PFT_UInt; anum_contours: PFT_UInt): TFT_Error; cdecl; external freetype_lib;
procedure FT_Stroker_ExportBorder(stroker: TFT_Stroker; border: TFT_StrokerBorder; outline: PFT_Outline); cdecl; external freetype_lib;
function FT_Stroker_GetCounts(stroker: TFT_Stroker; anum_points: PFT_UInt; anum_contours: PFT_UInt): TFT_Error; cdecl; external freetype_lib;
procedure FT_Stroker_Export(stroker: TFT_Stroker; outline: PFT_Outline); cdecl; external freetype_lib;
procedure FT_Stroker_Done(stroker: TFT_Stroker); cdecl; external freetype_lib;
function FT_Glyph_Stroke(pglyph: PFT_Glyph; stroker: TFT_Stroker; Destroy: TFT_Bool): TFT_Error; cdecl; external freetype_lib;
function FT_Glyph_StrokeBorder(pglyph: PFT_Glyph; stroker: TFT_Stroker; inside: TFT_Bool; Destroy: TFT_Bool): TFT_Error; cdecl; external freetype_lib;


// ====  ftsynth.h

procedure FT_GlyphSlot_Embolden(slot: TFT_GlyphSlot); cdecl; external freetype_lib;
procedure FT_GlyphSlot_AdjustWeight(slot: TFT_GlyphSlot; xdelta: TFT_Fixed; ydelta: TFT_Fixed); cdecl; external freetype_lib;
procedure FT_GlyphSlot_Oblique(slot: TFT_GlyphSlot); cdecl; external freetype_lib;
procedure FT_GlyphSlot_Slant(slot: TFT_GlyphSlot; xslant: TFT_Fixed; yslant: TFT_Fixed); cdecl; external freetype_lib;


// ====  ftglyph.h

function FT_New_Glyph(library_: TFT_Library; format: TFT_Glyph_Format; aglyph: PFT_Glyph): TFT_Error; cdecl; external freetype_lib;
function FT_Get_Glyph(slot: TFT_GlyphSlot; aglyph: PFT_Glyph): TFT_Error; cdecl; external freetype_lib;
function FT_Glyph_Copy(Source: TFT_Glyph; target: PFT_Glyph): TFT_Error; cdecl; external freetype_lib;
function FT_Glyph_Transform(glyph: TFT_Glyph; matrix: PFT_Matrix; delta: PFT_Vector): TFT_Error; cdecl; external freetype_lib;

procedure FT_Glyph_Get_CBox(glyph: TFT_Glyph; bbox_mode: TFT_UInt; acbox: PFT_BBox); cdecl; external freetype_lib;
function FT_Glyph_To_Bitmap(the_glyph: PFT_Glyph; render_mode: TFT_Render_Mode; origin: PFT_Vector; Destroy: TFT_Bool): TFT_Error; cdecl; external freetype_lib;
procedure FT_Done_Glyph(glyph: TFT_Glyph); cdecl; external freetype_lib;
procedure FT_Matrix_Multiply(a: PFT_Matrix; b: PFT_Matrix); cdecl; external freetype_lib;
function FT_Matrix_Invert(matrix: PFT_Matrix): TFT_Error; cdecl; external freetype_lib;


// ====  fterrors.h


function FT_Error_String(error_code: TFT_Error): PChar;

//function FT_Error_String(error_code: TFT_Error): PChar; cdecl; external freetype_lib;

implementation

function FT_Error_String(error_code: TFT_Error): PChar;
const
  ErrorCode: array of PChar = (
    'no error',
    'cannot open resource',
    'unknown file format',
    'broken file',
    'invalid FreeType version',
    'module version is too low',
    'invalid argument',
    'unimplemented feature',
    'broken table',
    'broken offset within table',
    'array allocation size too large',
    'missing module',
    'missing property',
    '', '', '',

    'invalid glyph index',
    'invalid character code',
    'unsupported glyph image format',
    'cannot render this glyph format',
    'invalid outline',
    'invalid composite glyph',
    'too many hints',
    'invalid pixel size',
    'invalid SVG document',
    '', '', '', '', '', '', '',

    'invalid object handle',
    'invalid library handle',
    'invalid module handle',
    'invalid face handle',
    'invalid size handle',
    'invalid glyph slot handle',
    'invalid charmap handle',
    'invalid cache manager handle',
    'invalid stream handle',
    '', '', '', '', '', '', '',

    'too many modules',
    'too many extensions',
    '', '', '', '', '', '', '',
    '', '', '', '', '', '', '',

    'out of memory',
    'unlisted object',
    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',

    'cannot open stream',
    'invalid stream seek',
    'invalid stream skip',
    'invalid stream read',
    'invalid stream operation',
    'invalid frame operation',
    'nested frame access',
    'invalid frame read',
    '', '', '', '', '', '', '', '',

    'raster uninitialized',
    'raster corrupted',
    'raster overflow',
    'negative height while rastering',
    '', '', '', '', '', '', '', '', '', '', '', '',

    'too many registered caches',
    '', '', '', '', '', '', '', '', '', '', '', '', '', '',

    'invalid opcode',
    'too few arguments',
    'stack overflow',
    'code overflow',
    'bad argument',
    'division by zero',
    'invalid reference',
    'found debug opcode',
    'found ENDF opcode in execution stream',
    'nested DEFS',
    'invalid code range',
    'execution context too long',
    'too many function definitions',
    'too many instruction definitions',
    'SFNT font table missing',
    'horizontal header (hhea) table missing',
    'locations (loca) table missing',
    'name table missing',
    'character map (cmap) table missing',
    'horizontal metrics (hmtx) table missing',
    'PostScript (post) table missing',
    'invalid horizontal metrics',
    'invalid character map (cmap) format',
    'invalid ppem value',
    'invalid vertical metrics',
    'could not find context',
    'invalid PostScript (post) table format',
    'invalid PostScript (post) table',
    'found FDEF or IDEF opcode in glyf bytecode',
    'missing bitmap in strike',
    'SVG hooks have not been set',
    '',

    'opcode syntax error',
    'argument stack underflow',
    'ignore',
    'no Unicode glyph name found',
    'glyph too big for hinting',
    '', '', '', '', '', '', '', '', '', '', '',

    '`STARTFONT'' field missing',
    '`FONT'' field missing',
    '`SIZE'' field missing',
    '`FONTBOUNDINGBOX'' field missing',
    '`CHARS'' field missing',
    '`STARTCHAR'' field missing',
    '`ENCODING'' field missing',
    '`BBX'' field missing',
    '`BBX'' too big',
    'Font header corrupted or missing fields',
    'Font glyphs corrupted or missing fields');

begin
  Result := '';
  if (error_code >= 0) and (error_code < Length(ErrorCode)) then begin
    Result := ErrorCode[error_code];
  end;
  if Result = '' then begin
    Result := '<unknow>';
  end;
end;


// ======== freetype.h

function FT_HAS_HORIZONTAL(face: TFT_Face): TFT_bool;
begin
  FT_HAS_HORIZONTAL := TFT_Bool(not (not ((face^.face_flags) and FT_FACE_FLAG_HORIZONTAL)));

end;

function FT_HAS_VERTICAL(face: TFT_Face): TFT_bool;
begin
  FT_HAS_VERTICAL := TFT_Bool(not (not ((face^.face_flags) and FT_FACE_FLAG_VERTICAL)));
end;

function FT_HAS_KERNING(face: TFT_Face): TFT_bool;
begin
  FT_HAS_KERNING := TFT_Bool(not (not ((face^.face_flags) and FT_FACE_FLAG_KERNING)));
end;

function FT_IS_SCALABLE(face: TFT_Face): TFT_bool;
begin
  FT_IS_SCALABLE := TFT_Bool(not (not ((face^.face_flags) and FT_FACE_FLAG_SCALABLE)));
end;

function FT_IS_SFNT(face: TFT_Face): TFT_bool;
begin
  FT_IS_SFNT := TFT_Bool(not (not ((face^.face_flags) and FT_FACE_FLAG_SFNT)));
end;

function FT_IS_FIXED_WIDTH(face: TFT_Face): TFT_bool;
begin
  FT_IS_FIXED_WIDTH := TFT_Bool(not (not ((face^.face_flags) and FT_FACE_FLAG_FIXED_WIDTH)));
end;

function FT_HAS_FIXED_SIZES(face: TFT_Face): TFT_bool;
begin
  FT_HAS_FIXED_SIZES := TFT_Bool(not (not ((face^.face_flags) and FT_FACE_FLAG_FIXED_SIZES)));
end;

function FT_HAS_FAST_GLYPHS(face: TFT_Face): TFT_bool;
begin
  Result := TFT_Bool(False);
end;

function FT_HAS_GLYPH_NAMES(face: TFT_Face): TFT_bool;
begin
  FT_HAS_GLYPH_NAMES := TFT_Bool(not (not ((face^.face_flags) and FT_FACE_FLAG_GLYPH_NAMES)));
end;

function FT_HAS_MULTIPLE_MASTERS(face: TFT_Face): TFT_bool;
begin
  FT_HAS_MULTIPLE_MASTERS := TFT_Bool(not (not ((face^.face_flags) and FT_FACE_FLAG_MULTIPLE_MASTERS)));
end;

function FT_IS_NAMED_INSTANCE(face: TFT_Face): TFT_bool;
begin
  FT_IS_NAMED_INSTANCE := TFT_Bool(not (not ((face^.face_index) and $7FFF0000)));
end;

function FT_IS_VARIATION(face: TFT_Face): TFT_bool;
begin
  FT_IS_VARIATION := TFT_Bool(not (not ((face^.face_flags) and FT_FACE_FLAG_VARIATION)));
end;

function FT_IS_CID_KEYED(face: TFT_Face): TFT_bool;
begin
  FT_IS_CID_KEYED := TFT_Bool(not (not ((face^.face_flags) and FT_FACE_FLAG_CID_KEYED)));
end;

function FT_IS_TRICKY(face: TFT_Face): TFT_bool;
begin
  FT_IS_TRICKY := TFT_Bool(not (not ((face^.face_flags) and FT_FACE_FLAG_TRICKY)));
end;

function FT_HAS_COLOR(face: TFT_Face): TFT_bool;
begin
  FT_HAS_COLOR := TFT_Bool(not (not ((face^.face_flags) and FT_FACE_FLAG_COLOR)));
end;

function FT_HAS_SVG(face: TFT_Face): TFT_bool;
begin
  FT_HAS_SVG := TFT_Bool(not (not ((face^.face_flags) and FT_FACE_FLAG_SVG)));
end;

function FT_HAS_SBIX(face: TFT_Face): TFT_bool;
begin
  FT_HAS_SBIX := TFT_Bool(not (not ((face^.face_flags) and FT_FACE_FLAG_SBIX)));
end;

function FT_HAS_SBIX_OVERLAY(face: TFT_Face): TFT_bool;
begin
  FT_HAS_SBIX_OVERLAY := TFT_Bool(not (not ((face^.face_flags) and FT_FACE_FLAG_SBIX_OVERLAY)));
end;

end.
