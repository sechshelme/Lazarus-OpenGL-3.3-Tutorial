diff -r 8.0.1/abstract.h 8.0.3/abstract.h
196a197,202
> /// Return value of expression for given variables
> void MGL_EXPORT mgl_expr_eval_dat(HMEX ex, HMDT res, HCDT vars[MGL_VS]);
> void MGL_EXPORT mgl_expr_eval_dat_(uintptr_t *ex, uintptr_t *res, uintptr_t vars[MGL_VS]);
> /// Return value of expression for given variables (OpenMP-based -- for large data arrays)
> void MGL_EXPORT mgl_expr_eval_omp(HMEX ex, HMDT res, HCDT vars[MGL_VS]);
> void MGL_EXPORT mgl_expr_eval_omp_(uintptr_t *ex, uintptr_t *res, uintptr_t vars[MGL_VS]);
209c215,220
< 
---
> /// Return value of expression for given variables
> void MGL_EXPORT mgl_cexpr_eval_dat(HAEX ex, HADT res, HCDT vars[MGL_VS]);
> void MGL_EXPORT mgl_cexpr_eval_dat_(uintptr_t *ex, uintptr_t *res, uintptr_t vars[MGL_VS]);
> /// Return value of expression for given variables (OpenMP-based -- for large data arrays)
> void MGL_EXPORT mgl_cexpr_eval_omp(HAEX ex, HADT res, HCDT vars[MGL_VS]);
> void MGL_EXPORT mgl_cexpr_eval_omp_(uintptr_t *ex, uintptr_t *res, uintptr_t vars[MGL_VS]);
diff -r 8.0.1/base.h 8.0.3/base.h
79c79
< 		if(num>(nb<<MGL_PB))
---
> 		if(num>=(nb<<MGL_PB))
Nur in 8.0.1/: config.h.
diff -r 8.0.1/datac_cf.h 8.0.3/datac_cf.h
387a388,405
> /// Replace initial mode \a d by found one for equation u_xx+pot*u=0 in waveguide with boundary defined by \a mask. 
> /** Parameter \a how may contain (default is "xyz0"):
>  * ‘x‘ for 1d case with ny*nz variants,
>  * ‘y‘ for 2d case with nz variants,
>  * ‘z‘ for 3d case, TODO
>  * ‘0‘ for zero boundary: u[n] = 0,
>  * ‘1‘ for free boundary du/dx=0: u[n] = u[n-1],
>  * ‘2‘ for zero laplace boundary d^2u/dx^2=0: u[n] = 2*u[n-1]-u[n-2],
>  * ‘s‘ for 2nd order boundary du/dx=k: u[n] = (4*u[n-1]-u[n-2]-2*kdx)/3,
>  * ‘r‘ for radiation boundary du/dx=ku: u[n]=(4*u[n-1]-u[n-2])/(3+2*kdx),
>  * ‘i‘ for radiation boundary du/dx=iku: u[n]=(4*u[n-1]-u[n-2])/(3+2i*kdx),
>  * ‘c‘ for cyclic boundary ( u[n] = u[0] ignore \a kdx),
>  * '+' for focusing nonlinearity,
>  * '-' for defocusing nonlinearity.
>  * Parameter \a iter set maximal number of iterations (0 is automatic). */
> void MGL_EXPORT mgl_datac_mode(HADT d, HCDT mask, HCDT pot, const char *how, dual kdx, long iter);
> void MGL_EXPORT mgl_datac_mode_(uintptr_t *d, uintptr_t *mask, uintptr_t *pot, const char *how, dual *kdx, long *iter, int);
> 
diff -r 8.0.1/data_cf.h 8.0.3/data_cf.h
15c15
<  *   You should have received a copy of the GNU Lesser General Public     *
---
>  *   You should have received a copy of the GNU Lesser General Public      *
460a461,463
> /// Create n-th points distribution of this data values in range [v1, v2] with weight w (can be NULL) by using linear interpolation between coordinate points dat.
> HMDT MGL_EXPORT mgl_data_hist_l(HCDT dat, HCDT weight, long n, mreal v1, mreal v2);
> uintptr_t MGL_EXPORT mgl_data_hist_l_(uintptr_t *dat, uintptr_t *weight, int *n, mreal *v1, mreal *v2);
595c598,613
< 
---
> /// Replace initial mode \a d by found one for equation u_xx+pot*u=0 in waveguide with boundary defined by \a mask.
> /** Parameter \a how may contain (default is "xyz0"):
>  * ‘x‘ for 1d case with ny*nz variants,
>  * ‘y‘ for 2d case with nz variants,
>  * ‘z‘ for 3d case, TODO
>  * ‘0‘ for zero boundary: u[n] = 0,
>  * ‘1‘ for free boundary du/dx=0: u[n] = u[n-1],
>  * ‘2‘ for zero laplace boundary d^2u/dx^2=0: u[n] = 2*u[n-1]-u[n-2],
>  * ‘s‘ for 2nd order boundary du/dx=k: u[n] = (4*u[n-1]-u[n-2]-2*kdx)/3,
>  * ‘r‘ for radiation boundary du/dx=ku: u[n]=(4*u[n-1]-u[n-2])/(3+2*kdx),
>  * ‘c‘ for cyclic boundary ( u[n] = u[0] ignore \a kdx),
>  * '+' for focusing nonlinearity,
>  * '-' for defocusing nonlinearity.
>  * Parameter \a iter set maximal number of iterations (0 is automatic). */
> void MGL_EXPORT mgl_data_mode(HMDT d, HCDT mask, HCDT pot, const char *how, double kdx, long iter);
> void MGL_EXPORT mgl_data_mode_(uintptr_t *d, uintptr_t *mask, uintptr_t *pot, const char *how, double *kdx, long *iter, int);
diff -r 8.0.1/datac.h 8.0.3/datac.h
350a351,356
> 	/// Create n-th points distribution of this data values in range [v1, v2] by using linear interpolation between coordinate.
> 	inline mglData HistL(long n,mreal v1=0,mreal v2=1) const
> 	{	return mglData(true,mgl_data_hist_l(this,NULL,n,v1,v2));	}
> 	/// Create n-th points distribution of this data values in range [v1, v2] with weight w by using linear interpolation between coordinate.
> 	inline mglData HistL(const mglDataA &w, long n,mreal v1=0,mreal v2=1) const
> 	{	return mglData(true,mgl_data_hist_l(this,&w,n,v1,v2));	}
408a415,434
> 	/// Replace initial mode by found one for equation u_xx+pot*u=0 in waveguide with boundary defined by \a mask.
> 	/** Parameter \a how may contain (default is "xyz0"):
> 	* ‘x‘ for 1d case with ny*nz variants,
> 	* ‘y‘ for 2d case with nz variants,
> 	* ‘z‘ for 3d case, TODO
> 	* ‘0‘ for zero boundary: u[n] = 0,
> 	* ‘1‘ for free boundary du/dx=0: u[n] = u[n-1],
> 	* ‘2‘ for zero laplace boundary d^2u/dx^2=0: u[n] = 2*u[n-1]-u[n-2],
> 	* ‘s‘ for 2nd order boundary du/dx=k: u[n] = (4*u[n-1]-u[n-2]-2*kdx)/3,
> 	* ‘r‘ for radiation boundary du/dx=ku: u[n]=(4*u[n-1]-u[n-2])/(3+2*kdx),
> 	* ‘i‘ for radiation boundary du/dx=iku: u[n]=(4*u[n-1]-u[n-2])/(3+2i*kdx),
> 	* ‘c‘ for cyclic boundary ( u[n] = u[0] ignore \a kdx),
> 	* '+' for focusing nonlinearity,
> 	* '-' for defocusing nonlinearity.
> 	* Parameter \a iter set maximal number of iterations (0 is automatic). */
> 	inline void Mode(const mglDataA &mask, const mglDataA &pot, const char *how, dual kdx=0., long iter=0)
> 	{	mgl_datac_mode(this, &mask, &pot, how, kdx, iter);	}
> 	inline void Mode(const mglDataA &mask, const char *how, dual kdx=0., long iter=0)
> 	{	mgl_datac_mode(this, &mask, NULL, how, kdx, iter);	}
> 
477c503
< #pragma omp parallel for
---
> #pragma omp parallel for schedule(static)
481c507
< #pragma omp parallel for
---
> #pragma omp parallel for schedule(static)
560,562c586,588
< /// Saves result of ODE solving for var complex variables with right part func (separated by ';') and initial conditions x0 over time interval [0,tmax] with time step dt
< inline mglDataC mglODEc(const char *func, const char *var, const mglDataA &ini, mreal dt=0.1, mreal tmax=10)
< {	return mglDataC(true, mgl_ode_solve_str_c(func,var, &ini, dt, tmax));	}
---
> /// Saves result of ODE solving for var complex variables with right part func (separated by ';') and initial conditions x0 over time interval [0,tmax] with time step dt. Functions jump are called each steps to handle special conditions (like reflection at boundary).
> inline mglDataC mglODEc(const char *func, const char *var, const mglDataA &ini, mreal dt=0.1, mreal tmax=10, const char *jump=NULL)
> {	return mglDataC(true, mgl_ode_solve_str_cb(func,var, &ini, dt, tmax, jump));	}
600a627,652
> inline mglDataC operator*(const mglDataC &b, const mglDataA &d)
> {	mglDataC a(&b);	a*=d;	return a;	}
> inline mglDataC operator*(dual b, const mglDataC &d)
> {	mglDataC a(&d);	a*=b;	return a;	}
> inline mglDataC operator*(const mglDataC &d, dual b)
> {	mglDataC a(&d);	a*=b;	return a;	}
> inline mglDataC operator-(const mglDataC &b, const mglDataA &d)
> {	mglDataC a(&b);	a-=d;	return a;	}
> inline mglDataC operator-(dual b, const mglDataC &d)
> {	mglDataC a(&d);	a-=b;	return a;	}
> inline mglDataC operator-(const mglDataC &d, dual b)
> {	mglDataC a(&d);	a-=b;	return a;	}
> inline mglDataC operator+(const mglDataC &b, const mglDataA &d)
> {	mglDataC a(&b);	a+=d;	return a;	}
> inline mglDataC operator+(dual b, const mglDataC &d)
> {	mglDataC a(&d);	a+=b;	return a;	}
> inline mglDataC operator+(const mglDataC &d, dual b)
> {	mglDataC a(&d);	a+=b;	return a;	}
> inline mglDataC operator/(const mglDataA &b, const mglDataC &d)
> {	mglDataC a(&b);	a/=d;	return a;	}
> inline mglDataC operator/(const mglDataC &d, dual b)
> {	mglDataC a(&d);	a/=b;	return a;	}
> inline bool operator==(const mglDataC &b, const mglDataC &d)
> {	if(b.nx!=d.nx || b.ny!=d.ny || b.nz!=d.nz)	return false;
> 	return !memcmp(b.a,d.a,b.nx*b.ny*b.nz*sizeof(dual));	}
> //-----------------------------------------------------------------------------
616c668
< 		mdual var[26];
---
> 		mdual var[MGL_VS];
621c673
< 	inline dual Eval(dual var[26])
---
> 	inline dual Eval(dual var[MGL_VS])
622a675,678
> 	/// Return value of expression for given variables
> 	inline void CalcV(HADT res, HCDT vars[MGL_VS])
> 	{	if(res->GetNN()<mgl_omp_thr)	mgl_cexpr_eval_dat(ex, res, vars);
> 		else	mgl_cexpr_eval_omp(ex, res, vars);	}
diff -r 8.0.1/data.h 8.0.3/data.h
342a343,348
> 	/// Create n-th points distribution of this data values in range [v1, v2] by using linear interpolation between coordinate.
> 	inline mglData HistL(long n,mreal v1=0,mreal v2=1) const
> 	{	return mglData(true,mgl_data_hist_l(this,NULL,n,v1,v2));	}
> 	/// Create n-th points distribution of this data values in range [v1, v2] with weight w by using linear interpolation between coordinate.
> 	inline mglData HistL(const mglDataA &w, long n,mreal v1=0,mreal v2=1) const
> 	{	return mglData(true,mgl_data_hist_l(this,&w,n,v1,v2));	}
459a466,484
> 	/// Replace initial mode by found one for equation u_xx+pot*u=0 in waveguide with boundary defined by \a mask.
> 	/** Parameter \a how may contain (default is "xyz0"):
> 	* ‘x‘ for 1d case with ny*nz variants,
> 	* ‘y‘ for 2d case with nz variants,
> 	* ‘z‘ for 3d case, TODO
> 	* ‘0‘ for zero boundary: u[n] = 0,
> 	* ‘1‘ for free boundary du/dx=0: u[n] = u[n-1],
> 	* ‘2‘ for zero laplace boundary d^2u/dx^2=0: u[n] = 2*u[n-1]-u[n-2],
> 	* ‘s‘ for 2nd order boundary du/dx=k: u[n] = (4*u[n-1]-u[n-2]-2*kdx)/3,
> 	* ‘r‘ for radiation boundary du/dx=ku: u[n]=(4*u[n-1]-u[n-2])/(3+2*kdx),
> 	* ‘c‘ for cyclic boundary ( u[n] = u[0] ignore \a kdx),
> 	* '+' for focusing nonlinearity,
> 	* '-' for defocusing nonlinearity.
> 	* Parameter \a iter set maximal number of iterations (0 is automatic). */
> 	inline void Mode(const mglDataA &mask, const mglDataA &pot, const char *how, double kdx=0, long iter=0)
> 	{	mgl_data_mode(this, &mask, &pot, how, kdx, iter);	}
> 	inline void Mode(const mglDataA &mask, const char *how, double kdx=0, long iter=0)
> 	{	mgl_data_mode(this, &mask, NULL, how, kdx, iter);	}
> 
623,625c648,650
< /// Saves result of ODE solving for var complex variables with right part func (separated by ';') and initial conditions x0 over time interval [0,tmax] with time step dt
< inline mglData mglODE(const char *func, const char *var, const mglDataA &ini, mreal dt=0.1, mreal tmax=10)
< {	return mglData(true, mgl_ode_solve_str(func,var, &ini, dt, tmax));	}
---
> /// Saves result of ODE solving for var complex variables with right part func (separated by ';') and initial conditions x0 over time interval [0,tmax] with time step dt. Functions jump are called each steps to handle special conditions (like reflection at boundary).
> inline mglData mglODE(const char *func, const char *var, const mglDataA &ini, mreal dt=0.1, mreal tmax=10, const char *jump=NULL)
> {	return mglData(true, mgl_ode_solve_str_b(func,var, &ini, dt, tmax, jump));	}
692a718
> extern long mgl_omp_thr;	// threshold for use OpenMP in CalcV(). NOTE: default value is 10000 for 8...12 cores CPU
711d736
< #ifndef SWIG
713c738
< 	inline double Eval(mreal var[26])
---
> 	inline double Eval(mreal var[MGL_VS])
716c741
< 	inline double Diff(char dir, mreal var[26])
---
> 	inline double Diff(char dir, mreal var[MGL_VS])
718c743,746
< #endif
---
> 	/// Return value of expression for given variables
> 	inline void CalcV(HMDT res, HCDT vars[MGL_VS])
> 	{	if(res->GetNN()<mgl_omp_thr)	mgl_expr_eval_dat(ex, res, vars);
> 		else	mgl_expr_eval_omp(ex, res, vars);	}
diff -r 8.0.1/define.h 8.0.3/define.h
182a183,194
> #ifndef M_SQRT2
> #define M_SQRT2 1.4142135623730950488
> #endif
> #ifndef M_SQRT3
> #define M_SQRT3 1.7320508075688772935
> #endif
> #ifndef M_SQRT5
> #define M_SQRT5 2.2360679774997896964
> #endif
> #ifndef M_SQRT7
> #define M_SQRT7 2.6457513110645905905
> #endif
279c291
< #define MGL_TICKS_SKIP		0x00000100 	///< Allow ticks rotation
---
> #define MGL_TICKS_SKIP		0x00000100 	///< Allow ticks skipping
315c327
< inline int mgl_sign(double a)	{	return a<0?-1:1;	}
---
> inline int mgl_sign(double a)	{	return a<0?-1:(a>0?1:0);	}
Nur in 8.0.1/: dllexport.h.
diff -r 8.0.1/evalc.h 8.0.3/evalc.h
26,27c26,27
< /// Class for evaluating formula specified by the string
< class MGL_EXPORT mglFormulaC					// ������ ��� ����� � ���������� ������
---
> /// Class for evaluating complex-valued formula specified by the string
> class MGL_EXPORT mglFormulaC
35a36,39
> 	/// Evaluates the formula for variables var
> 	void CalcV(HADT res, HCDT var[MGL_VS]) const;
> 	/// Evaluates the formula for variables var (OpenMP-based)
> 	void CalcVomp(HADT res, HCDT var[MGL_VS]) const;
diff -r 8.0.1/eval.h 8.0.3/eval.h
39a40,43
> 	/// Evaluates the formula for variables var
> 	void CalcV(HMDT res, HCDT var[MGL_VS]) const;
> 	/// Evaluates the formula for variables var (OpenMP-based)
> 	void CalcVomp(HMDT res, HCDT var[MGL_VS]) const;
Nur in 8.0.3/: fltk.h.
diff -r 8.0.1/font.h 8.0.3/font.h
30c30
< #define MGL_FONT_OLINE		0x08000000	// This value is used binary
---
> #define MGL_FONT_OLINE		0x08000000
36c36,38
< #define MGL_FONT_MASK		0x00ffffff
---
> #define MGL_FONT_MASK		0x000fffff	// NOTE: really, only 0xffff range is used due to WIN32 compatibility and FTGL limitation for the generated fonts
> #define MGL_FACE_FACTOR		0x00100000
> #define MGL_FACE_MASK		0x00f00000	// Range to font face (up to 16 font faces can be used simultaneously)
Nur in 8.0.3/: glut.h.
diff -r 8.0.1/mgl.h 8.0.3/mgl.h
67a68,76
> 	/// Set pointer to internal HMGL object or create new if NULL
> 	inline void SetGraph(HMGL graph)
> 	{
> 		if(mgl_use_graph(gr,-1)<1)	mgl_delete_graph(gr);
> 		if(graph)
> 		{	gr = graph;		mgl_use_graph(gr,1);	}
> 		else
> 		{	gr=mgl_create_graph(600, 400);	}
> 	}
149c158,159
< 	inline void CopyFont(const mglGraph *GR)	{	mgl_copy_font(gr, GR->gr);}
---
> 	inline void CopyFont(const mglGraph *g)	{	mgl_copy_font(gr, g->gr);}
> 	inline void CopyFont(const mglGraph &g)	{	mgl_copy_font(gr, g.gr);}
583a594,595
> 	inline void Combine(const mglGraph &g)	{	mgl_combine_gr(gr,g.gr);	}
> 	inline void Combine(const HMGL g)		{	mgl_combine_gr(gr,g);	}
2310a2323,2324
> 	/** Parameter pos set line number in the script for program flow commands. 
> 	  * Return values: 0 - OK, 1 - wrong arguments, 2 - wrong command, 3 - string too long, 4 -- unclosed string. */
2314a2329,2332
> 	inline int Parse(mglGraph &gr, const char *str, int pos)
> 	{	return mgl_parse_line(gr.Self(), pr, str, pos);	}
> 	inline int Parse(mglGraph &gr, const wchar_t *str, int pos)
> 	{	return mgl_parse_linew(gr.Self(), pr, str, pos);	}
2319a2338,2341
> 	inline void Execute(mglGraph &gr, const char *str)
> 	{	mgl_parse_text(gr.Self(), pr, str);	}
> 	inline void Execute(mglGraph &gr, const wchar_t *str)
> 	{	mgl_parse_textw(gr.Self(), pr, str);	}
2322a2345,2346
> 	inline void Execute(mglGraph &gr, FILE *fp, bool print=false)
> 	{	mgl_parse_file(gr.Self(), pr, fp, print);	}
diff -r 8.0.1/mgl_pas.pas 8.0.3/mgl_pas.pas
1568a1569,1572
> {$IFDEF MSWINDOWS}
> //*****************************************************************************/
> // Delphi - specific
> //*****************************************************************************/
1572c1576,1577
< {$IFDEF Linux}
---
> procedure mgl_draw_on_canvas(gr: HMGL; width, height: integer; canvas: TCanvas; switchXY: boolean = false);
> 
1574d1578
< {$ENDIF}
1588,1599d1591
< 
< 
< 
< {$IFDEF MSWINDOWS}
< //*****************************************************************************/
< // Delphi - specific
< //*****************************************************************************/
< 
< procedure mgl_draw_on_canvas(gr: HMGL; width, height: integer; canvas: TCanvas; switchXY: boolean = false);
< 
< implementation
< 
diff -r 8.0.1/pde.h 8.0.3/pde.h
61c61
< /// Saves result of ODE solving of n equations with right part func and initial conditions x0 over time interval [0,tmax] with time step dt
---
> /// Saves result of ODE solving of n equations with right part func and initial conditions x0 over time interval [0,tmax] with time step dt.
63c63
< /// Saves result of ODE solving for var variables with right part func (separated by ';') and initial conditions x0 over time interval [0,tmax] with time step dt
---
> /// Saves result of ODE solving for var variables with right part func (separated by ';') and initial conditions x0 over time interval [0,tmax] with time step dt.
65c65,67
< /// Saves result of ODE solving for var complex variables with right part func (separated by ';') and initial conditions x0 over time interval [0,tmax] with time step dt
---
> /// Saves result of ODE solving for var variables with right part func (separated by ';') and initial conditions x0 over time interval [0,tmax] with time step dt. Functions jump are called each steps to handle special conditions (like reflection at boundary).
> HMDT MGL_EXPORT mgl_ode_solve_str_b(const char *func, const char *var, HCDT x0, mreal dt, mreal tmax, const char *jump);
> /// Saves result of ODE solving for var complex variables with right part func (separated by ';') and initial conditions x0 over time interval [0,tmax] with time step dt.
67c69,71
< /// Saves result of ODE solving of n*m equations for m variables var with right part func (separated by ';') and initial conditions x0 over time interval [0,tmax] with time step dt
---
> /// Saves result of ODE solving for var complex variables with right part func (separated by ';') and initial conditions x0 over time interval [0,tmax] with time step dt. Functions jump are called each steps to handle special conditions (like reflection at boundary).
> HADT MGL_EXPORT mgl_ode_solve_str_cb(const char *func, const char *var, HCDT x0, mreal dt, mreal tmax, const char *jump);
> /// Saves result of ODE solving of n*m equations for m variables var with right part func (separated by ';') and initial conditions x0 over time interval [0,tmax] with time step dt.
69c73
< /// Saves result of ODE solving of n*m equations for m variables var with right part func (separated by ';') and initial conditions x0 over time interval [0,tmax] with time step dt
---
> /// Saves result of ODE solving of n*m equations for m variables var with right part func (separated by ';') and initial conditions x0 over time interval [0,tmax] with time step dt.
71,73c75,77
< /// Saves result of ODE solving of n equations with right part func and initial conditions x0 over time interval [0,tmax] with time step dt. Function bord (if not NULL) is called each time step to apply border reflection.
< HMDT MGL_EXPORT mgl_ode_solve_ex(void (*func)(const mreal *x, mreal *dx, void *par), int n, const mreal *x0, mreal dt, mreal tmax, void *par, void (*bord)(mreal *x, const mreal *xp, void *par));
< /// Finds ray with starting point r0, p0 (and prepares ray data for mgl_qo2d_solve)
---
> /// Saves result of ODE solving of n equations with right part func and initial conditions x0 over time interval [0,tmax] with time step dt. Function jump (if not NULL) is called each time step to apply border reflection.
> HMDT MGL_EXPORT mgl_ode_solve_ex(void (*func)(const mreal *x, mreal *dx, void *par), int n, const mreal *x0, mreal dt, mreal tmax, void *par, void (*jump)(mreal *x, const mreal *xp, void *par));
> /// Finds ray with starting point r0, p0 (and prepares ray data for mgl_qo2d_solve).
Nur in 8.0.3/: qmathgl.h.
Nur in 8.0.3/: qt.h.
Nur in 8.0.3/: window.h.
Nur in 8.0.3/: wx.h.
