
*******************************************************************************
after parsing
InitScene;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (58,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
   (statementn, resultdef = <nil>, pos = (60,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (60,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (loadn, resultdef = TCylinder = "TCylinder", pos = (60,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = CYLINDER
         )
         (calln, resultdef = TCylinder = "TCylinder", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            proc = constructor Create(<TCylinder>;<Class Of TCylinder>);
            methodpointer =
            (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TCylinder", pos = (60,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               (typen, resultdef = TCylinder = "TCylinder", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               )
            )
            left =
            (callparan, resultdef = <nil>, pos = (60,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               (nothingn, resultdef = $void = "untyped", pos = (60,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               )

            )
            (callparan, resultdef = <nil>, pos = (60,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               (nothingn, resultdef = $void = "untyped", pos = (60,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               )

            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (61,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (61,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty], cmplx = 255
         proc = SetSektoren(<TBasisTriangleVAO>;LongInt);
         methodpointer =
         (loadn, resultdef = TCylinder = "TCylinder", pos = (61,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = CYLINDER
         )
         left =
         (callparan, resultdef = LongInt = "LongInt", pos = (61,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (61,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 3
            )

         )
         (callparan, resultdef = <nil>, pos = (61,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (61,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (62,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (62,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = WriteVertex(<TCylinder>);
         methodpointer =
         (loadn, resultdef = TCylinder = "TCylinder", pos = (62,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = CYLINDER
         )
         left =
         (callparan, resultdef = <nil>, pos = (62,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (62,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (64,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (64,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Scale(<TCamera>;Single);
         methodpointer =
         (subscriptn, resultdef = TCamera = "TCamera", pos = (64,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
            (loadn, resultdef = TOpenGL = "TOpenGL", pos = (64,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = OPENGL
            )
         )
         left =
         (callparan, resultdef = Single = "Single", pos = (64,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (realconstn, resultdef = Single = "Single", pos = (64,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
               value =  2.00000002980232238770E-0001            )

         )
         (callparan, resultdef = <nil>, pos = (64,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (64,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (67,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (67,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty], cmplx = 255
         proc = SetColor(<TControl>;TGraphicsColor);
         methodpointer =
         (loadn, resultdef = TForm1 = "TForm1", pos = (67,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = self
         )
         left =
         (callparan, resultdef = TGraphicsColor = "LongInt", pos = (67,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = TGraphicsColor = "LongInt", pos = (67,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = BkColorRGB(<TBuffer>):LongInt;
               methodpointer =
               (loadn, resultdef = TOpenGL = "TOpenGL", pos = (67,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  nil
                  symbol = OPENGL
               )
               left =
               (callparan, resultdef = <nil>, pos = (67,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (nothingn, resultdef = $void = "untyped", pos = (67,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  )

               )
            )

         )
         (callparan, resultdef = <nil>, pos = (67,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (67,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
InitScene;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
   (statementn, resultdef = <nil>, pos = (60,31), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (60,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (loadn, resultdef = TCylinder = "TCylinder", pos = (60,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
            nil
            symbol = CYLINDER
         )
         (calln, resultdef = TCylinder = "TCylinder", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
            proc = constructor Create(<TCylinder>;<Class Of TCylinder>);
            methodpointer =
            (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TCylinder", pos = (60,15), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
               (typen, resultdef = TCylinder = "TCylinder", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               )
            )
            left =
            (callparan, resultdef = <nil>, pos = (60,31), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
               (pointerconstn, resultdef = Pointer = "^untyped", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                  value = $0000000000000001
               )

            )
            (callparan, resultdef = <nil>, pos = (60,31), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
               (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TCylinder", pos = (60,15), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                  (typen, resultdef = TCylinder = "TCylinder", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  )
               )

            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (61,25), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (61,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_isproperty], cmplx = 255
         proc = SetSektoren(<TBasisTriangleVAO>;LongInt);
         methodpointer =
         (loadn, resultdef = TCylinder = "TCylinder", pos = (61,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = CYLINDER
         )
         left =
         (callparan, resultdef = <nil>, pos = (61,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TCylinder = "TCylinder", pos = (61,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = CYLINDER
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (61,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
            (ordconstn, resultdef = LongInt = "LongInt", pos = (61,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 3
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (62,23), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (62,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = WriteVertex(<TCylinder>);
         methodpointer =
         (loadn, resultdef = TCylinder = "TCylinder", pos = (62,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = CYLINDER
         )
         left =
         (callparan, resultdef = <nil>, pos = (62,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TCylinder = "TCylinder", pos = (62,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = CYLINDER
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (64,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (64,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Scale(<TCamera>;Single);
         methodpointer =
         (subscriptn, resultdef = TCamera = "TCamera", pos = (64,16), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 3
            (loadn, resultdef = TOpenGL = "TOpenGL", pos = (64,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = OPENGL
            )
         )
         left =
         (callparan, resultdef = <nil>, pos = (64,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 4
            (subscriptn, resultdef = TCamera = "TCamera", pos = (64,16), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 3
               (loadn, resultdef = TOpenGL = "TOpenGL", pos = (64,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                  nil
                  symbol = OPENGL
               )
            )

         )
         (callparan, resultdef = Single = "Single", pos = (64,26), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 2
            (realconstn, resultdef = Single = "Single", pos = (64,26), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
               value =  2.00000002980232238770E-0001            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (67,29), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (67,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_isproperty], cmplx = 255
         proc = SetColor(<TControl>;TGraphicsColor);
         methodpointer =
         (loadn, resultdef = TForm1 = "TForm1", pos = (67,9), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = self
         )
         left =
         (callparan, resultdef = TGraphicsColor = "LongInt", pos = (67,29), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 255
            (calln, resultdef = TGraphicsColor = "LongInt", pos = (67,29), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
               proc = BkColorRGB(<TBuffer>):LongInt;
               methodpointer =
               (loadn, resultdef = TOpenGL = "TOpenGL", pos = (67,12), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                  nil
                  symbol = OPENGL
               )
               left =
               (callparan, resultdef = <nil>, pos = (67,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                  (loadn, resultdef = TOpenGL = "TOpenGL", pos = (67,12), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                     nil
                     symbol = OPENGL
                  )

               )
            )

         )
         (callparan, resultdef = <nil>, pos = (67,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
            (loadn, resultdef = TForm1 = "TForm1", pos = (67,9), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = self
            )

         )
      )

   )
)

*******************************************************************************
right before code generation
InitScene;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
               (statementn, resultdef = <nil>, pos = (60,31), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (60,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (loadn, resultdef = TCylinder = "TCylinder", pos = (60,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = CYLINDER
                     )
                     (calln, resultdef = TCylinder = "TCylinder", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                        proc = constructor Create(<TCylinder>;<Class Of TCylinder>);
                        methodpointer =
                        (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TCylinder", pos = (60,15), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                           (typen, resultdef = TCylinder = "TCylinder", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                           )
                        )
                        left =
                        (callparan, resultdef = <nil>, pos = (60,31), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                           (pointerconstn, resultdef = Pointer = "^untyped", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                              value = $0000000000000001
                           )

                        )
                        (callparan, resultdef = <nil>, pos = (60,31), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                           (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TCylinder", pos = (60,15), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                              (typen, resultdef = TCylinder = "TCylinder", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              )
                           )

                        )
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (61,25), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (61,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_isproperty], cmplx = 255
                     proc = SetSektoren(<TBasisTriangleVAO>;LongInt);
                     methodpointer =
                     (loadn, resultdef = TCylinder = "TCylinder", pos = (61,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = CYLINDER
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (61,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TCylinder = "TCylinder", pos = (61,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = CYLINDER
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (61,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (61,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 3
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (62,23), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (62,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = WriteVertex(<TCylinder>);
                     methodpointer =
                     (loadn, resultdef = TCylinder = "TCylinder", pos = (62,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = CYLINDER
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (62,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TCylinder = "TCylinder", pos = (62,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = CYLINDER
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (64,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (64,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Scale(<TCamera>;Single);
                     methodpointer =
                     (subscriptn, resultdef = TCamera = "TCamera", pos = (64,16), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 3
                        (loadn, resultdef = TOpenGL = "TOpenGL", pos = (64,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = OPENGL
                        )
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (64,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 4
                        (subscriptn, resultdef = TCamera = "TCamera", pos = (64,16), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 3
                           (loadn, resultdef = TOpenGL = "TOpenGL", pos = (64,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                              nil
                              symbol = OPENGL
                           )
                        )

                     )
                     (callparan, resultdef = Single = "Single", pos = (64,26), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 2
                        (realconstn, resultdef = Single = "Single", pos = (64,26), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                           value =  2.00000002980232238770E-0001                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (67,29), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (67,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_isproperty], cmplx = 255
                     proc = SetColor(<TControl>;TGraphicsColor);
                     methodpointer =
                     (loadn, resultdef = TForm1 = "TForm1", pos = (67,9), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = self
                     )
                     left =
                     (callparan, resultdef = TGraphicsColor = "LongInt", pos = (67,29), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 255
                        (calln, resultdef = TGraphicsColor = "LongInt", pos = (67,29), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                           proc = BkColorRGB(<TBuffer>):LongInt;
                           methodpointer =
                           (loadn, resultdef = TOpenGL = "TOpenGL", pos = (67,12), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                              nil
                              symbol = OPENGL
                           )
                           left =
                           (callparan, resultdef = <nil>, pos = (67,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                              (loadn, resultdef = TOpenGL = "TOpenGL", pos = (67,12), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                 nil
                                 symbol = OPENGL
                              )

                           )
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (67,3), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
                        (loadn, resultdef = TForm1 = "TForm1", pos = (67,9), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = self
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (68,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (68,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (68,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (68,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (68,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (68,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
      (blockn, resultdef = $void = "untyped", pos = (58,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
)

*******************************************************************************
after parsing
RenderScene;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (71,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
   (statementn, resultdef = <nil>, pos = (72,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (72,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Clear(<TOpenGL>);
         methodpointer =
         (loadn, resultdef = TOpenGL = "TOpenGL", pos = (72,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = OPENGL
         )
         left =
         (callparan, resultdef = <nil>, pos = (72,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (72,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (90,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (73,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (statementn, resultdef = <nil>, pos = (73,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (73,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (73,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (tempcreaten, resultdef = $void = "untyped", pos = (73,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               size = 8, temptypedef = TCamera = "TCamera", tempinfo = $00007F2B8E308BC0
               [ti_may_be_in_reg]
               tempinit =
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (73,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (assignn, resultdef = $void = "untyped", pos = (73,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 5
               (temprefn, resultdef = TCamera = "TCamera", pos = (73,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                  temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg])
               )
               (subscriptn, resultdef = TCamera = "TCamera", pos = (73,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                  (loadn, resultdef = TOpenGL = "TOpenGL", pos = (73,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = OPENGL
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (90,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (74,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (statementn, resultdef = <nil>, pos = (78,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (78,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                     (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (78,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                        (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg])
                        )
                     )
                     (loadn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (78,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = PROMATRIX
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (79,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (79,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = RotateA(<var Tmat4x4>;Single);
                     methodpointer =
                     (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (79,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg])
                        )
                     )
                     left =
                     (callparan, resultdef = Single = "Single", pos = (79,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        (typeconvn, resultdef = Single = "Single", pos = (79,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255, convtype = tc_real_2_real, convnodeflags = []
                           (muln, resultdef = Extended = "Extended", pos = (79,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              (unaryminusn, resultdef = Extended = "Extended", pos = (79,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                 (inlinen, resultdef = Extended = "Extended", pos = (79,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, inlinenumber = in_pi_real
                                    nil
                                 )
                              )
                              (realconstn, resultdef = Extended = "Extended", pos = (79,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                 value =  2.50000000000000000000E-0001                              )
                           )
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (79,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (nothingn, resultdef = $void = "untyped", pos = (79,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (80,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = Translate(<var Tmat4x4>;Single;Single;Single);
                     methodpointer =
                     (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg])
                        )
                     )
                     left =
                     (callparan, resultdef = Single = "Single", pos = (80,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                        (realconstn, resultdef = Single = "Single", pos = (80,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                           value =  0.00000000000000000000E+0000                        )

                     )
                     (callparan, resultdef = Single = "Single", pos = (80,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                        (realconstn, resultdef = Single = "Single", pos = (80,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                           value =  0.00000000000000000000E+0000                        )

                     )
                     (callparan, resultdef = Single = "Single", pos = (80,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                        (realconstn, resultdef = Single = "Single", pos = (80,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                           value =  0.00000000000000000000E+0000                        )

                     )
                     (callparan, resultdef = <nil>, pos = (80,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (nothingn, resultdef = $void = "untyped", pos = (80,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (81,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (81,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty], cmplx = 255
                     proc = SetColor(<TMonoColorVAO>;TVector4f);
                     methodpointer =
                     (loadn, resultdef = TCylinder = "TCylinder", pos = (81,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = CYLINDER
                     )
                     left =
                     (callparan, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        (calln, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                           proc = vec4(<var TVector4f>;Single;Single;Single;Single):Array[0..3] Of Single;
                           left =
                           (callparan, resultdef = Single = "Single", pos = (81,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                              (realconstn, resultdef = Single = "Single", pos = (81,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                 value =  1.00000000000000000000E+0000                              )

                           )
                           (callparan, resultdef = Single = "Single", pos = (81,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                              (realconstn, resultdef = Single = "Single", pos = (81,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                 value =  0.00000000000000000000E+0000                              )

                           )
                           (callparan, resultdef = Single = "Single", pos = (81,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                              (realconstn, resultdef = Single = "Single", pos = (81,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                 value =  1.00000000000000000000E+0000                              )

                           )
                           (callparan, resultdef = Single = "Single", pos = (81,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                              (realconstn, resultdef = Single = "Single", pos = (81,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                 value =  1.00000000000000000000E+0000                              )

                           )
                           (callparan, resultdef = <nil>, pos = (81,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              (nothingn, resultdef = $void = "untyped", pos = (81,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                              )

                           )
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (81,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (nothingn, resultdef = $void = "untyped", pos = (81,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (82,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (82,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = Draw(<TMonoColorVAO>);
                     methodpointer =
                     (loadn, resultdef = TCylinder = "TCylinder", pos = (82,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = CYLINDER
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (82,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (nothingn, resultdef = $void = "untyped", pos = (82,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (83,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = Translate(<var Tmat4x4>;Single;Single;Single);
                     methodpointer =
                     (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg])
                        )
                     )
                     left =
                     (callparan, resultdef = Single = "Single", pos = (83,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                        (realconstn, resultdef = Single = "Single", pos = (83,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                           value =  0.00000000000000000000E+0000                        )

                     )
                     (callparan, resultdef = Single = "Single", pos = (83,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                        (realconstn, resultdef = Single = "Single", pos = (83,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                           value =  0.00000000000000000000E+0000                        )

                     )
                     (callparan, resultdef = Single = "Single", pos = (83,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                        (realconstn, resultdef = Single = "Single", pos = (83,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                           value =  4.00000000000000000000E+0000                        )

                     )
                     (callparan, resultdef = <nil>, pos = (83,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (nothingn, resultdef = $void = "untyped", pos = (83,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (84,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (84,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = Scale(<var Tmat4x4>;Single);
                     methodpointer =
                     (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (84,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg])
                        )
                     )
                     left =
                     (callparan, resultdef = Single = "Single", pos = (84,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                        (realconstn, resultdef = Single = "Single", pos = (84,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                           value =  1.50000000000000000000E+0000                        )

                     )
                     (callparan, resultdef = <nil>, pos = (84,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (nothingn, resultdef = $void = "untyped", pos = (84,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (85,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (85,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = RotateA(<var Tmat4x4>;Single);
                     methodpointer =
                     (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (85,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg])
                        )
                     )
                     left =
                     (callparan, resultdef = Single = "Single", pos = (85,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                        (typeconvn, resultdef = Single = "Single", pos = (85,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2, convtype = tc_real_2_real, convnodeflags = []
                           (muln, resultdef = Extended = "Extended", pos = (85,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                              (inlinen, resultdef = Extended = "Extended", pos = (85,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, inlinenumber = in_pi_real
                                 nil
                              )
                              (realconstn, resultdef = Extended = "Extended", pos = (85,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                 value =  2.50000000000000000000E-0001                              )
                           )
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (85,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (nothingn, resultdef = $void = "untyped", pos = (85,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (86,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (86,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty], cmplx = 255
                     proc = SetColor(<TMonoColorVAO>;TVector4f);
                     methodpointer =
                     (loadn, resultdef = TCylinder = "TCylinder", pos = (86,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = CYLINDER
                     )
                     left =
                     (callparan, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        (calln, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                           proc = vec4(<var TVector4f>;Single;Single;Single;Single):Array[0..3] Of Single;
                           left =
                           (callparan, resultdef = Single = "Single", pos = (86,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                              (realconstn, resultdef = Single = "Single", pos = (86,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                 value =  1.00000000000000000000E+0000                              )

                           )
                           (callparan, resultdef = Single = "Single", pos = (86,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                              (realconstn, resultdef = Single = "Single", pos = (86,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                 value =  1.00000000000000000000E+0000                              )

                           )
                           (callparan, resultdef = Single = "Single", pos = (86,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                              (realconstn, resultdef = Single = "Single", pos = (86,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                 value =  1.00000000000000000000E+0000                              )

                           )
                           (callparan, resultdef = Single = "Single", pos = (86,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                              (realconstn, resultdef = Single = "Single", pos = (86,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                 value =  0.00000000000000000000E+0000                              )

                           )
                           (callparan, resultdef = <nil>, pos = (86,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              (nothingn, resultdef = $void = "untyped", pos = (86,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                              )

                           )
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (86,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (nothingn, resultdef = $void = "untyped", pos = (86,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (87,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (87,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = Draw(<TMonoColorVAO>);
                     methodpointer =
                     (loadn, resultdef = TCylinder = "TCylinder", pos = (87,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = CYLINDER
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (87,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (nothingn, resultdef = $void = "untyped", pos = (87,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (89,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (89,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = SwapBuffers(<TOpenGL>);
                     methodpointer =
                     (loadn, resultdef = TOpenGL = "TOpenGL", pos = (89,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = OPENGL
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (89,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (nothingn, resultdef = $void = "untyped", pos = (89,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (90,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            (tempdeleten, resultdef = $void = "untyped", pos = (90,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               release_to_normal: FALSE, temptypedef = TCamera = "TCamera", temptype = tt_persistent, tempinfo = $00007F2B8E308BC0
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
RenderScene;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
   (statementn, resultdef = <nil>, pos = (72,15), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (72,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Clear(<TOpenGL>);
         methodpointer =
         (loadn, resultdef = TOpenGL = "TOpenGL", pos = (72,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = OPENGL
         )
         left =
         (callparan, resultdef = <nil>, pos = (72,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TOpenGL = "TOpenGL", pos = (72,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = OPENGL
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (90,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (73,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (73,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (73,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (73,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (tempcreaten, resultdef = $void = "untyped", pos = (73,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               size = 8, temptypedef = TCamera = "TCamera", tempinfo = $00007F2B8E308BC0
               [ti_may_be_in_reg,ti_addr_taken]
               tempinit =
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (73,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (assignn, resultdef = $void = "untyped", pos = (73,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 5
               (temprefn, resultdef = TCamera = "TCamera", pos = (73,22), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                  temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
               )
               (subscriptn, resultdef = TCamera = "TCamera", pos = (73,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 3
                  (loadn, resultdef = TOpenGL = "TOpenGL", pos = (73,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                     nil
                     symbol = OPENGL
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (90,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (74,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (statementn, resultdef = <nil>, pos = (78,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (78,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                     (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (78,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                        (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                        )
                     )
                     (loadn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (78,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = PROMATRIX
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (79,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (79,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = RotateA(<var Tmat4x4>;Single);
                     methodpointer =
                     (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (79,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                        )
                     )
                     left =
                     (callparan, resultdef = Single = "Single", pos = (79,33), loc = LOC_INVALID, expectloc = LOC_MMREG, flags = [], cmplx = 255
                        (typeconvn, resultdef = Single = "Single", pos = (79,33), loc = LOC_INVALID, expectloc = LOC_MMREG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_real_2_real, convnodeflags = []
                           (muln, resultdef = Extended = "Extended", pos = (79,33), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 255
                              (unaryminusn, resultdef = Extended = "Extended", pos = (79,26), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 255
                                 (inlinen, resultdef = Extended = "Extended", pos = (79,30), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 1, inlinenumber = in_pi_real
                                    nil
                                 )
                              )
                              (realconstn, resultdef = Extended = "Extended", pos = (79,32), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                 value =  2.50000000000000000000E-0001                              )
                           )
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (79,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                        (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (79,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken], cmplx = 1
                           (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                              temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (80,36), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 6
                     (statementn, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                        (tempcreaten, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           size = 4, temptypedef = LongInt = "LongInt", tempinfo = $00007F2B8E308C40
                           [ti_may_be_in_reg]
                           tempinit =
                           nil
                        )

                     )
                     (statementn, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                        (blockn, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_block_with_exit], cmplx = 6
                           (statementn, resultdef = <nil>, pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                              (assignn, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                 (vecn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                    (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                          (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                             temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                          )
                                       )
                                       (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 3
                                       )
                                    )
                                    (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 0
                                    )
                                 )
                                 (addn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 2
                                    (vecn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                          (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                             (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                             )
                                          )
                                          (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 3
                                          )
                                       )
                                       (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 0
                                       )
                                    )
                                    (realconstn, resultdef = Single = "Single", pos = (80,29), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                       value =  0.00000000000000000000E+0000                                    )
                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                              (assignn, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                 (vecn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                    (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                          (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                             temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                          )
                                       )
                                       (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 3
                                       )
                                    )
                                    (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 1
                                    )
                                 )
                                 (addn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 2
                                    (vecn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                          (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                             (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                             )
                                          )
                                          (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 3
                                          )
                                       )
                                       (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 1
                                       )
                                    )
                                    (realconstn, resultdef = Single = "Single", pos = (80,32), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                       value =  0.00000000000000000000E+0000                                    )
                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 2
                              (assignn, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                 (vecn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                    (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                          (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                             temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                          )
                                       )
                                       (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 3
                                       )
                                    )
                                    (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 2
                                    )
                                 )
                                 (addn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 2
                                    (vecn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                          (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                             (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                             )
                                          )
                                          (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 3
                                          )
                                       )
                                       (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 2
                                       )
                                    )
                                    (realconstn, resultdef = Single = "Single", pos = (80,35), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                       value =  0.00000000000000000000E+0000                                    )
                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                        (tempdeleten, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           release_to_normal: FALSE, temptypedef = LongInt = "LongInt", temptype = tt_persistent, tempinfo = $00007F2B8E308C40
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (81,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_isproperty], cmplx = 255
                     proc = SetColor(<TMonoColorVAO>;TVector4f);
                     methodpointer =
                     (loadn, resultdef = TCylinder = "TCylinder", pos = (81,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = CYLINDER
                     )
                     left =
                     (callparan, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 10
                        (blockn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 9
                           (statementn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 9
                              (tempcreaten, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_is_funcret], cmplx = 0
                                 size = 16, temptypedef = TVector4f = "Array[0..3] Of Single", tempinfo = $00007F2B8E308D40
                                 [ti_nofini]
                                 tempinit =
                                 nil
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 9
                              (blockn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_block_with_exit], cmplx = 8
                                 (statementn, resultdef = <nil>, pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 8
                                    (assignn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                       (vecn, resultdef = Single = "Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                          (typeconvn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                             (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_is_funcret], cmplx = 1
                                                temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308D40 flags = [ti_nofini])
                                             )
                                          )
                                          (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 0
                                          )
                                       )
                                       (realconstn, resultdef = Single = "Single", pos = (81,29), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                          value =  1.00000000000000000000E+0000                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                                    (assignn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                       (vecn, resultdef = Single = "Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                          (typeconvn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                             (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_is_funcret], cmplx = 1
                                                temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308D40 flags = [ti_nofini])
                                             )
                                          )
                                          (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 1
                                          )
                                       )
                                       (realconstn, resultdef = Single = "Single", pos = (81,32), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                          value =  1.00000000000000000000E+0000                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                                    (assignn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                       (vecn, resultdef = Single = "Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                          (typeconvn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                             (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_is_funcret], cmplx = 1
                                                temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308D40 flags = [ti_nofini])
                                             )
                                          )
                                          (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 2
                                          )
                                       )
                                       (realconstn, resultdef = Single = "Single", pos = (81,35), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                          value =  0.00000000000000000000E+0000                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 2
                                    (assignn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                       (vecn, resultdef = Single = "Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                          (typeconvn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                             (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_is_funcret], cmplx = 1
                                                temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308D40 flags = [ti_nofini])
                                             )
                                          )
                                          (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 3
                                          )
                                       )
                                       (realconstn, resultdef = Single = "Single", pos = (81,38), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                          value =  1.00000000000000000000E+0000                                       )
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 1
                              (tempdeleten, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                 release_to_normal: TRUE, temptypedef = TVector4f = "Array[0..3] Of Single", temptype = tt_persistent, tempinfo = $00007F2B8E308D40
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                              (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_is_funcret], cmplx = 1
                                 temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308D40 flags = [ti_nofini])
                              )

                           )
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (81,20), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TCylinder = "TCylinder", pos = (81,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = CYLINDER
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (82,18), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (82,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Draw(<TMonoColorVAO>);
                     methodpointer =
                     (loadn, resultdef = TCylinder = "TCylinder", pos = (82,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = CYLINDER
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (82,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TCylinder = "TCylinder", pos = (82,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = CYLINDER
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (83,36), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 6
                     (statementn, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                        (tempcreaten, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           size = 4, temptypedef = LongInt = "LongInt", tempinfo = $00007F2B8E308CC0
                           [ti_may_be_in_reg]
                           tempinit =
                           nil
                        )

                     )
                     (statementn, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                        (blockn, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_block_with_exit], cmplx = 6
                           (statementn, resultdef = <nil>, pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                              (assignn, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                 (vecn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                    (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                          (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                             temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                          )
                                       )
                                       (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 3
                                       )
                                    )
                                    (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 0
                                    )
                                 )
                                 (addn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 2
                                    (vecn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                          (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                             (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                             )
                                          )
                                          (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 3
                                          )
                                       )
                                       (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 0
                                       )
                                    )
                                    (realconstn, resultdef = Single = "Single", pos = (83,29), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                       value =  4.00000000000000000000E+0000                                    )
                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                              (assignn, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                 (vecn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                    (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                          (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                             temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                          )
                                       )
                                       (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 3
                                       )
                                    )
                                    (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 1
                                    )
                                 )
                                 (addn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 2
                                    (vecn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                          (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                             (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                             )
                                          )
                                          (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 3
                                          )
                                       )
                                       (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 1
                                       )
                                    )
                                    (realconstn, resultdef = Single = "Single", pos = (83,32), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                       value =  0.00000000000000000000E+0000                                    )
                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 2
                              (assignn, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                 (vecn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                    (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                          (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                             temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                          )
                                       )
                                       (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 3
                                       )
                                    )
                                    (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 2
                                    )
                                 )
                                 (addn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 2
                                    (vecn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                          (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                             (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                             )
                                          )
                                          (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 3
                                          )
                                       )
                                       (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 2
                                       )
                                    )
                                    (realconstn, resultdef = Single = "Single", pos = (83,35), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                       value =  0.00000000000000000000E+0000                                    )
                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                        (tempdeleten, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           release_to_normal: FALSE, temptypedef = LongInt = "LongInt", temptype = tt_persistent, tempinfo = $00007F2B8E308CC0
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (84,28), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (84,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Scale(<var Tmat4x4>;Single);
                     methodpointer =
                     (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (84,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                        )
                     )
                     left =
                     (callparan, resultdef = Single = "Single", pos = (84,27), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 2
                        (realconstn, resultdef = Single = "Single", pos = (84,27), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                           value =  1.50000000000000000000E+0000                        )

                     )
                     (callparan, resultdef = <nil>, pos = (84,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                        (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (84,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken], cmplx = 1
                           (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                              temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (85,33), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (85,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = RotateA(<var Tmat4x4>;Single);
                     methodpointer =
                     (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (85,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                        )
                     )
                     left =
                     (callparan, resultdef = Single = "Single", pos = (85,32), loc = LOC_INVALID, expectloc = LOC_MMREG, flags = [], cmplx = 2
                        (typeconvn, resultdef = Single = "Single", pos = (85,32), loc = LOC_INVALID, expectloc = LOC_MMREG, flags = [nf_pass1_done], cmplx = 2, convtype = tc_real_2_real, convnodeflags = []
                           (muln, resultdef = Extended = "Extended", pos = (85,32), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 2
                              (inlinen, resultdef = Extended = "Extended", pos = (85,29), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 1, inlinenumber = in_pi_real
                                 nil
                              )
                              (realconstn, resultdef = Extended = "Extended", pos = (85,31), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                 value =  2.50000000000000000000E-0001                              )
                           )
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (85,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                        (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (85,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken], cmplx = 1
                           (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                              temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (86,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_isproperty], cmplx = 255
                     proc = SetColor(<TMonoColorVAO>;TVector4f);
                     methodpointer =
                     (loadn, resultdef = TCylinder = "TCylinder", pos = (86,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = CYLINDER
                     )
                     left =
                     (callparan, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 10
                        (blockn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 9
                           (statementn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 9
                              (tempcreaten, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_is_funcret], cmplx = 0
                                 size = 16, temptypedef = TVector4f = "Array[0..3] Of Single", tempinfo = $00007F2B8E308E40
                                 [ti_nofini]
                                 tempinit =
                                 nil
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 9
                              (blockn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_block_with_exit], cmplx = 8
                                 (statementn, resultdef = <nil>, pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 8
                                    (assignn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                       (vecn, resultdef = Single = "Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                          (typeconvn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                             (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_is_funcret], cmplx = 1
                                                temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308E40 flags = [ti_nofini])
                                             )
                                          )
                                          (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 0
                                          )
                                       )
                                       (realconstn, resultdef = Single = "Single", pos = (86,29), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                          value =  0.00000000000000000000E+0000                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                                    (assignn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                       (vecn, resultdef = Single = "Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                          (typeconvn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                             (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_is_funcret], cmplx = 1
                                                temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308E40 flags = [ti_nofini])
                                             )
                                          )
                                          (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 1
                                          )
                                       )
                                       (realconstn, resultdef = Single = "Single", pos = (86,32), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                          value =  1.00000000000000000000E+0000                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                                    (assignn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                       (vecn, resultdef = Single = "Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                          (typeconvn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                             (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_is_funcret], cmplx = 1
                                                temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308E40 flags = [ti_nofini])
                                             )
                                          )
                                          (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 2
                                          )
                                       )
                                       (realconstn, resultdef = Single = "Single", pos = (86,35), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                          value =  1.00000000000000000000E+0000                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 2
                                    (assignn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                       (vecn, resultdef = Single = "Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                          (typeconvn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                             (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_is_funcret], cmplx = 1
                                                temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308E40 flags = [ti_nofini])
                                             )
                                          )
                                          (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 3
                                          )
                                       )
                                       (realconstn, resultdef = Single = "Single", pos = (86,38), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                          value =  1.00000000000000000000E+0000                                       )
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 1
                              (tempdeleten, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                 release_to_normal: TRUE, temptypedef = TVector4f = "Array[0..3] Of Single", temptype = tt_persistent, tempinfo = $00007F2B8E308E40
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                              (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_is_funcret], cmplx = 1
                                 temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308E40 flags = [ti_nofini])
                              )

                           )
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (86,20), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TCylinder = "TCylinder", pos = (86,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = CYLINDER
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (87,18), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (87,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Draw(<TMonoColorVAO>);
                     methodpointer =
                     (loadn, resultdef = TCylinder = "TCylinder", pos = (87,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = CYLINDER
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (87,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TCylinder = "TCylinder", pos = (87,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = CYLINDER
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (89,23), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (89,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = SwapBuffers(<TOpenGL>);
                     methodpointer =
                     (loadn, resultdef = TOpenGL = "TOpenGL", pos = (89,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = OPENGL
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (89,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TOpenGL = "TOpenGL", pos = (89,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = OPENGL
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (90,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
            (tempdeleten, resultdef = $void = "untyped", pos = (90,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               release_to_normal: FALSE, temptypedef = TCamera = "TCamera", temptype = tt_persistent, tempinfo = $00007F2B8E308BC0
            )

         )
      )

   )
)

*******************************************************************************
right before code generation
RenderScene;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
               (statementn, resultdef = <nil>, pos = (72,15), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (72,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Clear(<TOpenGL>);
                     methodpointer =
                     (loadn, resultdef = TOpenGL = "TOpenGL", pos = (72,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = OPENGL
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (72,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TOpenGL = "TOpenGL", pos = (72,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = OPENGL
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (90,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (73,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (73,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (nothingn, resultdef = $void = "untyped", pos = (73,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (73,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (tempcreaten, resultdef = $void = "untyped", pos = (73,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           size = 8, temptypedef = TCamera = "TCamera", tempinfo = $00007F2B8E308BC0
                           [ti_may_be_in_reg,ti_addr_taken]
                           tempinit =
                           nil
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (73,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (assignn, resultdef = $void = "untyped", pos = (73,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 5
                           (temprefn, resultdef = TCamera = "TCamera", pos = (73,22), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                              temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                           )
                           (subscriptn, resultdef = TCamera = "TCamera", pos = (73,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 3
                              (loadn, resultdef = TOpenGL = "TOpenGL", pos = (73,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                 nil
                                 symbol = OPENGL
                              )
                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (90,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (74,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (statementn, resultdef = <nil>, pos = (78,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (assignn, resultdef = $void = "untyped", pos = (78,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                                 (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (78,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                    )
                                 )
                                 (loadn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (78,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = PROMATRIX
                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (79,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (79,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 proc = RotateA(<var Tmat4x4>;Single);
                                 methodpointer =
                                 (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (79,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                    )
                                 )
                                 left =
                                 (callparan, resultdef = Single = "Single", pos = (79,33), loc = LOC_INVALID, expectloc = LOC_MMREG, flags = [], cmplx = 255
                                    (typeconvn, resultdef = Single = "Single", pos = (79,33), loc = LOC_INVALID, expectloc = LOC_MMREG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_real_2_real, convnodeflags = []
                                       (muln, resultdef = Extended = "Extended", pos = (79,33), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 255
                                          (unaryminusn, resultdef = Extended = "Extended", pos = (79,26), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 255
                                             (inlinen, resultdef = Extended = "Extended", pos = (79,30), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 1, inlinenumber = in_pi_real
                                                nil
                                             )
                                          )
                                          (realconstn, resultdef = Extended = "Extended", pos = (79,32), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                             value =  2.50000000000000000000E-0001                                          )
                                       )
                                    )

                                 )
                                 (callparan, resultdef = <nil>, pos = (79,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                    (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (79,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken], cmplx = 1
                                       (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                          temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                       )
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (80,36), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (blockn, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 6
                                 (statementn, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                                    (tempcreaten, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       size = 4, temptypedef = LongInt = "LongInt", tempinfo = $00007F2B8E308C40
                                       [ti_may_be_in_reg]
                                       tempinit =
                                       nil
                                    )

                                 )
                                 (statementn, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                                    (blockn, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_block_with_exit], cmplx = 6
                                       (statementn, resultdef = <nil>, pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                                          (assignn, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                             (vecn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                                (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                   (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                      (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                         temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                                      )
                                                   )
                                                   (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 3
                                                   )
                                                )
                                                (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                   value = 0
                                                )
                                             )
                                             (addn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 2
                                                (vecn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                      (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                                         )
                                                      )
                                                      (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 3
                                                      )
                                                   )
                                                   (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 0
                                                   )
                                                )
                                                (realconstn, resultdef = Single = "Single", pos = (80,29), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                                   value =  0.00000000000000000000E+0000                                                )
                                             )
                                          )

                                       )
                                       (statementn, resultdef = <nil>, pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                                          (assignn, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                             (vecn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                                (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                   (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                      (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                         temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                                      )
                                                   )
                                                   (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 3
                                                   )
                                                )
                                                (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                   value = 1
                                                )
                                             )
                                             (addn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 2
                                                (vecn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                      (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                                         )
                                                      )
                                                      (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 3
                                                      )
                                                   )
                                                   (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 1
                                                   )
                                                )
                                                (realconstn, resultdef = Single = "Single", pos = (80,32), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                                   value =  0.00000000000000000000E+0000                                                )
                                             )
                                          )

                                       )
                                       (statementn, resultdef = <nil>, pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 2
                                          (assignn, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                             (vecn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                                (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                   (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                      (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                         temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                                      )
                                                   )
                                                   (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 3
                                                   )
                                                )
                                                (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                   value = 2
                                                )
                                             )
                                             (addn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 2
                                                (vecn, resultdef = Single = "Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                      (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                                         )
                                                      )
                                                      (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 3
                                                      )
                                                   )
                                                   (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 2
                                                   )
                                                )
                                                (realconstn, resultdef = Single = "Single", pos = (80,35), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                                   value =  0.00000000000000000000E+0000                                                )
                                             )
                                          )

                                       )
                                    )

                                 )
                                 (statementn, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                    (tempdeleten, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       release_to_normal: FALSE, temptypedef = LongInt = "LongInt", temptype = tt_persistent, tempinfo = $00007F2B8E308C40
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (81,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_isproperty], cmplx = 255
                                 proc = SetColor(<TMonoColorVAO>;TVector4f);
                                 methodpointer =
                                 (loadn, resultdef = TCylinder = "TCylinder", pos = (81,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = CYLINDER
                                 )
                                 left =
                                 (callparan, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 10
                                    (blockn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 9
                                       (statementn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 9
                                          (tempcreaten, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_is_funcret], cmplx = 0
                                             size = 16, temptypedef = TVector4f = "Array[0..3] Of Single", tempinfo = $00007F2B8E308D40
                                             [ti_nofini]
                                             tempinit =
                                             nil
                                          )

                                       )
                                       (statementn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 9
                                          (blockn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_block_with_exit], cmplx = 8
                                             (statementn, resultdef = <nil>, pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 8
                                                (assignn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                                   (vecn, resultdef = Single = "Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                                      (typeconvn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_is_funcret], cmplx = 1
                                                            temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308D40 flags = [ti_nofini])
                                                         )
                                                      )
                                                      (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 0
                                                      )
                                                   )
                                                   (realconstn, resultdef = Single = "Single", pos = (81,29), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                                      value =  1.00000000000000000000E+0000                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                                                (assignn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                                   (vecn, resultdef = Single = "Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                                      (typeconvn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_is_funcret], cmplx = 1
                                                            temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308D40 flags = [ti_nofini])
                                                         )
                                                      )
                                                      (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 1
                                                      )
                                                   )
                                                   (realconstn, resultdef = Single = "Single", pos = (81,32), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                                      value =  1.00000000000000000000E+0000                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                                                (assignn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                                   (vecn, resultdef = Single = "Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                                      (typeconvn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_is_funcret], cmplx = 1
                                                            temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308D40 flags = [ti_nofini])
                                                         )
                                                      )
                                                      (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 2
                                                      )
                                                   )
                                                   (realconstn, resultdef = Single = "Single", pos = (81,35), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                                      value =  0.00000000000000000000E+0000                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 2
                                                (assignn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                                   (vecn, resultdef = Single = "Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                                      (typeconvn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_is_funcret], cmplx = 1
                                                            temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308D40 flags = [ti_nofini])
                                                         )
                                                      )
                                                      (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 3
                                                      )
                                                   )
                                                   (realconstn, resultdef = Single = "Single", pos = (81,38), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                                      value =  1.00000000000000000000E+0000                                                   )
                                                )

                                             )
                                          )

                                       )
                                       (statementn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 1
                                          (tempdeleten, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                             release_to_normal: TRUE, temptypedef = TVector4f = "Array[0..3] Of Single", temptype = tt_persistent, tempinfo = $00007F2B8E308D40
                                          )

                                       )
                                       (statementn, resultdef = $void = "untyped", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                          (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (81,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_is_funcret], cmplx = 1
                                             temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308D40 flags = [ti_nofini])
                                          )

                                       )
                                    )

                                 )
                                 (callparan, resultdef = <nil>, pos = (81,20), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = TCylinder = "TCylinder", pos = (81,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = CYLINDER
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (82,18), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (82,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 proc = Draw(<TMonoColorVAO>);
                                 methodpointer =
                                 (loadn, resultdef = TCylinder = "TCylinder", pos = (82,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = CYLINDER
                                 )
                                 left =
                                 (callparan, resultdef = <nil>, pos = (82,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = TCylinder = "TCylinder", pos = (82,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = CYLINDER
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (83,36), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (blockn, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 6
                                 (statementn, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                                    (tempcreaten, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       size = 4, temptypedef = LongInt = "LongInt", tempinfo = $00007F2B8E308CC0
                                       [ti_may_be_in_reg]
                                       tempinit =
                                       nil
                                    )

                                 )
                                 (statementn, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                                    (blockn, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_block_with_exit], cmplx = 6
                                       (statementn, resultdef = <nil>, pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                                          (assignn, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                             (vecn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                                (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                   (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                      (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                         temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                                      )
                                                   )
                                                   (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 3
                                                   )
                                                )
                                                (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                   value = 0
                                                )
                                             )
                                             (addn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 2
                                                (vecn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                      (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                                         )
                                                      )
                                                      (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 3
                                                      )
                                                   )
                                                   (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 0
                                                   )
                                                )
                                                (realconstn, resultdef = Single = "Single", pos = (83,29), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                                   value =  4.00000000000000000000E+0000                                                )
                                             )
                                          )

                                       )
                                       (statementn, resultdef = <nil>, pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                                          (assignn, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                             (vecn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                                (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                   (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                      (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                         temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                                      )
                                                   )
                                                   (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 3
                                                   )
                                                )
                                                (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                   value = 1
                                                )
                                             )
                                             (addn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 2
                                                (vecn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                      (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                                         )
                                                      )
                                                      (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 3
                                                      )
                                                   )
                                                   (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 1
                                                   )
                                                )
                                                (realconstn, resultdef = Single = "Single", pos = (83,32), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                                   value =  0.00000000000000000000E+0000                                                )
                                             )
                                          )

                                       )
                                       (statementn, resultdef = <nil>, pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 2
                                          (assignn, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                             (vecn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                                (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                   (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                      (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                         temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                                      )
                                                   )
                                                   (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 3
                                                   )
                                                )
                                                (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                   value = 2
                                                )
                                             )
                                             (addn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 2
                                                (vecn, resultdef = Single = "Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   (vecn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                      (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                                         )
                                                      )
                                                      (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 3
                                                      )
                                                   )
                                                   (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 2
                                                   )
                                                )
                                                (realconstn, resultdef = Single = "Single", pos = (83,35), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                                   value =  0.00000000000000000000E+0000                                                )
                                             )
                                          )

                                       )
                                    )

                                 )
                                 (statementn, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                    (tempdeleten, resultdef = $void = "untyped", pos = (83,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       release_to_normal: FALSE, temptypedef = LongInt = "LongInt", temptype = tt_persistent, tempinfo = $00007F2B8E308CC0
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (84,28), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (84,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 proc = Scale(<var Tmat4x4>;Single);
                                 methodpointer =
                                 (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (84,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                    )
                                 )
                                 left =
                                 (callparan, resultdef = Single = "Single", pos = (84,27), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 2
                                    (realconstn, resultdef = Single = "Single", pos = (84,27), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                       value =  1.50000000000000000000E+0000                                    )

                                 )
                                 (callparan, resultdef = <nil>, pos = (84,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                    (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (84,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken], cmplx = 1
                                       (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                          temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                       )
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (85,33), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (85,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 proc = RotateA(<var Tmat4x4>;Single);
                                 methodpointer =
                                 (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (85,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                    )
                                 )
                                 left =
                                 (callparan, resultdef = Single = "Single", pos = (85,32), loc = LOC_INVALID, expectloc = LOC_MMREG, flags = [], cmplx = 2
                                    (typeconvn, resultdef = Single = "Single", pos = (85,32), loc = LOC_INVALID, expectloc = LOC_MMREG, flags = [nf_pass1_done], cmplx = 2, convtype = tc_real_2_real, convnodeflags = []
                                       (muln, resultdef = Extended = "Extended", pos = (85,32), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 2
                                          (inlinen, resultdef = Extended = "Extended", pos = (85,29), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 1, inlinenumber = in_pi_real
                                             nil
                                          )
                                          (realconstn, resultdef = Extended = "Extended", pos = (85,31), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                             value =  2.50000000000000000000E-0001                                          )
                                       )
                                    )

                                 )
                                 (callparan, resultdef = <nil>, pos = (85,33), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                    (subscriptn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (85,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken], cmplx = 1
                                       (temprefn, resultdef = TCamera = "TCamera", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                          temptypedef = TCamera = "TCamera", (tempinfo = $00007F2B8E308BC0 flags = [ti_may_be_in_reg,ti_addr_taken])
                                       )
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (86,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_isproperty], cmplx = 255
                                 proc = SetColor(<TMonoColorVAO>;TVector4f);
                                 methodpointer =
                                 (loadn, resultdef = TCylinder = "TCylinder", pos = (86,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = CYLINDER
                                 )
                                 left =
                                 (callparan, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 10
                                    (blockn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 9
                                       (statementn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 9
                                          (tempcreaten, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_is_funcret], cmplx = 0
                                             size = 16, temptypedef = TVector4f = "Array[0..3] Of Single", tempinfo = $00007F2B8E308E40
                                             [ti_nofini]
                                             tempinit =
                                             nil
                                          )

                                       )
                                       (statementn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 9
                                          (blockn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_block_with_exit], cmplx = 8
                                             (statementn, resultdef = <nil>, pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 8
                                                (assignn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                                   (vecn, resultdef = Single = "Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                                      (typeconvn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_is_funcret], cmplx = 1
                                                            temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308E40 flags = [ti_nofini])
                                                         )
                                                      )
                                                      (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 0
                                                      )
                                                   )
                                                   (realconstn, resultdef = Single = "Single", pos = (86,29), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                                      value =  0.00000000000000000000E+0000                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                                                (assignn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                                   (vecn, resultdef = Single = "Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                                      (typeconvn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_is_funcret], cmplx = 1
                                                            temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308E40 flags = [ti_nofini])
                                                         )
                                                      )
                                                      (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 1
                                                      )
                                                   )
                                                   (realconstn, resultdef = Single = "Single", pos = (86,32), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                                      value =  1.00000000000000000000E+0000                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                                                (assignn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                                   (vecn, resultdef = Single = "Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                                      (typeconvn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_is_funcret], cmplx = 1
                                                            temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308E40 flags = [ti_nofini])
                                                         )
                                                      )
                                                      (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 2
                                                      )
                                                   )
                                                   (realconstn, resultdef = Single = "Single", pos = (86,35), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                                      value =  1.00000000000000000000E+0000                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 2
                                                (assignn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                                   (vecn, resultdef = Single = "Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                                      (typeconvn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_is_funcret], cmplx = 1
                                                            temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308E40 flags = [ti_nofini])
                                                         )
                                                      )
                                                      (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 3
                                                      )
                                                   )
                                                   (realconstn, resultdef = Single = "Single", pos = (86,38), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                                      value =  1.00000000000000000000E+0000                                                   )
                                                )

                                             )
                                          )

                                       )
                                       (statementn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 1
                                          (tempdeleten, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                             release_to_normal: TRUE, temptypedef = TVector4f = "Array[0..3] Of Single", temptype = tt_persistent, tempinfo = $00007F2B8E308E40
                                          )

                                       )
                                       (statementn, resultdef = $void = "untyped", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                          (temprefn, resultdef = TVector4f = "Array[0..3] Of Single", pos = (86,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_is_funcret], cmplx = 1
                                             temptypedef = TVector4f = "Array[0..3] Of Single", (tempinfo = $00007F2B8E308E40 flags = [ti_nofini])
                                          )

                                       )
                                    )

                                 )
                                 (callparan, resultdef = <nil>, pos = (86,20), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = TCylinder = "TCylinder", pos = (86,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = CYLINDER
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (87,18), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (87,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 proc = Draw(<TMonoColorVAO>);
                                 methodpointer =
                                 (loadn, resultdef = TCylinder = "TCylinder", pos = (87,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = CYLINDER
                                 )
                                 left =
                                 (callparan, resultdef = <nil>, pos = (87,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = TCylinder = "TCylinder", pos = (87,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = CYLINDER
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (89,23), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (89,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 proc = SwapBuffers(<TOpenGL>);
                                 methodpointer =
                                 (loadn, resultdef = TOpenGL = "TOpenGL", pos = (89,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = OPENGL
                                 )
                                 left =
                                 (callparan, resultdef = <nil>, pos = (89,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = TOpenGL = "TOpenGL", pos = (89,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = OPENGL
                                    )

                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (90,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                        (tempdeleten, resultdef = $void = "untyped", pos = (90,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           release_to_normal: FALSE, temptypedef = TCamera = "TCamera", temptype = tt_persistent, tempinfo = $00007F2B8E308BC0
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (91,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (91,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (91,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (91,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (91,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (91,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
      (blockn, resultdef = $void = "untyped", pos = (71,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
)

*******************************************************************************
after parsing
FormCreate(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
   (statementn, resultdef = <nil>, pos = (96,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (96,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Identity(<var Tmat4x4>);
         methodpointer =
         (loadn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (96,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = PROMATRIX
         )
         left =
         (callparan, resultdef = <nil>, pos = (96,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (96,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (98,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (98,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (loadn, resultdef = TOpenGL = "TOpenGL", pos = (98,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = OPENGL
         )
         (calln, resultdef = TOpenGL = "TOpenGL", pos = (98,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            proc = constructor Create(<TOpenGL>;<Class Of TOpenGL>;TWinControl;LongWord=`3`;LongWord=`3`;LongWord=`1`);
            methodpointer =
            (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TOpenGL", pos = (98,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               (typen, resultdef = TOpenGL = "TOpenGL", pos = (98,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               )
            )
            left =
            (callparan, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               (ordconstn, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  value = 1
               )

            )
            (callparan, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               (ordconstn, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  value = 3
               )

            )
            (callparan, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               (ordconstn, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  value = 3
               )

            )
            (callparan, resultdef = TWinControl = "TWinControl", pos = (98,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
               (typeconvn, resultdef = TWinControl = "TWinControl", pos = (98,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_equal, convnodeflags = []
                  (loadn, resultdef = TForm1 = "TForm1", pos = (98,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = self
                  )
               )

            )
            (callparan, resultdef = <nil>, pos = (98,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               (nothingn, resultdef = $void = "untyped", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               )

            )
            (callparan, resultdef = <nil>, pos = (98,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               (nothingn, resultdef = $void = "untyped", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               )

            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (99,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (99,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = InitScene(<TForm1>);
         methodpointer =
         (loadn, resultdef = TForm1 = "TForm1", pos = (99,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = self
         )
         left =
         (callparan, resultdef = <nil>, pos = (99,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (99,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (100,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (100,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty], cmplx = 255
         proc = SetEnabled(<TCustomTimer>;Boolean);
         methodpointer =
         (subscriptn, resultdef = TTimer = "TTimer", pos = (100,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
            (loadn, resultdef = TForm1 = "TForm1", pos = (100,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = self
            )
         )
         left =
         (callparan, resultdef = Boolean = "Boolean", pos = (100,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (ordconstn, resultdef = Boolean = "Boolean", pos = (100,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 1
            )

         )
         (callparan, resultdef = <nil>, pos = (100,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (100,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
FormCreate(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
   (statementn, resultdef = <nil>, pos = (96,21), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (96,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 3
         (statementn, resultdef = $void = "untyped", pos = (96,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 3
            (assignn, resultdef = $void = "untyped", pos = (96,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
               (loadn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (96,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                  nil
                  symbol = PROMATRIX
               )
               (loadn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (96,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                  nil
                  symbol = M
               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (98,33), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (98,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (loadn, resultdef = TOpenGL = "TOpenGL", pos = (98,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
            nil
            symbol = OPENGL
         )
         (calln, resultdef = TOpenGL = "TOpenGL", pos = (98,20), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
            proc = constructor Create(<TOpenGL>;<Class Of TOpenGL>;TWinControl;LongWord=`3`;LongWord=`3`;LongWord=`1`);
            methodpointer =
            (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TOpenGL", pos = (98,13), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
               (typen, resultdef = TOpenGL = "TOpenGL", pos = (98,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               )
            )
            left =
            (callparan, resultdef = TWinControl = "TWinControl", pos = (98,32), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
               (typeconvn, resultdef = TWinControl = "TWinControl", pos = (98,32), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_equal, convnodeflags = []
                  (loadn, resultdef = TForm1 = "TForm1", pos = (98,32), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                     nil
                     symbol = self
                  )
               )

            )
            (callparan, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
               (ordconstn, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                  value = 1
               )

            )
            (callparan, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
               (ordconstn, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                  value = 3
               )

            )
            (callparan, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
               (ordconstn, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                  value = 3
               )

            )
            (callparan, resultdef = <nil>, pos = (98,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
               (pointerconstn, resultdef = Pointer = "^untyped", pos = (98,20), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                  value = $0000000000000001
               )

            )
            (callparan, resultdef = <nil>, pos = (98,33), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
               (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TOpenGL", pos = (98,13), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                  (typen, resultdef = TOpenGL = "TOpenGL", pos = (98,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  )
               )

            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (99,12), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (99,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = InitScene(<TForm1>);
         methodpointer =
         (loadn, resultdef = TForm1 = "TForm1", pos = (99,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = self
         )
         left =
         (callparan, resultdef = <nil>, pos = (99,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
            (loadn, resultdef = TForm1 = "TForm1", pos = (99,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = self
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (100,25), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (100,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_isproperty], cmplx = 255
         proc = SetEnabled(<TCustomTimer>;Boolean);
         methodpointer =
         (subscriptn, resultdef = TTimer = "TTimer", pos = (100,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 3
            (loadn, resultdef = TForm1 = "TForm1", pos = (100,9), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = self
            )
         )
         left =
         (callparan, resultdef = <nil>, pos = (100,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 4
            (subscriptn, resultdef = TTimer = "TTimer", pos = (100,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 3
               (loadn, resultdef = TForm1 = "TForm1", pos = (100,9), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                  nil
                  symbol = self
               )
            )

         )
         (callparan, resultdef = Boolean = "Boolean", pos = (100,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
            (ordconstn, resultdef = Boolean = "Boolean", pos = (100,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 1
            )

         )
      )

   )
)

*******************************************************************************
right before code generation
FormCreate(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
               (statementn, resultdef = <nil>, pos = (96,21), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (96,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 3
                     (statementn, resultdef = $void = "untyped", pos = (96,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 3
                        (assignn, resultdef = $void = "untyped", pos = (96,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                           (loadn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (96,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                              nil
                              symbol = PROMATRIX
                           )
                           (loadn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (96,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                              nil
                              symbol = M
                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (98,33), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (98,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (loadn, resultdef = TOpenGL = "TOpenGL", pos = (98,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = OPENGL
                     )
                     (calln, resultdef = TOpenGL = "TOpenGL", pos = (98,20), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                        proc = constructor Create(<TOpenGL>;<Class Of TOpenGL>;TWinControl;LongWord=`3`;LongWord=`3`;LongWord=`1`);
                        methodpointer =
                        (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TOpenGL", pos = (98,13), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                           (typen, resultdef = TOpenGL = "TOpenGL", pos = (98,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                           )
                        )
                        left =
                        (callparan, resultdef = TWinControl = "TWinControl", pos = (98,32), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
                           (typeconvn, resultdef = TWinControl = "TWinControl", pos = (98,32), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_equal, convnodeflags = []
                              (loadn, resultdef = TForm1 = "TForm1", pos = (98,32), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                 nil
                                 symbol = self
                              )
                           )

                        )
                        (callparan, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                              value = 1
                           )

                        )
                        (callparan, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                              value = 3
                           )

                        )
                        (callparan, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongWord = "DWord", pos = (98,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                              value = 3
                           )

                        )
                        (callparan, resultdef = <nil>, pos = (98,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                           (pointerconstn, resultdef = Pointer = "^untyped", pos = (98,20), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                              value = $0000000000000001
                           )

                        )
                        (callparan, resultdef = <nil>, pos = (98,33), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                           (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TOpenGL", pos = (98,13), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                              (typen, resultdef = TOpenGL = "TOpenGL", pos = (98,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              )
                           )

                        )
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (99,12), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (99,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = InitScene(<TForm1>);
                     methodpointer =
                     (loadn, resultdef = TForm1 = "TForm1", pos = (99,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = self
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (99,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
                        (loadn, resultdef = TForm1 = "TForm1", pos = (99,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = self
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (100,25), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (100,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_isproperty], cmplx = 255
                     proc = SetEnabled(<TCustomTimer>;Boolean);
                     methodpointer =
                     (subscriptn, resultdef = TTimer = "TTimer", pos = (100,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 3
                        (loadn, resultdef = TForm1 = "TForm1", pos = (100,9), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = self
                        )
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (100,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 4
                        (subscriptn, resultdef = TTimer = "TTimer", pos = (100,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 3
                           (loadn, resultdef = TForm1 = "TForm1", pos = (100,9), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                              nil
                              symbol = self
                           )
                        )

                     )
                     (callparan, resultdef = Boolean = "Boolean", pos = (100,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = Boolean = "Boolean", pos = (100,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 1
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (101,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (101,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (101,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (101,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (101,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (101,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
      (blockn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
)

*******************************************************************************
after parsing
FormDestroy(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (104,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
   (statementn, resultdef = <nil>, pos = (105,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (105,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Free(<TObject>);
         methodpointer =
         (loadn, resultdef = TOpenGL = "TOpenGL", pos = (105,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = OPENGL
         )
         left =
         (callparan, resultdef = <nil>, pos = (105,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (105,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (106,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (106,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Free(<TObject>);
         methodpointer =
         (loadn, resultdef = TCylinder = "TCylinder", pos = (106,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = CYLINDER
         )
         left =
         (callparan, resultdef = <nil>, pos = (106,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (106,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
FormDestroy(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
   (statementn, resultdef = <nil>, pos = (105,14), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (105,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Free(<TObject>);
         methodpointer =
         (loadn, resultdef = TOpenGL = "TOpenGL", pos = (105,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = OPENGL
         )
         left =
         (callparan, resultdef = <nil>, pos = (105,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TOpenGL = "TOpenGL", pos = (105,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = OPENGL
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (106,16), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (106,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Free(<TObject>);
         methodpointer =
         (loadn, resultdef = TCylinder = "TCylinder", pos = (106,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = CYLINDER
         )
         left =
         (callparan, resultdef = <nil>, pos = (106,16), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TCylinder = "TCylinder", pos = (106,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = CYLINDER
            )

         )
      )

   )
)

*******************************************************************************
right before code generation
FormDestroy(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
               (statementn, resultdef = <nil>, pos = (105,14), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (105,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Free(<TObject>);
                     methodpointer =
                     (loadn, resultdef = TOpenGL = "TOpenGL", pos = (105,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = OPENGL
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (105,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TOpenGL = "TOpenGL", pos = (105,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = OPENGL
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (106,16), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (106,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Free(<TObject>);
                     methodpointer =
                     (loadn, resultdef = TCylinder = "TCylinder", pos = (106,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = CYLINDER
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (106,16), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TCylinder = "TCylinder", pos = (106,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = CYLINDER
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (107,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (107,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (107,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (107,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (107,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (107,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
      (blockn, resultdef = $void = "untyped", pos = (104,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
)

*******************************************************************************
after parsing
FormKeyPress(TObject;var Char);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (111,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
   (statementn, resultdef = <nil>, pos = (112,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (112,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = ModifKey(<TCamera>;Char);
         methodpointer =
         (subscriptn, resultdef = TCamera = "TCamera", pos = (112,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
            (loadn, resultdef = TOpenGL = "TOpenGL", pos = (112,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = OPENGL
            )
         )
         left =
         (callparan, resultdef = Char = "Char", pos = (112,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
            (loadn, resultdef = Char = "Char", pos = (112,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
               nil
               symbol = KEY
            )

         )
         (callparan, resultdef = <nil>, pos = (112,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (112,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
FormKeyPress(TObject;var Char);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
   (statementn, resultdef = <nil>, pos = (112,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (112,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = ModifKey(<TCamera>;Char);
         methodpointer =
         (subscriptn, resultdef = TCamera = "TCamera", pos = (112,16), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 3
            (loadn, resultdef = TOpenGL = "TOpenGL", pos = (112,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = OPENGL
            )
         )
         left =
         (callparan, resultdef = <nil>, pos = (112,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 4
            (subscriptn, resultdef = TCamera = "TCamera", pos = (112,16), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 3
               (loadn, resultdef = TOpenGL = "TOpenGL", pos = (112,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                  nil
                  symbol = OPENGL
               )
            )

         )
         (callparan, resultdef = Char = "Char", pos = (112,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 3
            (loadn, resultdef = Char = "Char", pos = (112,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
               nil
               symbol = KEY
            )

         )
      )

   )
)

*******************************************************************************
right before code generation
FormKeyPress(TObject;var Char);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
               (statementn, resultdef = <nil>, pos = (112,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (112,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = ModifKey(<TCamera>;Char);
                     methodpointer =
                     (subscriptn, resultdef = TCamera = "TCamera", pos = (112,16), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 3
                        (loadn, resultdef = TOpenGL = "TOpenGL", pos = (112,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = OPENGL
                        )
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (112,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 4
                        (subscriptn, resultdef = TCamera = "TCamera", pos = (112,16), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 3
                           (loadn, resultdef = TOpenGL = "TOpenGL", pos = (112,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                              nil
                              symbol = OPENGL
                           )
                        )

                     )
                     (callparan, resultdef = Char = "Char", pos = (112,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 3
                        (loadn, resultdef = Char = "Char", pos = (112,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                           nil
                           symbol = KEY
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (113,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (113,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (113,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (113,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (113,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (113,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
      (blockn, resultdef = $void = "untyped", pos = (111,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
)

*******************************************************************************
after parsing
FormPaint(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (116,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
   (statementn, resultdef = <nil>, pos = (117,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (117,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = RenderScene(<TForm1>);
         methodpointer =
         (loadn, resultdef = TForm1 = "TForm1", pos = (117,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = self
         )
         left =
         (callparan, resultdef = <nil>, pos = (117,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (117,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
FormPaint(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
   (statementn, resultdef = <nil>, pos = (117,14), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (117,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = RenderScene(<TForm1>);
         methodpointer =
         (loadn, resultdef = TForm1 = "TForm1", pos = (117,14), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = self
         )
         left =
         (callparan, resultdef = <nil>, pos = (117,14), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
            (loadn, resultdef = TForm1 = "TForm1", pos = (117,14), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = self
            )

         )
      )

   )
)

*******************************************************************************
right before code generation
FormPaint(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
               (statementn, resultdef = <nil>, pos = (117,14), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (117,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = RenderScene(<TForm1>);
                     methodpointer =
                     (loadn, resultdef = TForm1 = "TForm1", pos = (117,14), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = self
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (117,14), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
                        (loadn, resultdef = TForm1 = "TForm1", pos = (117,14), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = self
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (118,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (118,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (118,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (118,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (118,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (118,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
      (blockn, resultdef = $void = "untyped", pos = (116,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
)

*******************************************************************************
after parsing
FormResize(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
   (statementn, resultdef = <nil>, pos = (122,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (122,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Resize(<TBuffer>;LongInt;LongInt);
         methodpointer =
         (loadn, resultdef = TOpenGL = "TOpenGL", pos = (122,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = OPENGL
         )
         left =
         (callparan, resultdef = LongInt = "LongInt", pos = (122,42), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = LongInt = "LongInt", pos = (122,42), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty,nf_no_lvalue], cmplx = 255
               proc = GetClientHeight(<TControl>):LongInt;
               methodpointer =
               (loadn, resultdef = TForm1 = "TForm1", pos = (122,42), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  nil
                  symbol = self
               )
               left =
               (callparan, resultdef = <nil>, pos = (122,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (nothingn, resultdef = $void = "untyped", pos = (122,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  )

               )
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (122,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = LongInt = "LongInt", pos = (122,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty,nf_no_lvalue], cmplx = 255
               proc = GetClientWidth(<TControl>):LongInt;
               methodpointer =
               (loadn, resultdef = TForm1 = "TForm1", pos = (122,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  nil
                  symbol = self
               )
               left =
               (callparan, resultdef = <nil>, pos = (122,17), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (nothingn, resultdef = $void = "untyped", pos = (122,17), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  )

               )
            )

         )
         (callparan, resultdef = <nil>, pos = (122,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (122,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
FormResize(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
   (statementn, resultdef = <nil>, pos = (122,43), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (122,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Resize(<TBuffer>;LongInt;LongInt);
         methodpointer =
         (loadn, resultdef = TOpenGL = "TOpenGL", pos = (122,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = OPENGL
         )
         left =
         (callparan, resultdef = LongInt = "LongInt", pos = (122,42), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 255
            (calln, resultdef = LongInt = "LongInt", pos = (122,42), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 255
               proc = GetClientHeight(<TControl>):LongInt;
               methodpointer =
               (loadn, resultdef = TForm1 = "TForm1", pos = (122,42), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                  nil
                  symbol = self
               )
               left =
               (callparan, resultdef = <nil>, pos = (122,30), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
                  (loadn, resultdef = TForm1 = "TForm1", pos = (122,42), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                     nil
                     symbol = self
                  )

               )
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (122,28), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 255
            (calln, resultdef = LongInt = "LongInt", pos = (122,28), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 255
               proc = GetClientWidth(<TControl>):LongInt;
               methodpointer =
               (loadn, resultdef = TForm1 = "TForm1", pos = (122,28), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                  nil
                  symbol = self
               )
               left =
               (callparan, resultdef = <nil>, pos = (122,17), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
                  (loadn, resultdef = TForm1 = "TForm1", pos = (122,28), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                     nil
                     symbol = self
                  )

               )
            )

         )
         (callparan, resultdef = <nil>, pos = (122,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TOpenGL = "TOpenGL", pos = (122,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = OPENGL
            )

         )
      )

   )
)

*******************************************************************************
right before code generation
FormResize(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
               (statementn, resultdef = <nil>, pos = (122,43), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (122,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Resize(<TBuffer>;LongInt;LongInt);
                     methodpointer =
                     (loadn, resultdef = TOpenGL = "TOpenGL", pos = (122,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = OPENGL
                     )
                     left =
                     (callparan, resultdef = LongInt = "LongInt", pos = (122,42), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 255
                        (calln, resultdef = LongInt = "LongInt", pos = (122,42), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 255
                           proc = GetClientHeight(<TControl>):LongInt;
                           methodpointer =
                           (loadn, resultdef = TForm1 = "TForm1", pos = (122,42), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                              nil
                              symbol = self
                           )
                           left =
                           (callparan, resultdef = <nil>, pos = (122,30), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
                              (loadn, resultdef = TForm1 = "TForm1", pos = (122,42), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                 nil
                                 symbol = self
                              )

                           )
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (122,28), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 255
                        (calln, resultdef = LongInt = "LongInt", pos = (122,28), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 255
                           proc = GetClientWidth(<TControl>):LongInt;
                           methodpointer =
                           (loadn, resultdef = TForm1 = "TForm1", pos = (122,28), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                              nil
                              symbol = self
                           )
                           left =
                           (callparan, resultdef = <nil>, pos = (122,17), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
                              (loadn, resultdef = TForm1 = "TForm1", pos = (122,28), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                 nil
                                 symbol = self
                              )

                           )
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (122,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TOpenGL = "TOpenGL", pos = (122,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = OPENGL
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (123,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (123,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (123,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (123,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (123,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (123,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
      (blockn, resultdef = $void = "untyped", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
)

*******************************************************************************
after parsing
SpeedButton3Click(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (126,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
   (statementn, resultdef = <nil>, pos = (127,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (127,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty], cmplx = 255
         proc = SetSektoren(<TBasisTriangleVAO>;LongInt);
         methodpointer =
         (loadn, resultdef = TCylinder = "TCylinder", pos = (127,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = CYLINDER
         )
         left =
         (callparan, resultdef = LongInt = "LongInt", pos = (127,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 5
            (addn, resultdef = LongInt = "LongInt", pos = (127,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
               (subscriptn, resultdef = LongInt = "LongInt", pos = (127,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty,nf_no_lvalue], cmplx = 3
                  (loadn, resultdef = TCylinder = "TCylinder", pos = (127,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = CYLINDER
                  )
               )
               (ordconstn, resultdef = LongInt = "LongInt", pos = (127,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit], cmplx = 0
                  value = 1
               )
            )

         )
         (callparan, resultdef = <nil>, pos = (127,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (127,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (128,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (128,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = WriteVertex(<TCylinder>);
         methodpointer =
         (loadn, resultdef = TCylinder = "TCylinder", pos = (128,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = CYLINDER
         )
         left =
         (callparan, resultdef = <nil>, pos = (128,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (128,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
SpeedButton3Click(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
   (statementn, resultdef = <nil>, pos = (127,45), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (127,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_isproperty], cmplx = 255
         proc = SetSektoren(<TBasisTriangleVAO>;LongInt);
         methodpointer =
         (loadn, resultdef = TCylinder = "TCylinder", pos = (127,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = CYLINDER
         )
         left =
         (callparan, resultdef = LongInt = "LongInt", pos = (127,45), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 5
            (addn, resultdef = LongInt = "LongInt", pos = (127,45), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 4
               (subscriptn, resultdef = LongInt = "LongInt", pos = (127,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 3
                  (loadn, resultdef = TCylinder = "TCylinder", pos = (127,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                     nil
                     symbol = CYLINDER
                  )
               )
               (ordconstn, resultdef = LongInt = "LongInt", pos = (127,44), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit], cmplx = 0
                  value = 1
               )
            )

         )
         (callparan, resultdef = <nil>, pos = (127,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TCylinder = "TCylinder", pos = (127,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = CYLINDER
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (128,23), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (128,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = WriteVertex(<TCylinder>);
         methodpointer =
         (loadn, resultdef = TCylinder = "TCylinder", pos = (128,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = CYLINDER
         )
         left =
         (callparan, resultdef = <nil>, pos = (128,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TCylinder = "TCylinder", pos = (128,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = CYLINDER
            )

         )
      )

   )
)

*******************************************************************************
right before code generation
SpeedButton3Click(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
               (statementn, resultdef = <nil>, pos = (127,45), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (127,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_isproperty], cmplx = 255
                     proc = SetSektoren(<TBasisTriangleVAO>;LongInt);
                     methodpointer =
                     (loadn, resultdef = TCylinder = "TCylinder", pos = (127,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = CYLINDER
                     )
                     left =
                     (callparan, resultdef = LongInt = "LongInt", pos = (127,45), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 5
                        (addn, resultdef = LongInt = "LongInt", pos = (127,45), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 4
                           (subscriptn, resultdef = LongInt = "LongInt", pos = (127,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 3
                              (loadn, resultdef = TCylinder = "TCylinder", pos = (127,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                 nil
                                 symbol = CYLINDER
                              )
                           )
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (127,44), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit], cmplx = 0
                              value = 1
                           )
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (127,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TCylinder = "TCylinder", pos = (127,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = CYLINDER
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (128,23), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (128,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = WriteVertex(<TCylinder>);
                     methodpointer =
                     (loadn, resultdef = TCylinder = "TCylinder", pos = (128,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = CYLINDER
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (128,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TCylinder = "TCylinder", pos = (128,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = CYLINDER
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
      (blockn, resultdef = $void = "untyped", pos = (126,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
)

*******************************************************************************
after parsing
SpeedButton4Click(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (132,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
   (statementn, resultdef = <nil>, pos = (133,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (133,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty], cmplx = 255
         proc = SetSektoren(<TBasisTriangleVAO>;LongInt);
         methodpointer =
         (loadn, resultdef = TCylinder = "TCylinder", pos = (133,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = CYLINDER
         )
         left =
         (callparan, resultdef = LongInt = "LongInt", pos = (133,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 5
            (subn, resultdef = LongInt = "LongInt", pos = (133,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
               (subscriptn, resultdef = LongInt = "LongInt", pos = (133,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty,nf_no_lvalue], cmplx = 3
                  (loadn, resultdef = TCylinder = "TCylinder", pos = (133,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = CYLINDER
                  )
               )
               (ordconstn, resultdef = LongInt = "LongInt", pos = (133,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit], cmplx = 0
                  value = 1
               )
            )

         )
         (callparan, resultdef = <nil>, pos = (133,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (133,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (134,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (134,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = WriteVertex(<TCylinder>);
         methodpointer =
         (loadn, resultdef = TCylinder = "TCylinder", pos = (134,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = CYLINDER
         )
         left =
         (callparan, resultdef = <nil>, pos = (134,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (134,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
SpeedButton4Click(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
   (statementn, resultdef = <nil>, pos = (133,45), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (133,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_isproperty], cmplx = 255
         proc = SetSektoren(<TBasisTriangleVAO>;LongInt);
         methodpointer =
         (loadn, resultdef = TCylinder = "TCylinder", pos = (133,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = CYLINDER
         )
         left =
         (callparan, resultdef = LongInt = "LongInt", pos = (133,45), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 5
            (subn, resultdef = LongInt = "LongInt", pos = (133,45), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 4
               (subscriptn, resultdef = LongInt = "LongInt", pos = (133,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 3
                  (loadn, resultdef = TCylinder = "TCylinder", pos = (133,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                     nil
                     symbol = CYLINDER
                  )
               )
               (ordconstn, resultdef = LongInt = "LongInt", pos = (133,44), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit], cmplx = 0
                  value = 1
               )
            )

         )
         (callparan, resultdef = <nil>, pos = (133,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TCylinder = "TCylinder", pos = (133,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = CYLINDER
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (134,23), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (134,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = WriteVertex(<TCylinder>);
         methodpointer =
         (loadn, resultdef = TCylinder = "TCylinder", pos = (134,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = CYLINDER
         )
         left =
         (callparan, resultdef = <nil>, pos = (134,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TCylinder = "TCylinder", pos = (134,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = CYLINDER
            )

         )
      )

   )
)

*******************************************************************************
right before code generation
SpeedButton4Click(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
               (statementn, resultdef = <nil>, pos = (133,45), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (133,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_isproperty], cmplx = 255
                     proc = SetSektoren(<TBasisTriangleVAO>;LongInt);
                     methodpointer =
                     (loadn, resultdef = TCylinder = "TCylinder", pos = (133,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = CYLINDER
                     )
                     left =
                     (callparan, resultdef = LongInt = "LongInt", pos = (133,45), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 5
                        (subn, resultdef = LongInt = "LongInt", pos = (133,45), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 4
                           (subscriptn, resultdef = LongInt = "LongInt", pos = (133,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 3
                              (loadn, resultdef = TCylinder = "TCylinder", pos = (133,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                 nil
                                 symbol = CYLINDER
                              )
                           )
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (133,44), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit], cmplx = 0
                              value = 1
                           )
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (133,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TCylinder = "TCylinder", pos = (133,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = CYLINDER
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (134,23), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (134,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = WriteVertex(<TCylinder>);
                     methodpointer =
                     (loadn, resultdef = TCylinder = "TCylinder", pos = (134,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = CYLINDER
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (134,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TCylinder = "TCylinder", pos = (134,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = CYLINDER
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (135,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (135,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (135,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (135,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (135,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (135,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
      (blockn, resultdef = $void = "untyped", pos = (132,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
)

*******************************************************************************
after parsing
SpeedButton5Click(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (138,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
   nil
)

*******************************************************************************
after the firstpass
SpeedButton5Click(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 0
   nil
)

*******************************************************************************
right before code generation
SpeedButton5Click(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (140,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (140,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (140,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (140,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (140,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (140,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
      (blockn, resultdef = $void = "untyped", pos = (138,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
)

*******************************************************************************
after parsing
Timer1Timer(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (143,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
   (statementn, resultdef = <nil>, pos = (145,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (145,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = RotateB(<var Tmat4x4>;Single);
         methodpointer =
         (loadn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (145,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = PROMATRIX
         )
         left =
         (callparan, resultdef = Single = "Single", pos = (145,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (typeconvn, resultdef = Single = "Single", pos = (145,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255, convtype = tc_real_2_real, convnodeflags = []
               (slashn, resultdef = Extended = "Extended", pos = (145,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (inlinen, resultdef = Extended = "Extended", pos = (145,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, inlinenumber = in_pi_real
                     nil
                  )
                  (realconstn, resultdef = Extended = "Extended", pos = (145,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     value =  2.20000000000000000000E+0002                  )
               )
            )

         )
         (callparan, resultdef = <nil>, pos = (145,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (145,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (146,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (146,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = FormPaint(<TForm1>;TObject);
         methodpointer =
         (loadn, resultdef = TForm1 = "TForm1", pos = (146,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = self
         )
         left =
         (callparan, resultdef = TObject = "TObject", pos = (146,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = TObject = "TObject", pos = (146,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = SENDER
            )

         )
         (callparan, resultdef = <nil>, pos = (146,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (146,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
Timer1Timer(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
   (statementn, resultdef = <nil>, pos = (145,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (145,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = RotateB(<var Tmat4x4>;Single);
         methodpointer =
         (loadn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (145,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = PROMATRIX
         )
         left =
         (callparan, resultdef = Single = "Single", pos = (145,29), loc = LOC_INVALID, expectloc = LOC_MMREG, flags = [], cmplx = 255
            (typeconvn, resultdef = Single = "Single", pos = (145,29), loc = LOC_INVALID, expectloc = LOC_MMREG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_real_2_real, convnodeflags = []
               (slashn, resultdef = Extended = "Extended", pos = (145,29), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 255
                  (inlinen, resultdef = Extended = "Extended", pos = (145,24), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 1, inlinenumber = in_pi_real
                     nil
                  )
                  (realconstn, resultdef = Extended = "Extended", pos = (145,26), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                     value =  2.20000000000000000000E+0002                  )
               )
            )

         )
         (callparan, resultdef = <nil>, pos = (145,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (145,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken], cmplx = 1
               nil
               symbol = PROMATRIX
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (146,20), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (146,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = FormPaint(<TForm1>;TObject);
         methodpointer =
         (loadn, resultdef = TForm1 = "TForm1", pos = (146,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = self
         )
         left =
         (callparan, resultdef = TObject = "TObject", pos = (146,19), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
            (loadn, resultdef = TObject = "TObject", pos = (146,19), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = SENDER
            )

         )
         (callparan, resultdef = <nil>, pos = (146,20), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
            (loadn, resultdef = TForm1 = "TForm1", pos = (146,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = self
            )

         )
      )

   )
)

*******************************************************************************
right before code generation
Timer1Timer(TObject);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
               (statementn, resultdef = <nil>, pos = (145,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (145,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = RotateB(<var Tmat4x4>;Single);
                     methodpointer =
                     (loadn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (145,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = PROMATRIX
                     )
                     left =
                     (callparan, resultdef = Single = "Single", pos = (145,29), loc = LOC_INVALID, expectloc = LOC_MMREG, flags = [], cmplx = 255
                        (typeconvn, resultdef = Single = "Single", pos = (145,29), loc = LOC_INVALID, expectloc = LOC_MMREG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_real_2_real, convnodeflags = []
                           (slashn, resultdef = Extended = "Extended", pos = (145,29), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 255
                              (inlinen, resultdef = Extended = "Extended", pos = (145,24), loc = LOC_INVALID, expectloc = LOC_FPUREG, flags = [nf_pass1_done], cmplx = 1, inlinenumber = in_pi_real
                                 nil
                              )
                              (realconstn, resultdef = Extended = "Extended", pos = (145,26), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 2
                                 value =  2.20000000000000000000E+0002                              )
                           )
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (145,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Tmat4x4 = "Array[0..3] Of TVector4f", pos = (145,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken], cmplx = 1
                           nil
                           symbol = PROMATRIX
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (146,20), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (146,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = FormPaint(<TForm1>;TObject);
                     methodpointer =
                     (loadn, resultdef = TForm1 = "TForm1", pos = (146,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = self
                     )
                     left =
                     (callparan, resultdef = TObject = "TObject", pos = (146,19), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
                        (loadn, resultdef = TObject = "TObject", pos = (146,19), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = SENDER
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (146,20), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
                        (loadn, resultdef = TForm1 = "TForm1", pos = (146,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = self
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (147,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (147,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (147,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (147,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (147,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (147,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
      (blockn, resultdef = $void = "untyped", pos = (143,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
)

*******************************************************************************
after parsing
$UNIT1_$$_init$; Register;
*******************************************************************************
nil

*******************************************************************************
after parsing
$main; Register;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (13,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
   (statementn, resultdef = <nil>, pos = (14,37), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (14,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
         (loadn, resultdef = Boolean = "Boolean", pos = (14,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = REQUIREDERIVEDFORMRESOURCE
         )
         (ordconstn, resultdef = Boolean = "Boolean", pos = (14,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (15,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (15,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Initialize(<TApplication>);
         methodpointer =
         (loadn, resultdef = TApplication = "TApplication", pos = (15,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = APPLICATION
         )
         left =
         (callparan, resultdef = <nil>, pos = (15,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (15,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (16,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (16,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = CreateForm(<TApplication>;TComponentClass;out <Formal type>);
         methodpointer =
         (loadn, resultdef = TApplication = "TApplication", pos = (16,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = APPLICATION
         )
         left =
         (callparan, resultdef = $formal = "<Formal type>", pos = (16,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = TForm1 = "TForm1", pos = (16,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken], cmplx = 1
               nil
               symbol = FORM1
            )

         )
         (callparan, resultdef = TComponentClass = "Class Of TComponent", pos = (16,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (typeconvn, resultdef = TComponentClass = "Class Of TComponent", pos = (16,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_equal, convnodeflags = []
               (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TForm1", pos = (16,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (typen, resultdef = TForm1 = "TForm1", pos = (16,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  )
               )
            )

         )
         (callparan, resultdef = <nil>, pos = (16,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (16,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (17,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (17,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Run(<TApplication>);
         methodpointer =
         (loadn, resultdef = TApplication = "TApplication", pos = (17,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = APPLICATION
         )
         left =
         (callparan, resultdef = <nil>, pos = (17,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (17,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
$main; Register;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
   (statementn, resultdef = <nil>, pos = (14,37), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (14,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
         (loadn, resultdef = Boolean = "Boolean", pos = (14,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
            nil
            symbol = REQUIREDERIVEDFORMRESOURCE
         )
         (ordconstn, resultdef = Boolean = "Boolean", pos = (14,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (15,25), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (15,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Initialize(<TApplication>);
         methodpointer =
         (loadn, resultdef = TApplication = "TApplication", pos = (15,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = APPLICATION
         )
         left =
         (callparan, resultdef = <nil>, pos = (15,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TApplication = "TApplication", pos = (15,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = APPLICATION
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (16,40), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (16,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = CreateForm(<TApplication>;TComponentClass;out <Formal type>);
         methodpointer =
         (loadn, resultdef = TApplication = "TApplication", pos = (16,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = APPLICATION
         )
         left =
         (callparan, resultdef = $formal = "<Formal type>", pos = (16,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TForm1 = "TForm1", pos = (16,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken], cmplx = 1
               nil
               symbol = FORM1
            )

         )
         (callparan, resultdef = <nil>, pos = (16,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TApplication = "TApplication", pos = (16,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = APPLICATION
            )

         )
         (callparan, resultdef = TComponentClass = "Class Of TComponent", pos = (16,32), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (typeconvn, resultdef = TComponentClass = "Class Of TComponent", pos = (16,32), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_equal, convnodeflags = []
               (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TForm1", pos = (16,32), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                  (typen, resultdef = TForm1 = "TForm1", pos = (16,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  )
               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (17,18), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (17,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Run(<TApplication>);
         methodpointer =
         (loadn, resultdef = TApplication = "TApplication", pos = (17,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = APPLICATION
         )
         left =
         (callparan, resultdef = <nil>, pos = (17,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TApplication = "TApplication", pos = (17,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = APPLICATION
            )

         )
      )

   )
)

*******************************************************************************
right before code generation
$main; Register;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
               (statementn, resultdef = <nil>, pos = (14,37), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (14,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = Boolean = "Boolean", pos = (14,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = REQUIREDERIVEDFORMRESOURCE
                     )
                     (ordconstn, resultdef = Boolean = "Boolean", pos = (14,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (15,25), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (15,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Initialize(<TApplication>);
                     methodpointer =
                     (loadn, resultdef = TApplication = "TApplication", pos = (15,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = APPLICATION
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (15,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TApplication = "TApplication", pos = (15,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = APPLICATION
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (16,40), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (16,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = CreateForm(<TApplication>;TComponentClass;out <Formal type>);
                     methodpointer =
                     (loadn, resultdef = TApplication = "TApplication", pos = (16,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = APPLICATION
                     )
                     left =
                     (callparan, resultdef = $formal = "<Formal type>", pos = (16,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TForm1 = "TForm1", pos = (16,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken], cmplx = 1
                           nil
                           symbol = FORM1
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (16,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TApplication = "TApplication", pos = (16,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = APPLICATION
                        )

                     )
                     (callparan, resultdef = TComponentClass = "Class Of TComponent", pos = (16,32), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (typeconvn, resultdef = TComponentClass = "Class Of TComponent", pos = (16,32), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_equal, convnodeflags = []
                           (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TForm1", pos = (16,32), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                              (typen, resultdef = TForm1 = "TForm1", pos = (16,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              )
                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (17,18), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (17,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Run(<TApplication>);
                     methodpointer =
                     (loadn, resultdef = TApplication = "TApplication", pos = (17,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = APPLICATION
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (17,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = TApplication = "TApplication", pos = (17,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = APPLICATION
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (18,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
      (blockn, resultdef = $void = "untyped", pos = (13,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
)
