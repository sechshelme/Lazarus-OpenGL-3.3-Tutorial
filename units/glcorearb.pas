unit glcorearb;
//Generated by Chris Rorden's c2p_glcorearb.pas. (DD MM YYYY) 30 01 2017
// Inspired by Sebastian Guenther's GLext.pp and Tom Nuydens's GL.pp
// see https://developer.apple.com/opengl/capabilities/ for macOS support
//  in brief: MacOS 10.7 supports Core 3.2, MacOS 10.9 supports Core 3.3-4.1 depending on hardware
//  most modern Windows and Linux support all Core functions plus legacy functions.

{$MODE Delphi}
{$MACRO ON}
{$IFDEF Windows}
{$DEFINE extdecl := stdcall}
{$ELSE}
{$DEFINE extdecl := cdecl}
{$IFDEF MorphOS}
{$INLINE ON}
{$DEFINE GL_UNIT}
{$ELSE}
{$IFNDEF OS2}
{$LINKLIB c}
{$ENDIF OS2}
{$ENDIF}
{$ENDIF}

interface

uses {$IFDEF Windows} Windows, {$ENDIF} dynlibs, SysUtils, math;
(*
** Copyright (c) 2013-2014 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*)
(*
** This header is generated from the Khronos OpenGL / OpenGL ES XML
** API Registry. The current version of the Registry, generator scripts
** used to make the header, and the header can be found at
**   http://www.opengl.org/registry/
**
** Khronos $Revision: 29735 $ on $Date: 2015-02-02 19:00:01 -0800 (Mon, 02 Feb 2015) $
*)
(* glcorearb.h is for use with OpenGL core profile implementations.
** It should should be placed in the same directory as gl.h and
** included as <GL/glcorearb.h>.
**
** glcorearb.h includes only APIs in the latest OpenGL core profile
** implementation together with APIs in newer ARB extensions which
** can be supported by the core profile. It does not, and never will
** include functionality removed from the core profile, such as
** fixed-function vertex and fragment processing.
**
** Do not #include both <GL/glcorearb.h> and either of <GL/gl.h> or
** <GL/glext.h> in the same source file.
*)
(* Generated C header for:
* API: gl
* Profile: core
* Versions considered: .*
* Versions emitted: .*
* Default extensions included: glcore
* Additional extensions included: _nomatch_^
* Extensions removed: _nomatch_^
*)
(* This code block is duplicated in glxext.h, so must be protected *)
(* Define int32_t, int64_t, and uint64_t types for UST/MSC *)
(* (as used in the GL_EXT_timer_query extension). *)
(* Fallback if nothing above works *)
{$IFNDEF MORPHOS}
var
LibGL: TLibHandle;
{$ENDIF MORPHOS}


type
GLenum = Cardinal; PGLenum = ^GLenum;
GLboolean = Byte; PGLboolean = ^GLboolean;
GLbitfield = Cardinal; PGLbitfield = ^GLbitfield;
GLbyte = ShortInt; PGLbyte = ^GLbyte;
GLshort = SmallInt; PGLshort = ^GLshort;
GLint = Integer; PGLint = ^GLint;
GLsizei = Integer; PGLsizei = ^GLsizei;
GLubyte = Byte; PGLubyte = ^GLubyte;
GLushort = Word; PGLushort = ^GLushort;
GLuint = Cardinal; PGLuint = ^GLuint;
GLHandle = GLuint;
GLfloat = Single; PGLfloat = ^GLfloat;
GLdouble = Double; PGLdouble = ^GLdouble;
GLsizeiptr = PtrInt; PGLsizeiptr = ^GLsizeiptr;
GLintptr = PtrInt; PGLintptr = ^GLintptr;
PGLchar = Pchar;
GLsync = Pointer;
GLuint64 = QWord; PGLuint64 = ^GLuint64;
GLint64 = Int64; PGLint64 = ^GLint64;
GLuint64EXT = QWord; PGLuint64EXT = ^GLuint64EXT;
PGLvoid = Pointer;
_cl_context = Pointer; P_cl_context  = ^_cl_context; //???STRUCT
_cl_event = Pointer; P_cl_event  = ^_cl_event; //???STRUCT
GLDEBUGPROC = procedure (source:GLenum; _type:GLenum; id:GLuint; severity:GLenum; length:GLsizei; message:PGLchar; userParam:PGLvoid );extdecl;
GLDEBUGPROCARB = procedure (source:GLenum; _type:GLenum; id:GLuint; severity:GLenum; length:GLsizei; message:PGLchar; userParam:PGLvoid );extdecl;

const
//788 constants for GL_VERSION_3_2
 GL_DEPTH_BUFFER_BIT = $00000100;
 GL_STENCIL_BUFFER_BIT = $00000400;
 GL_COLOR_BUFFER_BIT = $00004000;
 GL_FALSE = 0;
 GL_TRUE = 1;
 GL_POINTS = $0000;
 GL_LINES = $0001;
 GL_LINE_LOOP = $0002;
 GL_LINE_STRIP = $0003;
 GL_TRIANGLES = $0004;
 GL_TRIANGLE_STRIP = $0005;
 GL_TRIANGLE_FAN = $0006;
 GL_QUADS = $0007;
 GL_NEVER = $0200;
 GL_LESS = $0201;
 GL_EQUAL = $0202;
 GL_LEQUAL = $0203;
 GL_GREATER = $0204;
 GL_NOTEQUAL = $0205;
 GL_GEQUAL = $0206;
 GL_ALWAYS = $0207;
 GL_ZERO = 0;
 GL_ONE = 1;
 GL_SRC_COLOR = $0300;
 GL_ONE_MINUS_SRC_COLOR = $0301;
 GL_SRC_ALPHA = $0302;
 GL_ONE_MINUS_SRC_ALPHA = $0303;
 GL_DST_ALPHA = $0304;
 GL_ONE_MINUS_DST_ALPHA = $0305;
 GL_DST_COLOR = $0306;
 GL_ONE_MINUS_DST_COLOR = $0307;
 GL_SRC_ALPHA_SATURATE = $0308;
 GL_NONE = 0;
 GL_FRONT_LEFT = $0400;
 GL_FRONT_RIGHT = $0401;
 GL_BACK_LEFT = $0402;
 GL_BACK_RIGHT = $0403;
 GL_FRONT = $0404;
 GL_BACK = $0405;
 GL_LEFT = $0406;
 GL_RIGHT = $0407;
 GL_FRONT_AND_BACK = $0408;
 GL_NO_ERROR = 0;
 GL_INVALID_ENUM = $0500;
 GL_INVALID_VALUE = $0501;
 GL_INVALID_OPERATION = $0502;
 GL_OUT_OF_MEMORY = $0505;
 GL_CW = $0900;
 GL_CCW = $0901;
 GL_POINT_SIZE = $0B11;
 GL_POINT_SIZE_RANGE = $0B12;
 GL_POINT_SIZE_GRANULARITY = $0B13;
 GL_LINE_SMOOTH = $0B20;
 GL_LINE_WIDTH = $0B21;
 GL_LINE_WIDTH_RANGE = $0B22;
 GL_LINE_WIDTH_GRANULARITY = $0B23;
 GL_POLYGON_MODE = $0B40;
 GL_POLYGON_SMOOTH = $0B41;
 GL_CULL_FACE = $0B44;
 GL_CULL_FACE_MODE = $0B45;
 GL_FRONT_FACE = $0B46;
 GL_DEPTH_RANGE = $0B70;
 GL_DEPTH_TEST = $0B71;
 GL_DEPTH_WRITEMASK = $0B72;
 GL_DEPTH_CLEAR_VALUE = $0B73;
 GL_DEPTH_FUNC = $0B74;
 GL_STENCIL_TEST = $0B90;
 GL_STENCIL_CLEAR_VALUE = $0B91;
 GL_STENCIL_FUNC = $0B92;
 GL_STENCIL_VALUE_MASK = $0B93;
 GL_STENCIL_FAIL = $0B94;
 GL_STENCIL_PASS_DEPTH_FAIL = $0B95;
 GL_STENCIL_PASS_DEPTH_PASS = $0B96;
 GL_STENCIL_REF = $0B97;
 GL_STENCIL_WRITEMASK = $0B98;
 GL_VIEWPORT = $0BA2;
 GL_DITHER = $0BD0;
 GL_BLEND_DST = $0BE0;
 GL_BLEND_SRC = $0BE1;
 GL_BLEND = $0BE2;
 GL_LOGIC_OP_MODE = $0BF0;
 GL_COLOR_LOGIC_OP = $0BF2;
 GL_DRAW_BUFFER = $0C01;
 GL_READ_BUFFER = $0C02;
 GL_SCISSOR_BOX = $0C10;
 GL_SCISSOR_TEST = $0C11;
 GL_COLOR_CLEAR_VALUE = $0C22;
 GL_COLOR_WRITEMASK = $0C23;
 GL_DOUBLEBUFFER = $0C32;
 GL_STEREO = $0C33;
 GL_LINE_SMOOTH_HINT = $0C52;
 GL_POLYGON_SMOOTH_HINT = $0C53;
 GL_UNPACK_SWAP_BYTES = $0CF0;
 GL_UNPACK_LSB_FIRST = $0CF1;
 GL_UNPACK_ROW_LENGTH = $0CF2;
 GL_UNPACK_SKIP_ROWS = $0CF3;
 GL_UNPACK_SKIP_PIXELS = $0CF4;
 GL_UNPACK_ALIGNMENT = $0CF5;
 GL_PACK_SWAP_BYTES = $0D00;
 GL_PACK_LSB_FIRST = $0D01;
 GL_PACK_ROW_LENGTH = $0D02;
 GL_PACK_SKIP_ROWS = $0D03;
 GL_PACK_SKIP_PIXELS = $0D04;
 GL_PACK_ALIGNMENT = $0D05;
 GL_MAX_TEXTURE_SIZE = $0D33;
 GL_MAX_VIEWPORT_DIMS = $0D3A;
 GL_SUBPIXEL_BITS = $0D50;
 GL_TEXTURE_1D = $0DE0;
 GL_TEXTURE_2D = $0DE1;
 GL_POLYGON_OFFSET_UNITS = $2A00;
 GL_POLYGON_OFFSET_POINT = $2A01;
 GL_POLYGON_OFFSET_LINE = $2A02;
 GL_POLYGON_OFFSET_FILL = $8037;
 GL_POLYGON_OFFSET_FACTOR = $8038;
 GL_TEXTURE_BINDING_1D = $8068;
 GL_TEXTURE_BINDING_2D = $8069;
 GL_TEXTURE_WIDTH = $1000;
 GL_TEXTURE_HEIGHT = $1001;
 GL_TEXTURE_INTERNAL_FORMAT = $1003;
 GL_TEXTURE_BORDER_COLOR = $1004;
 GL_TEXTURE_RED_SIZE = $805C;
 GL_TEXTURE_GREEN_SIZE = $805D;
 GL_TEXTURE_BLUE_SIZE = $805E;
 GL_TEXTURE_ALPHA_SIZE = $805F;
 GL_DONT_CARE = $1100;
 GL_FASTEST = $1101;
 GL_NICEST = $1102;
 GL_BYTE = $1400;
 GL_UNSIGNED_BYTE = $1401;
 GL_SHORT = $1402;
 GL_UNSIGNED_SHORT = $1403;
 GL_INT = $1404;
 GL_UNSIGNED_INT = $1405;
 GL_FLOAT = $1406;
 GL_DOUBLE = $140A;
 GL_STACK_OVERFLOW = $0503;
 GL_STACK_UNDERFLOW = $0504;
 GL_CLEAR = $1500;
 GL_AND = $1501;
 GL_AND_REVERSE = $1502;
 GL_COPY = $1503;
 GL_AND_INVERTED = $1504;
 GL_NOOP = $1505;
 GL_XOR = $1506;
 GL_OR = $1507;
 GL_NOR = $1508;
 GL_EQUIV = $1509;
 GL_INVERT = $150A;
 GL_OR_REVERSE = $150B;
 GL_COPY_INVERTED = $150C;
 GL_OR_INVERTED = $150D;
 GL_NAND = $150E;
 GL_SET = $150F;
 GL_TEXTURE = $1702;
 GL_COLOR = $1800;
 GL_DEPTH = $1801;
 GL_STENCIL = $1802;
 GL_STENCIL_INDEX = $1901;
 GL_DEPTH_COMPONENT = $1902;
 GL_RED = $1903;
 GL_GREEN = $1904;
 GL_BLUE = $1905;
 GL_ALPHA = $1906;
 GL_RGB = $1907;
 GL_RGBA = $1908;
 GL_POINT = $1B00;
 GL_LINE = $1B01;
 GL_FILL = $1B02;
 GL_KEEP = $1E00;
 GL_REPLACE = $1E01;
 GL_INCR = $1E02;
 GL_DECR = $1E03;
 GL_VENDOR = $1F00;
 GL_RENDERER = $1F01;
 GL_VERSION = $1F02;
 GL_EXTENSIONS = $1F03;
 GL_NEAREST = $2600;
 GL_LINEAR = $2601;
 GL_NEAREST_MIPMAP_NEAREST = $2700;
 GL_LINEAR_MIPMAP_NEAREST = $2701;
 GL_NEAREST_MIPMAP_LINEAR = $2702;
 GL_LINEAR_MIPMAP_LINEAR = $2703;
 GL_TEXTURE_MAG_FILTER = $2800;
 GL_TEXTURE_MIN_FILTER = $2801;
 GL_TEXTURE_WRAP_S = $2802;
 GL_TEXTURE_WRAP_T = $2803;
 GL_PROXY_TEXTURE_1D = $8063;
 GL_PROXY_TEXTURE_2D = $8064;
 GL_REPEAT = $2901;
 GL_R3_G3_B2 = $2A10;
 GL_RGB4 = $804F;
 GL_RGB5 = $8050;
 GL_RGB8 = $8051;
 GL_RGB10 = $8052;
 GL_RGB12 = $8053;
 GL_RGB16 = $8054;
 GL_RGBA2 = $8055;
 GL_RGBA4 = $8056;
 GL_RGB5_A1 = $8057;
 GL_RGBA8 = $8058;
 GL_RGB10_A2 = $8059;
 GL_RGBA12 = $805A;
 GL_RGBA16 = $805B;
 GL_VERTEX_ARRAY = $8074;
 GL_UNSIGNED_BYTE_3_3_2 = $8032;
 GL_UNSIGNED_SHORT_4_4_4_4 = $8033;
 GL_UNSIGNED_SHORT_5_5_5_1 = $8034;
 GL_UNSIGNED_INT_8_8_8_8 = $8035;
 GL_UNSIGNED_INT_10_10_10_2 = $8036;
 GL_TEXTURE_BINDING_3D = $806A;
 GL_PACK_SKIP_IMAGES = $806B;
 GL_PACK_IMAGE_HEIGHT = $806C;
 GL_UNPACK_SKIP_IMAGES = $806D;
 GL_UNPACK_IMAGE_HEIGHT = $806E;
 GL_TEXTURE_3D = $806F;
 GL_PROXY_TEXTURE_3D = $8070;
 GL_TEXTURE_DEPTH = $8071;
 GL_TEXTURE_WRAP_R = $8072;
 GL_MAX_3D_TEXTURE_SIZE = $8073;
 GL_UNSIGNED_BYTE_2_3_3_REV = $8362;
 GL_UNSIGNED_SHORT_5_6_5 = $8363;
 GL_UNSIGNED_SHORT_5_6_5_REV = $8364;
 GL_UNSIGNED_SHORT_4_4_4_4_REV = $8365;
 GL_UNSIGNED_SHORT_1_5_5_5_REV = $8366;
 GL_UNSIGNED_INT_8_8_8_8_REV = $8367;
 GL_UNSIGNED_INT_2_10_10_10_REV = $8368;
 GL_BGR = $80E0;
 GL_BGRA = $80E1;
 GL_MAX_ELEMENTS_VERTICES = $80E8;
 GL_MAX_ELEMENTS_INDICES = $80E9;
 GL_CLAMP_TO_EDGE = $812F;
 GL_TEXTURE_MIN_LOD = $813A;
 GL_TEXTURE_MAX_LOD = $813B;
 GL_TEXTURE_BASE_LEVEL = $813C;
 GL_TEXTURE_MAX_LEVEL = $813D;
 GL_SMOOTH_POINT_SIZE_RANGE = $0B12;
 GL_SMOOTH_POINT_SIZE_GRANULARITY = $0B13;
 GL_SMOOTH_LINE_WIDTH_RANGE = $0B22;
 GL_SMOOTH_LINE_WIDTH_GRANULARITY = $0B23;
 GL_ALIASED_LINE_WIDTH_RANGE = $846E;
 GL_TEXTURE0 = $84C0;
 GL_TEXTURE1 = $84C1;
 GL_TEXTURE2 = $84C2;
 GL_TEXTURE3 = $84C3;
 GL_TEXTURE4 = $84C4;
 GL_TEXTURE5 = $84C5;
 GL_TEXTURE6 = $84C6;
 GL_TEXTURE7 = $84C7;
 GL_TEXTURE8 = $84C8;
 GL_TEXTURE9 = $84C9;
 GL_TEXTURE10 = $84CA;
 GL_TEXTURE11 = $84CB;
 GL_TEXTURE12 = $84CC;
 GL_TEXTURE13 = $84CD;
 GL_TEXTURE14 = $84CE;
 GL_TEXTURE15 = $84CF;
 GL_TEXTURE16 = $84D0;
 GL_TEXTURE17 = $84D1;
 GL_TEXTURE18 = $84D2;
 GL_TEXTURE19 = $84D3;
 GL_TEXTURE20 = $84D4;
 GL_TEXTURE21 = $84D5;
 GL_TEXTURE22 = $84D6;
 GL_TEXTURE23 = $84D7;
 GL_TEXTURE24 = $84D8;
 GL_TEXTURE25 = $84D9;
 GL_TEXTURE26 = $84DA;
 GL_TEXTURE27 = $84DB;
 GL_TEXTURE28 = $84DC;
 GL_TEXTURE29 = $84DD;
 GL_TEXTURE30 = $84DE;
 GL_TEXTURE31 = $84DF;
 GL_ACTIVE_TEXTURE = $84E0;
 GL_MULTISAMPLE = $809D;
 GL_SAMPLE_ALPHA_TO_COVERAGE = $809E;
 GL_SAMPLE_ALPHA_TO_ONE = $809F;
 GL_SAMPLE_COVERAGE = $80A0;
 GL_SAMPLE_BUFFERS = $80A8;
 GL_SAMPLES = $80A9;
 GL_SAMPLE_COVERAGE_VALUE = $80AA;
 GL_SAMPLE_COVERAGE_INVERT = $80AB;
 GL_TEXTURE_CUBE_MAP = $8513;
 GL_TEXTURE_BINDING_CUBE_MAP = $8514;
 GL_TEXTURE_CUBE_MAP_POSITIVE_X = $8515;
 GL_TEXTURE_CUBE_MAP_NEGATIVE_X = $8516;
 GL_TEXTURE_CUBE_MAP_POSITIVE_Y = $8517;
 GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = $8518;
 GL_TEXTURE_CUBE_MAP_POSITIVE_Z = $8519;
 GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = $851A;
 GL_PROXY_TEXTURE_CUBE_MAP = $851B;
 GL_MAX_CUBE_MAP_TEXTURE_SIZE = $851C;
 GL_COMPRESSED_RGB = $84ED;
 GL_COMPRESSED_RGBA = $84EE;
 GL_TEXTURE_COMPRESSION_HINT = $84EF;
 GL_TEXTURE_COMPRESSED_IMAGE_SIZE = $86A0;
 GL_TEXTURE_COMPRESSED = $86A1;
 GL_NUM_COMPRESSED_TEXTURE_FORMATS = $86A2;
 GL_COMPRESSED_TEXTURE_FORMATS = $86A3;
 GL_CLAMP_TO_BORDER = $812D;
 GL_BLEND_DST_RGB = $80C8;
 GL_BLEND_SRC_RGB = $80C9;
 GL_BLEND_DST_ALPHA = $80CA;
 GL_BLEND_SRC_ALPHA = $80CB;
 GL_POINT_FADE_THRESHOLD_SIZE = $8128;
 GL_DEPTH_COMPONENT16 = $81A5;
 GL_DEPTH_COMPONENT24 = $81A6;
 GL_DEPTH_COMPONENT32 = $81A7;
 GL_MIRRORED_REPEAT = $8370;
 GL_MAX_TEXTURE_LOD_BIAS = $84FD;
 GL_TEXTURE_LOD_BIAS = $8501;
 GL_INCR_WRAP = $8507;
 GL_DECR_WRAP = $8508;
 GL_TEXTURE_DEPTH_SIZE = $884A;
 GL_TEXTURE_COMPARE_MODE = $884C;
 GL_TEXTURE_COMPARE_FUNC = $884D;
 GL_FUNC_ADD = $8006;
 GL_FUNC_SUBTRACT = $800A;
 GL_FUNC_REVERSE_SUBTRACT = $800B;
 GL_MIN = $8007;
 GL_MAX = $8008;
 GL_CONSTANT_COLOR = $8001;
 GL_ONE_MINUS_CONSTANT_COLOR = $8002;
 GL_CONSTANT_ALPHA = $8003;
 GL_ONE_MINUS_CONSTANT_ALPHA = $8004;
 GL_BUFFER_SIZE = $8764;
 GL_BUFFER_USAGE = $8765;
 GL_QUERY_COUNTER_BITS = $8864;
 GL_CURRENT_QUERY = $8865;
 GL_QUERY_RESULT = $8866;
 GL_QUERY_RESULT_AVAILABLE = $8867;
 GL_ARRAY_BUFFER = $8892;
 GL_ELEMENT_ARRAY_BUFFER = $8893;
 GL_ARRAY_BUFFER_BINDING = $8894;
 GL_ELEMENT_ARRAY_BUFFER_BINDING = $8895;
 GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = $889F;
 GL_READ_ONLY = $88B8;
 GL_WRITE_ONLY = $88B9;
 GL_READ_WRITE = $88BA;
 GL_BUFFER_ACCESS = $88BB;
 GL_BUFFER_MAPPED = $88BC;
 GL_BUFFER_MAP_POINTER = $88BD;
 GL_STREAM_DRAW = $88E0;
 GL_STREAM_READ = $88E1;
 GL_STREAM_COPY = $88E2;
 GL_STATIC_DRAW = $88E4;
 GL_STATIC_READ = $88E5;
 GL_STATIC_COPY = $88E6;
 GL_DYNAMIC_DRAW = $88E8;
 GL_DYNAMIC_READ = $88E9;
 GL_DYNAMIC_COPY = $88EA;
 GL_SAMPLES_PASSED = $8914;
 GL_SRC1_ALPHA = $8589;
 GL_BLEND_EQUATION_RGB = $8009;
 GL_VERTEX_ATTRIB_ARRAY_ENABLED = $8622;
 GL_VERTEX_ATTRIB_ARRAY_SIZE = $8623;
 GL_VERTEX_ATTRIB_ARRAY_STRIDE = $8624;
 GL_VERTEX_ATTRIB_ARRAY_TYPE = $8625;
 GL_CURRENT_VERTEX_ATTRIB = $8626;
 GL_VERTEX_PROGRAM_POINT_SIZE = $8642;
 GL_VERTEX_ATTRIB_ARRAY_POINTER = $8645;
 GL_STENCIL_BACK_FUNC = $8800;
 GL_STENCIL_BACK_FAIL = $8801;
 GL_STENCIL_BACK_PASS_DEPTH_FAIL = $8802;
 GL_STENCIL_BACK_PASS_DEPTH_PASS = $8803;
 GL_MAX_DRAW_BUFFERS = $8824;
 GL_DRAW_BUFFER0 = $8825;
 GL_DRAW_BUFFER1 = $8826;
 GL_DRAW_BUFFER2 = $8827;
 GL_DRAW_BUFFER3 = $8828;
 GL_DRAW_BUFFER4 = $8829;
 GL_DRAW_BUFFER5 = $882A;
 GL_DRAW_BUFFER6 = $882B;
 GL_DRAW_BUFFER7 = $882C;
 GL_DRAW_BUFFER8 = $882D;
 GL_DRAW_BUFFER9 = $882E;
 GL_DRAW_BUFFER10 = $882F;
 GL_DRAW_BUFFER11 = $8830;
 GL_DRAW_BUFFER12 = $8831;
 GL_DRAW_BUFFER13 = $8832;
 GL_DRAW_BUFFER14 = $8833;
 GL_DRAW_BUFFER15 = $8834;
 GL_BLEND_EQUATION_ALPHA = $883D;
 GL_MAX_VERTEX_ATTRIBS = $8869;
 GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = $886A;
 GL_MAX_TEXTURE_IMAGE_UNITS = $8872;
 GL_FRAGMENT_SHADER = $8B30;
 GL_VERTEX_SHADER = $8B31;
 GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = $8B49;
 GL_MAX_VERTEX_UNIFORM_COMPONENTS = $8B4A;
 GL_MAX_VARYING_FLOATS = $8B4B;
 GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = $8B4C;
 GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = $8B4D;
 GL_SHADER_TYPE = $8B4F;
 GL_FLOAT_VEC2 = $8B50;
 GL_FLOAT_VEC3 = $8B51;
 GL_FLOAT_VEC4 = $8B52;
 GL_INT_VEC2 = $8B53;
 GL_INT_VEC3 = $8B54;
 GL_INT_VEC4 = $8B55;
 GL_BOOL = $8B56;
 GL_BOOL_VEC2 = $8B57;
 GL_BOOL_VEC3 = $8B58;
 GL_BOOL_VEC4 = $8B59;
 GL_FLOAT_MAT2 = $8B5A;
 GL_FLOAT_MAT3 = $8B5B;
 GL_FLOAT_MAT4 = $8B5C;
 GL_SAMPLER_1D = $8B5D;
 GL_SAMPLER_2D = $8B5E;
 GL_SAMPLER_3D = $8B5F;
 GL_SAMPLER_CUBE = $8B60;
 GL_SAMPLER_1D_SHADOW = $8B61;
 GL_SAMPLER_2D_SHADOW = $8B62;
 GL_DELETE_STATUS = $8B80;
 GL_COMPILE_STATUS = $8B81;
 GL_LINK_STATUS = $8B82;
 GL_VALIDATE_STATUS = $8B83;
 GL_INFO_LOG_LENGTH = $8B84;
 GL_ATTACHED_SHADERS = $8B85;
 GL_ACTIVE_UNIFORMS = $8B86;
 GL_ACTIVE_UNIFORM_MAX_LENGTH = $8B87;
 GL_SHADER_SOURCE_LENGTH = $8B88;
 GL_ACTIVE_ATTRIBUTES = $8B89;
 GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = $8B8A;
 GL_FRAGMENT_SHADER_DERIVATIVE_HINT = $8B8B;
 GL_SHADING_LANGUAGE_VERSION = $8B8C;
 GL_CURRENT_PROGRAM = $8B8D;
 GL_POINT_SPRITE_COORD_ORIGIN = $8CA0;
 GL_LOWER_LEFT = $8CA1;
 GL_UPPER_LEFT = $8CA2;
 GL_STENCIL_BACK_REF = $8CA3;
 GL_STENCIL_BACK_VALUE_MASK = $8CA4;
 GL_STENCIL_BACK_WRITEMASK = $8CA5;
 GL_PIXEL_PACK_BUFFER = $88EB;
 GL_PIXEL_UNPACK_BUFFER = $88EC;
 GL_PIXEL_PACK_BUFFER_BINDING = $88ED;
 GL_PIXEL_UNPACK_BUFFER_BINDING = $88EF;
 GL_FLOAT_MAT2x3 = $8B65;
 GL_FLOAT_MAT2x4 = $8B66;
 GL_FLOAT_MAT3x2 = $8B67;
 GL_FLOAT_MAT3x4 = $8B68;
 GL_FLOAT_MAT4x2 = $8B69;
 GL_FLOAT_MAT4x3 = $8B6A;
 GL_SRGB = $8C40;
 GL_SRGB8 = $8C41;
 GL_SRGB_ALPHA = $8C42;
 GL_SRGB8_ALPHA8 = $8C43;
 GL_COMPRESSED_SRGB = $8C48;
 GL_COMPRESSED_SRGB_ALPHA = $8C49;
 GL_COMPARE_REF_TO_TEXTURE = $884E;
 GL_CLIP_DISTANCE0 = $3000;
 GL_CLIP_DISTANCE1 = $3001;
 GL_CLIP_DISTANCE2 = $3002;
 GL_CLIP_DISTANCE3 = $3003;
 GL_CLIP_DISTANCE4 = $3004;
 GL_CLIP_DISTANCE5 = $3005;
 GL_CLIP_DISTANCE6 = $3006;
 GL_CLIP_DISTANCE7 = $3007;
 GL_MAX_CLIP_DISTANCES = $0D32;
 GL_MAJOR_VERSION = $821B;
 GL_MINOR_VERSION = $821C;
 GL_NUM_EXTENSIONS = $821D;
 GL_CONTEXT_FLAGS = $821E;
 GL_COMPRESSED_RED = $8225;
 GL_COMPRESSED_RG = $8226;
 GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = $00000001;
 GL_RGBA32F = $8814;
 GL_RGB32F = $8815;
 GL_RGBA16F = $881A;
 GL_RGB16F = $881B;
 GL_VERTEX_ATTRIB_ARRAY_INTEGER = $88FD;
 GL_MAX_ARRAY_TEXTURE_LAYERS = $88FF;
 GL_MIN_PROGRAM_TEXEL_OFFSET = $8904;
 GL_MAX_PROGRAM_TEXEL_OFFSET = $8905;
 GL_CLAMP_READ_COLOR = $891C;
 GL_FIXED_ONLY = $891D;
 GL_MAX_VARYING_COMPONENTS = $8B4B;
 GL_TEXTURE_1D_ARRAY = $8C18;
 GL_PROXY_TEXTURE_1D_ARRAY = $8C19;
 GL_TEXTURE_2D_ARRAY = $8C1A;
 GL_PROXY_TEXTURE_2D_ARRAY = $8C1B;
 GL_TEXTURE_BINDING_1D_ARRAY = $8C1C;
 GL_TEXTURE_BINDING_2D_ARRAY = $8C1D;
 GL_R11F_G11F_B10F = $8C3A;
 GL_UNSIGNED_INT_10F_11F_11F_REV = $8C3B;
 GL_RGB9_E5 = $8C3D;
 GL_UNSIGNED_INT_5_9_9_9_REV = $8C3E;
 GL_TEXTURE_SHARED_SIZE = $8C3F;
 GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = $8C76;
 GL_TRANSFORM_FEEDBACK_BUFFER_MODE = $8C7F;
 GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = $8C80;
 GL_TRANSFORM_FEEDBACK_VARYINGS = $8C83;
 GL_TRANSFORM_FEEDBACK_BUFFER_START = $8C84;
 GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = $8C85;
 GL_PRIMITIVES_GENERATED = $8C87;
 GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = $8C88;
 GL_RASTERIZER_DISCARD = $8C89;
 GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = $8C8A;
 GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = $8C8B;
 GL_INTERLEAVED_ATTRIBS = $8C8C;
 GL_SEPARATE_ATTRIBS = $8C8D;
 GL_TRANSFORM_FEEDBACK_BUFFER = $8C8E;
 GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = $8C8F;
 GL_RGBA32UI = $8D70;
 GL_RGB32UI = $8D71;
 GL_RGBA16UI = $8D76;
 GL_RGB16UI = $8D77;
 GL_RGBA8UI = $8D7C;
 GL_RGB8UI = $8D7D;
 GL_RGBA32I = $8D82;
 GL_RGB32I = $8D83;
 GL_RGBA16I = $8D88;
 GL_RGB16I = $8D89;
 GL_RGBA8I = $8D8E;
 GL_RGB8I = $8D8F;
 GL_RED_INTEGER = $8D94;
 GL_GREEN_INTEGER = $8D95;
 GL_BLUE_INTEGER = $8D96;
 GL_RGB_INTEGER = $8D98;
 GL_RGBA_INTEGER = $8D99;
 GL_BGR_INTEGER = $8D9A;
 GL_BGRA_INTEGER = $8D9B;
 GL_SAMPLER_1D_ARRAY = $8DC0;
 GL_SAMPLER_2D_ARRAY = $8DC1;
 GL_SAMPLER_1D_ARRAY_SHADOW = $8DC3;
 GL_SAMPLER_2D_ARRAY_SHADOW = $8DC4;
 GL_SAMPLER_CUBE_SHADOW = $8DC5;
 GL_UNSIGNED_INT_VEC2 = $8DC6;
 GL_UNSIGNED_INT_VEC3 = $8DC7;
 GL_UNSIGNED_INT_VEC4 = $8DC8;
 GL_INT_SAMPLER_1D = $8DC9;
 GL_INT_SAMPLER_2D = $8DCA;
 GL_INT_SAMPLER_3D = $8DCB;
 GL_INT_SAMPLER_CUBE = $8DCC;
 GL_INT_SAMPLER_1D_ARRAY = $8DCE;
 GL_INT_SAMPLER_2D_ARRAY = $8DCF;
 GL_UNSIGNED_INT_SAMPLER_1D = $8DD1;
 GL_UNSIGNED_INT_SAMPLER_2D = $8DD2;
 GL_UNSIGNED_INT_SAMPLER_3D = $8DD3;
 GL_UNSIGNED_INT_SAMPLER_CUBE = $8DD4;
 GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = $8DD6;
 GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = $8DD7;
 GL_QUERY_WAIT = $8E13;
 GL_QUERY_NO_WAIT = $8E14;
 GL_QUERY_BY_REGION_WAIT = $8E15;
 GL_QUERY_BY_REGION_NO_WAIT = $8E16;
 GL_BUFFER_ACCESS_FLAGS = $911F;
 GL_BUFFER_MAP_LENGTH = $9120;
 GL_BUFFER_MAP_OFFSET = $9121;
 GL_DEPTH_COMPONENT32F = $8CAC;
 GL_DEPTH32F_STENCIL8 = $8CAD;
 GL_FLOAT_32_UNSIGNED_INT_24_8_REV = $8DAD;
 GL_INVALID_FRAMEBUFFER_OPERATION = $0506;
 GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = $8210;
 GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = $8211;
 GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = $8212;
 GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = $8213;
 GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = $8214;
 GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = $8215;
 GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = $8216;
 GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = $8217;
 GL_FRAMEBUFFER_DEFAULT = $8218;
 GL_FRAMEBUFFER_UNDEFINED = $8219;
 GL_DEPTH_STENCIL_ATTACHMENT = $821A;
 GL_MAX_RENDERBUFFER_SIZE = $84E8;
 GL_DEPTH_STENCIL = $84F9;
 GL_UNSIGNED_INT_24_8 = $84FA;
 GL_DEPTH24_STENCIL8 = $88F0;
 GL_TEXTURE_STENCIL_SIZE = $88F1;
 GL_TEXTURE_RED_TYPE = $8C10;
 GL_TEXTURE_GREEN_TYPE = $8C11;
 GL_TEXTURE_BLUE_TYPE = $8C12;
 GL_TEXTURE_ALPHA_TYPE = $8C13;
 GL_TEXTURE_DEPTH_TYPE = $8C16;
 GL_UNSIGNED_NORMALIZED = $8C17;
 GL_FRAMEBUFFER_BINDING = $8CA6;
 GL_DRAW_FRAMEBUFFER_BINDING = $8CA6;
 GL_RENDERBUFFER_BINDING = $8CA7;
 GL_READ_FRAMEBUFFER = $8CA8;
 GL_DRAW_FRAMEBUFFER = $8CA9;
 GL_READ_FRAMEBUFFER_BINDING = $8CAA;
 GL_RENDERBUFFER_SAMPLES = $8CAB;
 GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = $8CD0;
 GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = $8CD1;
 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = $8CD2;
 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = $8CD3;
 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = $8CD4;
 GL_FRAMEBUFFER_COMPLETE = $8CD5;
 GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = $8CD6;
 GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = $8CD7;
 GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = $8CDB;
 GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = $8CDC;
 GL_FRAMEBUFFER_UNSUPPORTED = $8CDD;
 GL_MAX_COLOR_ATTACHMENTS = $8CDF;
 GL_COLOR_ATTACHMENT0 = $8CE0;
 GL_COLOR_ATTACHMENT1 = $8CE1;
 GL_COLOR_ATTACHMENT2 = $8CE2;
 GL_COLOR_ATTACHMENT3 = $8CE3;
 GL_COLOR_ATTACHMENT4 = $8CE4;
 GL_COLOR_ATTACHMENT5 = $8CE5;
 GL_COLOR_ATTACHMENT6 = $8CE6;
 GL_COLOR_ATTACHMENT7 = $8CE7;
 GL_COLOR_ATTACHMENT8 = $8CE8;
 GL_COLOR_ATTACHMENT9 = $8CE9;
 GL_COLOR_ATTACHMENT10 = $8CEA;
 GL_COLOR_ATTACHMENT11 = $8CEB;
 GL_COLOR_ATTACHMENT12 = $8CEC;
 GL_COLOR_ATTACHMENT13 = $8CED;
 GL_COLOR_ATTACHMENT14 = $8CEE;
 GL_COLOR_ATTACHMENT15 = $8CEF;
 GL_DEPTH_ATTACHMENT = $8D00;
 GL_STENCIL_ATTACHMENT = $8D20;
 GL_FRAMEBUFFER = $8D40;
 GL_RENDERBUFFER = $8D41;
 GL_RENDERBUFFER_WIDTH = $8D42;
 GL_RENDERBUFFER_HEIGHT = $8D43;
 GL_RENDERBUFFER_INTERNAL_FORMAT = $8D44;
 GL_STENCIL_INDEX1 = $8D46;
 GL_STENCIL_INDEX4 = $8D47;
 GL_STENCIL_INDEX8 = $8D48;
 GL_STENCIL_INDEX16 = $8D49;
 GL_RENDERBUFFER_RED_SIZE = $8D50;
 GL_RENDERBUFFER_GREEN_SIZE = $8D51;
 GL_RENDERBUFFER_BLUE_SIZE = $8D52;
 GL_RENDERBUFFER_ALPHA_SIZE = $8D53;
 GL_RENDERBUFFER_DEPTH_SIZE = $8D54;
 GL_RENDERBUFFER_STENCIL_SIZE = $8D55;
 GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = $8D56;
 GL_MAX_SAMPLES = $8D57;
 GL_FRAMEBUFFER_SRGB = $8DB9;
 GL_HALF_FLOAT = $140B;
 GL_MAP_READ_BIT = $0001;
 GL_MAP_WRITE_BIT = $0002;
 GL_MAP_INVALIDATE_RANGE_BIT = $0004;
 GL_MAP_INVALIDATE_BUFFER_BIT = $0008;
 GL_MAP_FLUSH_EXPLICIT_BIT = $0010;
 GL_MAP_UNSYNCHRONIZED_BIT = $0020;
 GL_COMPRESSED_RED_RGTC1 = $8DBB;
 GL_COMPRESSED_SIGNED_RED_RGTC1 = $8DBC;
 GL_COMPRESSED_RG_RGTC2 = $8DBD;
 GL_COMPRESSED_SIGNED_RG_RGTC2 = $8DBE;
 GL_RG = $8227;
 GL_RG_INTEGER = $8228;
 GL_R8 = $8229;
 GL_R16 = $822A;
 GL_RG8 = $822B;
 GL_RG16 = $822C;
 GL_R16F = $822D;
 GL_R32F = $822E;
 GL_RG16F = $822F;
 GL_RG32F = $8230;
 GL_R8I = $8231;
 GL_R8UI = $8232;
 GL_R16I = $8233;
 GL_R16UI = $8234;
 GL_R32I = $8235;
 GL_R32UI = $8236;
 GL_RG8I = $8237;
 GL_RG8UI = $8238;
 GL_RG16I = $8239;
 GL_RG16UI = $823A;
 GL_RG32I = $823B;
 GL_RG32UI = $823C;
 GL_VERTEX_ARRAY_BINDING = $85B5;
 GL_SAMPLER_2D_RECT = $8B63;
 GL_SAMPLER_2D_RECT_SHADOW = $8B64;
 GL_SAMPLER_BUFFER = $8DC2;
 GL_INT_SAMPLER_2D_RECT = $8DCD;
 GL_INT_SAMPLER_BUFFER = $8DD0;
 GL_UNSIGNED_INT_SAMPLER_2D_RECT = $8DD5;
 GL_UNSIGNED_INT_SAMPLER_BUFFER = $8DD8;
 GL_TEXTURE_BUFFER = $8C2A;
 GL_MAX_TEXTURE_BUFFER_SIZE = $8C2B;
 GL_TEXTURE_BINDING_BUFFER = $8C2C;
 GL_TEXTURE_BUFFER_DATA_STORE_BINDING = $8C2D;
 GL_TEXTURE_RECTANGLE = $84F5;
 GL_TEXTURE_BINDING_RECTANGLE = $84F6;
 GL_PROXY_TEXTURE_RECTANGLE = $84F7;
 GL_MAX_RECTANGLE_TEXTURE_SIZE = $84F8;
 GL_R8_SNORM = $8F94;
 GL_RG8_SNORM = $8F95;
 GL_RGB8_SNORM = $8F96;
 GL_RGBA8_SNORM = $8F97;
 GL_R16_SNORM = $8F98;
 GL_RG16_SNORM = $8F99;
 GL_RGB16_SNORM = $8F9A;
 GL_RGBA16_SNORM = $8F9B;
 GL_SIGNED_NORMALIZED = $8F9C;
 GL_PRIMITIVE_RESTART = $8F9D;
 GL_PRIMITIVE_RESTART_INDEX = $8F9E;
 GL_COPY_READ_BUFFER = $8F36;
 GL_COPY_WRITE_BUFFER = $8F37;
 GL_UNIFORM_BUFFER = $8A11;
 GL_UNIFORM_BUFFER_BINDING = $8A28;
 GL_UNIFORM_BUFFER_START = $8A29;
 GL_UNIFORM_BUFFER_SIZE = $8A2A;
 GL_MAX_VERTEX_UNIFORM_BLOCKS = $8A2B;
 GL_MAX_GEOMETRY_UNIFORM_BLOCKS = $8A2C;
 GL_MAX_FRAGMENT_UNIFORM_BLOCKS = $8A2D;
 GL_MAX_COMBINED_UNIFORM_BLOCKS = $8A2E;
 GL_MAX_UNIFORM_BUFFER_BINDINGS = $8A2F;
 GL_MAX_UNIFORM_BLOCK_SIZE = $8A30;
 GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = $8A31;
 GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = $8A32;
 GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = $8A33;
 GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = $8A34;
 GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = $8A35;
 GL_ACTIVE_UNIFORM_BLOCKS = $8A36;
 GL_UNIFORM_TYPE = $8A37;
 GL_UNIFORM_SIZE = $8A38;
 GL_UNIFORM_NAME_LENGTH = $8A39;
 GL_UNIFORM_BLOCK_INDEX = $8A3A;
 GL_UNIFORM_OFFSET = $8A3B;
 GL_UNIFORM_ARRAY_STRIDE = $8A3C;
 GL_UNIFORM_MATRIX_STRIDE = $8A3D;
 GL_UNIFORM_IS_ROW_MAJOR = $8A3E;
 GL_UNIFORM_BLOCK_BINDING = $8A3F;
 GL_UNIFORM_BLOCK_DATA_SIZE = $8A40;
 GL_UNIFORM_BLOCK_NAME_LENGTH = $8A41;
 GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = $8A42;
 GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = $8A43;
 GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = $8A44;
 GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = $8A45;
 GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = $8A46;
 GL_INVALID_INDEX = DWord($FFFFFFFF);
 GL_CONTEXT_CORE_PROFILE_BIT = $00000001;
 GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = $00000002;
 GL_LINES_ADJACENCY = $000A;
 GL_LINE_STRIP_ADJACENCY = $000B;
 GL_TRIANGLES_ADJACENCY = $000C;
 GL_TRIANGLE_STRIP_ADJACENCY = $000D;
 GL_PROGRAM_POINT_SIZE = $8642;
 GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = $8C29;
 GL_FRAMEBUFFER_ATTACHMENT_LAYERED = $8DA7;
 GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = $8DA8;
 GL_GEOMETRY_SHADER = $8DD9;
 GL_GEOMETRY_VERTICES_OUT = $8916;
 GL_GEOMETRY_INPUT_TYPE = $8917;
 GL_GEOMETRY_OUTPUT_TYPE = $8918;
 GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = $8DDF;
 GL_MAX_GEOMETRY_OUTPUT_VERTICES = $8DE0;
 GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = $8DE1;
 GL_MAX_VERTEX_OUTPUT_COMPONENTS = $9122;
 GL_MAX_GEOMETRY_INPUT_COMPONENTS = $9123;
 GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = $9124;
 GL_MAX_FRAGMENT_INPUT_COMPONENTS = $9125;
 GL_CONTEXT_PROFILE_MASK = $9126;
 GL_DEPTH_CLAMP = $864F;
 GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = $8E4C;
 GL_FIRST_VERTEX_CONVENTION = $8E4D;
 GL_LAST_VERTEX_CONVENTION = $8E4E;
 GL_PROVOKING_VERTEX = $8E4F;
 GL_TEXTURE_CUBE_MAP_SEAMLESS = $884F;
 GL_MAX_SERVER_WAIT_TIMEOUT = $9111;
 GL_OBJECT_TYPE = $9112;
 GL_SYNC_CONDITION = $9113;
 GL_SYNC_STATUS = $9114;
 GL_SYNC_FLAGS = $9115;
 GL_SYNC_FENCE = $9116;
 GL_SYNC_GPU_COMMANDS_COMPLETE = $9117;
 GL_UNSIGNALED = $9118;
 GL_SIGNALED = $9119;
 GL_ALREADY_SIGNALED = $911A;
 GL_TIMEOUT_EXPIRED = $911B;
 GL_CONDITION_SATISFIED = $911C;
 GL_WAIT_FAILED = $911D;
 GL_TIMEOUT_IGNORED = QWord($FFFFFFFFFFFFFFFF);
 GL_SYNC_FLUSH_COMMANDS_BIT = $00000001;
 GL_SAMPLE_POSITION = $8E50;
 GL_SAMPLE_MASK = $8E51;
 GL_SAMPLE_MASK_VALUE = $8E52;
 GL_MAX_SAMPLE_MASK_WORDS = $8E59;
 GL_TEXTURE_2D_MULTISAMPLE = $9100;
 GL_PROXY_TEXTURE_2D_MULTISAMPLE = $9101;
 GL_TEXTURE_2D_MULTISAMPLE_ARRAY = $9102;
 GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = $9103;
 GL_TEXTURE_BINDING_2D_MULTISAMPLE = $9104;
 GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = $9105;
 GL_TEXTURE_SAMPLES = $9106;
 GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = $9107;
 GL_SAMPLER_2D_MULTISAMPLE = $9108;
 GL_INT_SAMPLER_2D_MULTISAMPLE = $9109;
 GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = $910A;
 GL_SAMPLER_2D_MULTISAMPLE_ARRAY = $910B;
 GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = $910C;
 GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = $910D;
 GL_MAX_COLOR_TEXTURE_SAMPLES = $910E;
 GL_MAX_DEPTH_TEXTURE_SAMPLES = $910F;
 GL_MAX_INTEGER_SAMPLES = $9110;
//16 constants for GL_VERSION_3_3
 GL_VERTEX_ATTRIB_ARRAY_DIVISOR = $88FE;
 GL_SRC1_COLOR = $88F9;
 GL_ONE_MINUS_SRC1_COLOR = $88FA;
 GL_ONE_MINUS_SRC1_ALPHA = $88FB;
 GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = $88FC;
 GL_ANY_SAMPLES_PASSED = $8C2F;
 GL_SAMPLER_BINDING = $8919;
 GL_RGB10_A2UI = $906F;
 GL_TEXTURE_SWIZZLE_R = $8E42;
 GL_TEXTURE_SWIZZLE_G = $8E43;
 GL_TEXTURE_SWIZZLE_B = $8E44;
 GL_TEXTURE_SWIZZLE_A = $8E45;
 GL_TEXTURE_SWIZZLE_RGBA = $8E46;
 GL_TIME_ELAPSED = $88BF;
 GL_TIMESTAMP = $8E28;
 GL_INT_2_10_10_10_REV = $8D9F;
//77 constants for GL_VERSION_4_0
 GL_SAMPLE_SHADING = $8C36;
 GL_MIN_SAMPLE_SHADING_VALUE = $8C37;
 GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = $8E5E;
 GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = $8E5F;
 GL_TEXTURE_CUBE_MAP_ARRAY = $9009;
 GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = $900A;
 GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = $900B;
 GL_SAMPLER_CUBE_MAP_ARRAY = $900C;
 GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = $900D;
 GL_INT_SAMPLER_CUBE_MAP_ARRAY = $900E;
 GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = $900F;
 GL_DRAW_INDIRECT_BUFFER = $8F3F;
 GL_DRAW_INDIRECT_BUFFER_BINDING = $8F43;
 GL_GEOMETRY_SHADER_INVOCATIONS = $887F;
 GL_MAX_GEOMETRY_SHADER_INVOCATIONS = $8E5A;
 GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = $8E5B;
 GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = $8E5C;
 GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = $8E5D;
 GL_MAX_VERTEX_STREAMS = $8E71;
 GL_DOUBLE_VEC2 = $8FFC;
 GL_DOUBLE_VEC3 = $8FFD;
 GL_DOUBLE_VEC4 = $8FFE;
 GL_DOUBLE_MAT2 = $8F46;
 GL_DOUBLE_MAT3 = $8F47;
 GL_DOUBLE_MAT4 = $8F48;
 GL_DOUBLE_MAT2x3 = $8F49;
 GL_DOUBLE_MAT2x4 = $8F4A;
 GL_DOUBLE_MAT3x2 = $8F4B;
 GL_DOUBLE_MAT3x4 = $8F4C;
 GL_DOUBLE_MAT4x2 = $8F4D;
 GL_DOUBLE_MAT4x3 = $8F4E;
 GL_ACTIVE_SUBROUTINES = $8DE5;
 GL_ACTIVE_SUBROUTINE_UNIFORMS = $8DE6;
 GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = $8E47;
 GL_ACTIVE_SUBROUTINE_MAX_LENGTH = $8E48;
 GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = $8E49;
 GL_MAX_SUBROUTINES = $8DE7;
 GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = $8DE8;
 GL_NUM_COMPATIBLE_SUBROUTINES = $8E4A;
 GL_COMPATIBLE_SUBROUTINES = $8E4B;
 GL_PATCHES = $000E;
 GL_PATCH_VERTICES = $8E72;
 GL_PATCH_DEFAULT_INNER_LEVEL = $8E73;
 GL_PATCH_DEFAULT_OUTER_LEVEL = $8E74;
 GL_TESS_CONTROL_OUTPUT_VERTICES = $8E75;
 GL_TESS_GEN_MODE = $8E76;
 GL_TESS_GEN_SPACING = $8E77;
 GL_TESS_GEN_VERTEX_ORDER = $8E78;
 GL_TESS_GEN_POINT_MODE = $8E79;
 GL_ISOLINES = $8E7A;
 GL_FRACTIONAL_ODD = $8E7B;
 GL_FRACTIONAL_EVEN = $8E7C;
 GL_MAX_PATCH_VERTICES = $8E7D;
 GL_MAX_TESS_GEN_LEVEL = $8E7E;
 GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = $8E7F;
 GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = $8E80;
 GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = $8E81;
 GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = $8E82;
 GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = $8E83;
 GL_MAX_TESS_PATCH_COMPONENTS = $8E84;
 GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = $8E85;
 GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = $8E86;
 GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = $8E89;
 GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = $8E8A;
 GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = $886C;
 GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = $886D;
 GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = $8E1E;
 GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = $8E1F;
 GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = $84F0;
 GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = $84F1;
 GL_TESS_EVALUATION_SHADER = $8E87;
 GL_TESS_CONTROL_SHADER = $8E88;
 GL_TRANSFORM_FEEDBACK = $8E22;
 GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = $8E23;
 GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = $8E24;
 GL_TRANSFORM_FEEDBACK_BINDING = $8E25;
 GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = $8E70;
//35 constants for GL_VERSION_4_1
 GL_FIXED = $140C;
 GL_IMPLEMENTATION_COLOR_READ_TYPE = $8B9A;
 GL_IMPLEMENTATION_COLOR_READ_FORMAT = $8B9B;
 GL_LOW_FLOAT = $8DF0;
 GL_MEDIUM_FLOAT = $8DF1;
 GL_HIGH_FLOAT = $8DF2;
 GL_LOW_INT = $8DF3;
 GL_MEDIUM_INT = $8DF4;
 GL_HIGH_INT = $8DF5;
 GL_SHADER_COMPILER = $8DFA;
 GL_SHADER_BINARY_FORMATS = $8DF8;
 GL_NUM_SHADER_BINARY_FORMATS = $8DF9;
 GL_MAX_VERTEX_UNIFORM_VECTORS = $8DFB;
 GL_MAX_VARYING_VECTORS = $8DFC;
 GL_MAX_FRAGMENT_UNIFORM_VECTORS = $8DFD;
 GL_RGB565 = $8D62;
 GL_PROGRAM_BINARY_RETRIEVABLE_HINT = $8257;
 GL_PROGRAM_BINARY_LENGTH = $8741;
 GL_NUM_PROGRAM_BINARY_FORMATS = $87FE;
 GL_PROGRAM_BINARY_FORMATS = $87FF;
 GL_VERTEX_SHADER_BIT = $00000001;
 GL_FRAGMENT_SHADER_BIT = $00000002;
 GL_GEOMETRY_SHADER_BIT = $00000004;
 GL_TESS_CONTROL_SHADER_BIT = $00000008;
 GL_TESS_EVALUATION_SHADER_BIT = $00000010;
 GL_ALL_SHADER_BITS = $FFFFFFFF;
 GL_PROGRAM_SEPARABLE = $8258;
 GL_ACTIVE_PROGRAM = $8259;
 GL_PROGRAM_PIPELINE_BINDING = $825A;
 GL_MAX_VIEWPORTS = $825B;
 GL_VIEWPORT_SUBPIXEL_BITS = $825C;
 GL_VIEWPORT_BOUNDS_RANGE = $825D;
 GL_LAYER_PROVOKING_VERTEX = $825E;
 GL_VIEWPORT_INDEX_PROVOKING_VERTEX = $825F;
 GL_UNDEFINED_VERTEX = $8260;
//112 constants for GL_VERSION_4_2
 GL_COPY_READ_BUFFER_BINDING = $8F36;
 GL_COPY_WRITE_BUFFER_BINDING = $8F37;
 GL_TRANSFORM_FEEDBACK_ACTIVE = $8E24;
 GL_TRANSFORM_FEEDBACK_PAUSED = $8E23;
 GL_UNPACK_COMPRESSED_BLOCK_WIDTH = $9127;
 GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = $9128;
 GL_UNPACK_COMPRESSED_BLOCK_DEPTH = $9129;
 GL_UNPACK_COMPRESSED_BLOCK_SIZE = $912A;
 GL_PACK_COMPRESSED_BLOCK_WIDTH = $912B;
 GL_PACK_COMPRESSED_BLOCK_HEIGHT = $912C;
 GL_PACK_COMPRESSED_BLOCK_DEPTH = $912D;
 GL_PACK_COMPRESSED_BLOCK_SIZE = $912E;
 GL_NUM_SAMPLE_COUNTS = $9380;
 GL_MIN_MAP_BUFFER_ALIGNMENT = $90BC;
 GL_ATOMIC_COUNTER_BUFFER = $92C0;
 GL_ATOMIC_COUNTER_BUFFER_BINDING = $92C1;
 GL_ATOMIC_COUNTER_BUFFER_START = $92C2;
 GL_ATOMIC_COUNTER_BUFFER_SIZE = $92C3;
 GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = $92C4;
 GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = $92C5;
 GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = $92C6;
 GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = $92C7;
 GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = $92C8;
 GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = $92C9;
 GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = $92CA;
 GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = $92CB;
 GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = $92CC;
 GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = $92CD;
 GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = $92CE;
 GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = $92CF;
 GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = $92D0;
 GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = $92D1;
 GL_MAX_VERTEX_ATOMIC_COUNTERS = $92D2;
 GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = $92D3;
 GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = $92D4;
 GL_MAX_GEOMETRY_ATOMIC_COUNTERS = $92D5;
 GL_MAX_FRAGMENT_ATOMIC_COUNTERS = $92D6;
 GL_MAX_COMBINED_ATOMIC_COUNTERS = $92D7;
 GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = $92D8;
 GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = $92DC;
 GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = $92D9;
 GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = $92DA;
 GL_UNSIGNED_INT_ATOMIC_COUNTER = $92DB;
 GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = $00000001;
 GL_ELEMENT_ARRAY_BARRIER_BIT = $00000002;
 GL_UNIFORM_BARRIER_BIT = $00000004;
 GL_TEXTURE_FETCH_BARRIER_BIT = $00000008;
 GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = $00000020;
 GL_COMMAND_BARRIER_BIT = $00000040;
 GL_PIXEL_BUFFER_BARRIER_BIT = $00000080;
 GL_TEXTURE_UPDATE_BARRIER_BIT = $00000100;
 GL_BUFFER_UPDATE_BARRIER_BIT = $00000200;
 GL_FRAMEBUFFER_BARRIER_BIT = $00000400;
 GL_TRANSFORM_FEEDBACK_BARRIER_BIT = $00000800;
 GL_ATOMIC_COUNTER_BARRIER_BIT = $00001000;
 GL_ALL_BARRIER_BITS = $FFFFFFFF;
 GL_MAX_IMAGE_UNITS = $8F38;
 GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = $8F39;
 GL_IMAGE_BINDING_NAME = $8F3A;
 GL_IMAGE_BINDING_LEVEL = $8F3B;
 GL_IMAGE_BINDING_LAYERED = $8F3C;
 GL_IMAGE_BINDING_LAYER = $8F3D;
 GL_IMAGE_BINDING_ACCESS = $8F3E;
 GL_IMAGE_1D = $904C;
 GL_IMAGE_2D = $904D;
 GL_IMAGE_3D = $904E;
 GL_IMAGE_2D_RECT = $904F;
 GL_IMAGE_CUBE = $9050;
 GL_IMAGE_BUFFER = $9051;
 GL_IMAGE_1D_ARRAY = $9052;
 GL_IMAGE_2D_ARRAY = $9053;
 GL_IMAGE_CUBE_MAP_ARRAY = $9054;
 GL_IMAGE_2D_MULTISAMPLE = $9055;
 GL_IMAGE_2D_MULTISAMPLE_ARRAY = $9056;
 GL_INT_IMAGE_1D = $9057;
 GL_INT_IMAGE_2D = $9058;
 GL_INT_IMAGE_3D = $9059;
 GL_INT_IMAGE_2D_RECT = $905A;
 GL_INT_IMAGE_CUBE = $905B;
 GL_INT_IMAGE_BUFFER = $905C;
 GL_INT_IMAGE_1D_ARRAY = $905D;
 GL_INT_IMAGE_2D_ARRAY = $905E;
 GL_INT_IMAGE_CUBE_MAP_ARRAY = $905F;
 GL_INT_IMAGE_2D_MULTISAMPLE = $9060;
 GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = $9061;
 GL_UNSIGNED_INT_IMAGE_1D = $9062;
 GL_UNSIGNED_INT_IMAGE_2D = $9063;
 GL_UNSIGNED_INT_IMAGE_3D = $9064;
 GL_UNSIGNED_INT_IMAGE_2D_RECT = $9065;
 GL_UNSIGNED_INT_IMAGE_CUBE = $9066;
 GL_UNSIGNED_INT_IMAGE_BUFFER = $9067;
 GL_UNSIGNED_INT_IMAGE_1D_ARRAY = $9068;
 GL_UNSIGNED_INT_IMAGE_2D_ARRAY = $9069;
 GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = $906A;
 GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = $906B;
 GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = $906C;
 GL_MAX_IMAGE_SAMPLES = $906D;
 GL_IMAGE_BINDING_FORMAT = $906E;
 GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = $90C7;
 GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = $90C8;
 GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = $90C9;
 GL_MAX_VERTEX_IMAGE_UNIFORMS = $90CA;
 GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = $90CB;
 GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = $90CC;
 GL_MAX_GEOMETRY_IMAGE_UNIFORMS = $90CD;
 GL_MAX_FRAGMENT_IMAGE_UNIFORMS = $90CE;
 GL_MAX_COMBINED_IMAGE_UNIFORMS = $90CF;
 GL_COMPRESSED_RGBA_BPTC_UNORM = $8E8C;
 GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = $8E8D;
 GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = $8E8E;
 GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = $8E8F;
 GL_TEXTURE_IMMUTABLE_FORMAT = $912F;
//258 constants for GL_VERSION_4_3
 GL_NUM_SHADING_LANGUAGE_VERSIONS = $82E9;
 GL_VERTEX_ATTRIB_ARRAY_LONG = $874E;
 GL_COMPRESSED_RGB8_ETC2 = $9274;
 GL_COMPRESSED_SRGB8_ETC2 = $9275;
 GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = $9276;
 GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = $9277;
 GL_COMPRESSED_RGBA8_ETC2_EAC = $9278;
 GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = $9279;
 GL_COMPRESSED_R11_EAC = $9270;
 GL_COMPRESSED_SIGNED_R11_EAC = $9271;
 GL_COMPRESSED_RG11_EAC = $9272;
 GL_COMPRESSED_SIGNED_RG11_EAC = $9273;
 GL_PRIMITIVE_RESTART_FIXED_INDEX = $8D69;
 GL_ANY_SAMPLES_PASSED_CONSERVATIVE = $8D6A;
 GL_MAX_ELEMENT_INDEX = $8D6B;
 GL_COMPUTE_SHADER = $91B9;
 GL_MAX_COMPUTE_UNIFORM_BLOCKS = $91BB;
 GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = $91BC;
 GL_MAX_COMPUTE_IMAGE_UNIFORMS = $91BD;
 GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = $8262;
 GL_MAX_COMPUTE_UNIFORM_COMPONENTS = $8263;
 GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = $8264;
 GL_MAX_COMPUTE_ATOMIC_COUNTERS = $8265;
 GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = $8266;
 GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = $90EB;
 GL_MAX_COMPUTE_WORK_GROUP_COUNT = $91BE;
 GL_MAX_COMPUTE_WORK_GROUP_SIZE = $91BF;
 GL_COMPUTE_WORK_GROUP_SIZE = $8267;
 GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = $90EC;
 GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = $90ED;
 GL_DISPATCH_INDIRECT_BUFFER = $90EE;
 GL_DISPATCH_INDIRECT_BUFFER_BINDING = $90EF;
 GL_COMPUTE_SHADER_BIT = $00000020;
 GL_DEBUG_OUTPUT_SYNCHRONOUS = $8242;
 GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = $8243;
 GL_DEBUG_CALLBACK_FUNCTION = $8244;
 GL_DEBUG_CALLBACK_USER_PARAM = $8245;
 GL_DEBUG_SOURCE_API = $8246;
 GL_DEBUG_SOURCE_WINDOW_SYSTEM = $8247;
 GL_DEBUG_SOURCE_SHADER_COMPILER = $8248;
 GL_DEBUG_SOURCE_THIRD_PARTY = $8249;
 GL_DEBUG_SOURCE_APPLICATION = $824A;
 GL_DEBUG_SOURCE_OTHER = $824B;
 GL_DEBUG_TYPE_ERROR = $824C;
 GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = $824D;
 GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = $824E;
 GL_DEBUG_TYPE_PORTABILITY = $824F;
 GL_DEBUG_TYPE_PERFORMANCE = $8250;
 GL_DEBUG_TYPE_OTHER = $8251;
 GL_MAX_DEBUG_MESSAGE_LENGTH = $9143;
 GL_MAX_DEBUG_LOGGED_MESSAGES = $9144;
 GL_DEBUG_LOGGED_MESSAGES = $9145;
 GL_DEBUG_SEVERITY_HIGH = $9146;
 GL_DEBUG_SEVERITY_MEDIUM = $9147;
 GL_DEBUG_SEVERITY_LOW = $9148;
 GL_DEBUG_TYPE_MARKER = $8268;
 GL_DEBUG_TYPE_PUSH_GROUP = $8269;
 GL_DEBUG_TYPE_POP_GROUP = $826A;
 GL_DEBUG_SEVERITY_NOTIFICATION = $826B;
 GL_MAX_DEBUG_GROUP_STACK_DEPTH = $826C;
 GL_DEBUG_GROUP_STACK_DEPTH = $826D;
 GL_BUFFER = $82E0;
 GL_SHADER = $82E1;
 GL_PROGRAM = $82E2;
 GL_QUERY = $82E3;
 GL_PROGRAM_PIPELINE = $82E4;
 GL_SAMPLER = $82E6;
 GL_MAX_LABEL_LENGTH = $82E8;
 GL_DEBUG_OUTPUT = $92E0;
 GL_CONTEXT_FLAG_DEBUG_BIT = $00000002;
 GL_MAX_UNIFORM_LOCATIONS = $826E;
 GL_FRAMEBUFFER_DEFAULT_WIDTH = $9310;
 GL_FRAMEBUFFER_DEFAULT_HEIGHT = $9311;
 GL_FRAMEBUFFER_DEFAULT_LAYERS = $9312;
 GL_FRAMEBUFFER_DEFAULT_SAMPLES = $9313;
 GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = $9314;
 GL_MAX_FRAMEBUFFER_WIDTH = $9315;
 GL_MAX_FRAMEBUFFER_HEIGHT = $9316;
 GL_MAX_FRAMEBUFFER_LAYERS = $9317;
 GL_MAX_FRAMEBUFFER_SAMPLES = $9318;
 GL_INTERNALFORMAT_SUPPORTED = $826F;
 GL_INTERNALFORMAT_PREFERRED = $8270;
 GL_INTERNALFORMAT_RED_SIZE = $8271;
 GL_INTERNALFORMAT_GREEN_SIZE = $8272;
 GL_INTERNALFORMAT_BLUE_SIZE = $8273;
 GL_INTERNALFORMAT_ALPHA_SIZE = $8274;
 GL_INTERNALFORMAT_DEPTH_SIZE = $8275;
 GL_INTERNALFORMAT_STENCIL_SIZE = $8276;
 GL_INTERNALFORMAT_SHARED_SIZE = $8277;
 GL_INTERNALFORMAT_RED_TYPE = $8278;
 GL_INTERNALFORMAT_GREEN_TYPE = $8279;
 GL_INTERNALFORMAT_BLUE_TYPE = $827A;
 GL_INTERNALFORMAT_ALPHA_TYPE = $827B;
 GL_INTERNALFORMAT_DEPTH_TYPE = $827C;
 GL_INTERNALFORMAT_STENCIL_TYPE = $827D;
 GL_MAX_WIDTH = $827E;
 GL_MAX_HEIGHT = $827F;
 GL_MAX_DEPTH = $8280;
 GL_MAX_LAYERS = $8281;
 GL_MAX_COMBINED_DIMENSIONS = $8282;
 GL_COLOR_COMPONENTS = $8283;
 GL_DEPTH_COMPONENTS = $8284;
 GL_STENCIL_COMPONENTS = $8285;
 GL_COLOR_RENDERABLE = $8286;
 GL_DEPTH_RENDERABLE = $8287;
 GL_STENCIL_RENDERABLE = $8288;
 GL_FRAMEBUFFER_RENDERABLE = $8289;
 GL_FRAMEBUFFER_RENDERABLE_LAYERED = $828A;
 GL_FRAMEBUFFER_BLEND = $828B;
 GL_READ_PIXELS = $828C;
 GL_READ_PIXELS_FORMAT = $828D;
 GL_READ_PIXELS_TYPE = $828E;
 GL_TEXTURE_IMAGE_FORMAT = $828F;
 GL_TEXTURE_IMAGE_TYPE = $8290;
 GL_GET_TEXTURE_IMAGE_FORMAT = $8291;
 GL_GET_TEXTURE_IMAGE_TYPE = $8292;
 GL_MIPMAP = $8293;
 GL_MANUAL_GENERATE_MIPMAP = $8294;
 GL_AUTO_GENERATE_MIPMAP = $8295;
 GL_COLOR_ENCODING = $8296;
 GL_SRGB_READ = $8297;
 GL_SRGB_WRITE = $8298;
 GL_FILTER = $829A;
 GL_VERTEX_TEXTURE = $829B;
 GL_TESS_CONTROL_TEXTURE = $829C;
 GL_TESS_EVALUATION_TEXTURE = $829D;
 GL_GEOMETRY_TEXTURE = $829E;
 GL_FRAGMENT_TEXTURE = $829F;
 GL_COMPUTE_TEXTURE = $82A0;
 GL_TEXTURE_SHADOW = $82A1;
 GL_TEXTURE_GATHER = $82A2;
 GL_TEXTURE_GATHER_SHADOW = $82A3;
 GL_SHADER_IMAGE_LOAD = $82A4;
 GL_SHADER_IMAGE_STORE = $82A5;
 GL_SHADER_IMAGE_ATOMIC = $82A6;
 GL_IMAGE_TEXEL_SIZE = $82A7;
 GL_IMAGE_COMPATIBILITY_CLASS = $82A8;
 GL_IMAGE_PIXEL_FORMAT = $82A9;
 GL_IMAGE_PIXEL_TYPE = $82AA;
 GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = $82AC;
 GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = $82AD;
 GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = $82AE;
 GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = $82AF;
 GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = $82B1;
 GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = $82B2;
 GL_TEXTURE_COMPRESSED_BLOCK_SIZE = $82B3;
 GL_CLEAR_BUFFER = $82B4;
 GL_TEXTURE_VIEW = $82B5;
 GL_VIEW_COMPATIBILITY_CLASS = $82B6;
 GL_FULL_SUPPORT = $82B7;
 GL_CAVEAT_SUPPORT = $82B8;
 GL_IMAGE_CLASS_4_X_32 = $82B9;
 GL_IMAGE_CLASS_2_X_32 = $82BA;
 GL_IMAGE_CLASS_1_X_32 = $82BB;
 GL_IMAGE_CLASS_4_X_16 = $82BC;
 GL_IMAGE_CLASS_2_X_16 = $82BD;
 GL_IMAGE_CLASS_1_X_16 = $82BE;
 GL_IMAGE_CLASS_4_X_8 = $82BF;
 GL_IMAGE_CLASS_2_X_8 = $82C0;
 GL_IMAGE_CLASS_1_X_8 = $82C1;
 GL_IMAGE_CLASS_11_11_10 = $82C2;
 GL_IMAGE_CLASS_10_10_10_2 = $82C3;
 GL_VIEW_CLASS_128_BITS = $82C4;
 GL_VIEW_CLASS_96_BITS = $82C5;
 GL_VIEW_CLASS_64_BITS = $82C6;
 GL_VIEW_CLASS_48_BITS = $82C7;
 GL_VIEW_CLASS_32_BITS = $82C8;
 GL_VIEW_CLASS_24_BITS = $82C9;
 GL_VIEW_CLASS_16_BITS = $82CA;
 GL_VIEW_CLASS_8_BITS = $82CB;
 GL_VIEW_CLASS_S3TC_DXT1_RGB = $82CC;
 GL_VIEW_CLASS_S3TC_DXT1_RGBA = $82CD;
 GL_VIEW_CLASS_S3TC_DXT3_RGBA = $82CE;
 GL_VIEW_CLASS_S3TC_DXT5_RGBA = $82CF;
 GL_VIEW_CLASS_RGTC1_RED = $82D0;
 GL_VIEW_CLASS_RGTC2_RG = $82D1;
 GL_VIEW_CLASS_BPTC_UNORM = $82D2;
 GL_VIEW_CLASS_BPTC_FLOAT = $82D3;
 GL_UNIFORM = $92E1;
 GL_UNIFORM_BLOCK = $92E2;
 GL_PROGRAM_INPUT = $92E3;
 GL_PROGRAM_OUTPUT = $92E4;
 GL_BUFFER_VARIABLE = $92E5;
 GL_SHADER_STORAGE_BLOCK = $92E6;
 GL_VERTEX_SUBROUTINE = $92E8;
 GL_TESS_CONTROL_SUBROUTINE = $92E9;
 GL_TESS_EVALUATION_SUBROUTINE = $92EA;
 GL_GEOMETRY_SUBROUTINE = $92EB;
 GL_FRAGMENT_SUBROUTINE = $92EC;
 GL_COMPUTE_SUBROUTINE = $92ED;
 GL_VERTEX_SUBROUTINE_UNIFORM = $92EE;
 GL_TESS_CONTROL_SUBROUTINE_UNIFORM = $92EF;
 GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = $92F0;
 GL_GEOMETRY_SUBROUTINE_UNIFORM = $92F1;
 GL_FRAGMENT_SUBROUTINE_UNIFORM = $92F2;
 GL_COMPUTE_SUBROUTINE_UNIFORM = $92F3;
 GL_TRANSFORM_FEEDBACK_VARYING = $92F4;
 GL_ACTIVE_RESOURCES = $92F5;
 GL_MAX_NAME_LENGTH = $92F6;
 GL_MAX_NUM_ACTIVE_VARIABLES = $92F7;
 GL_MAX_NUM_COMPATIBLE_SUBROUTINES = $92F8;
 GL_NAME_LENGTH = $92F9;
 GL_TYPE = $92FA;
 GL_ARRAY_SIZE = $92FB;
 GL_OFFSET = $92FC;
 GL_BLOCK_INDEX = $92FD;
 GL_ARRAY_STRIDE = $92FE;
 GL_MATRIX_STRIDE = $92FF;
 GL_IS_ROW_MAJOR = $9300;
 GL_ATOMIC_COUNTER_BUFFER_INDEX = $9301;
 GL_BUFFER_BINDING = $9302;
 GL_BUFFER_DATA_SIZE = $9303;
 GL_NUM_ACTIVE_VARIABLES = $9304;
 GL_ACTIVE_VARIABLES = $9305;
 GL_REFERENCED_BY_VERTEX_SHADER = $9306;
 GL_REFERENCED_BY_TESS_CONTROL_SHADER = $9307;
 GL_REFERENCED_BY_TESS_EVALUATION_SHADER = $9308;
 GL_REFERENCED_BY_GEOMETRY_SHADER = $9309;
 GL_REFERENCED_BY_FRAGMENT_SHADER = $930A;
 GL_REFERENCED_BY_COMPUTE_SHADER = $930B;
 GL_TOP_LEVEL_ARRAY_SIZE = $930C;
 GL_TOP_LEVEL_ARRAY_STRIDE = $930D;
 GL_LOCATION = $930E;
 GL_LOCATION_INDEX = $930F;
 GL_IS_PER_PATCH = $92E7;
 GL_SHADER_STORAGE_BUFFER = $90D2;
 GL_SHADER_STORAGE_BUFFER_BINDING = $90D3;
 GL_SHADER_STORAGE_BUFFER_START = $90D4;
 GL_SHADER_STORAGE_BUFFER_SIZE = $90D5;
 GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = $90D6;
 GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = $90D7;
 GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = $90D8;
 GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = $90D9;
 GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = $90DA;
 GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = $90DB;
 GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = $90DC;
 GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = $90DD;
 GL_MAX_SHADER_STORAGE_BLOCK_SIZE = $90DE;
 GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = $90DF;
 GL_SHADER_STORAGE_BARRIER_BIT = $00002000;
 GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = $8F39;
 GL_DEPTH_STENCIL_TEXTURE_MODE = $90EA;
 GL_TEXTURE_BUFFER_OFFSET = $919D;
 GL_TEXTURE_BUFFER_SIZE = $919E;
 GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = $919F;
 GL_TEXTURE_VIEW_MIN_LEVEL = $82DB;
 GL_TEXTURE_VIEW_NUM_LEVELS = $82DC;
 GL_TEXTURE_VIEW_MIN_LAYER = $82DD;
 GL_TEXTURE_VIEW_NUM_LAYERS = $82DE;
 GL_TEXTURE_IMMUTABLE_LEVELS = $82DF;
 GL_VERTEX_ATTRIB_BINDING = $82D4;
 GL_VERTEX_ATTRIB_RELATIVE_OFFSET = $82D5;
 GL_VERTEX_BINDING_DIVISOR = $82D6;
 GL_VERTEX_BINDING_OFFSET = $82D7;
 GL_VERTEX_BINDING_STRIDE = $82D8;
 GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = $82D9;
 GL_MAX_VERTEX_ATTRIB_BINDINGS = $82DA;
 GL_VERTEX_BINDING_BUFFER = $8F4F;
//19 constants for GL_VERSION_4_4
 GL_MAX_VERTEX_ATTRIB_STRIDE = $82E5;
 GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = $8221;
 GL_TEXTURE_BUFFER_BINDING = $8C2A;
 GL_MAP_PERSISTENT_BIT = $0040;
 GL_MAP_COHERENT_BIT = $0080;
 GL_DYNAMIC_STORAGE_BIT = $0100;
 GL_CLIENT_STORAGE_BIT = $0200;
 GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = $00004000;
 GL_BUFFER_IMMUTABLE_STORAGE = $821F;
 GL_BUFFER_STORAGE_FLAGS = $8220;
 GL_CLEAR_TEXTURE = $9365;
 GL_LOCATION_COMPONENT = $934A;
 GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = $934B;
 GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = $934C;
 GL_QUERY_BUFFER = $9192;
 GL_QUERY_BUFFER_BARRIER_BIT = $00008000;
 GL_QUERY_BUFFER_BINDING = $9193;
 GL_QUERY_RESULT_NO_WAIT = $9194;
 GL_MIRROR_CLAMP_TO_EDGE = $8743;
//22 constants for GL_VERSION_4_5
 GL_CONTEXT_LOST = $0507;
 GL_NEGATIVE_ONE_TO_ONE = $935E;
 GL_ZERO_TO_ONE = $935F;
 GL_CLIP_ORIGIN = $935C;
 GL_CLIP_DEPTH_MODE = $935D;
 GL_QUERY_WAIT_INVERTED = $8E17;
 GL_QUERY_NO_WAIT_INVERTED = $8E18;
 GL_QUERY_BY_REGION_WAIT_INVERTED = $8E19;
 GL_QUERY_BY_REGION_NO_WAIT_INVERTED = $8E1A;
 GL_MAX_CULL_DISTANCES = $82F9;
 GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = $82FA;
 GL_TEXTURE_TARGET = $1006;
 GL_QUERY_TARGET = $82EA;
 GL_GUILTY_CONTEXT_RESET = $8253;
 GL_INNOCENT_CONTEXT_RESET = $8254;
 GL_UNKNOWN_CONTEXT_RESET = $8255;
 GL_RESET_NOTIFICATION_STRATEGY = $8256;
 GL_LOSE_CONTEXT_ON_RESET = $8252;
 GL_NO_RESET_NOTIFICATION = $8261;
 GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = $00000004;
 GL_CONTEXT_RELEASE_BEHAVIOR = $82FB;
 GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = $82FC;
//114 constants for GL_ARB
 GL_UNSIGNED_INT64_ARB = $140F;
 GL_SYNC_CL_EVENT_ARB = $8240;
 GL_SYNC_CL_EVENT_COMPLETE_ARB = $8241;
 GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = $9344;
 GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = $90EB;
 GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = $9345;
 GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = $91BF;
 GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = $8242;
 GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = $8243;
 GL_DEBUG_CALLBACK_FUNCTION_ARB = $8244;
 GL_DEBUG_CALLBACK_USER_PARAM_ARB = $8245;
 GL_DEBUG_SOURCE_API_ARB = $8246;
 GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = $8247;
 GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = $8248;
 GL_DEBUG_SOURCE_THIRD_PARTY_ARB = $8249;
 GL_DEBUG_SOURCE_APPLICATION_ARB = $824A;
 GL_DEBUG_SOURCE_OTHER_ARB = $824B;
 GL_DEBUG_TYPE_ERROR_ARB = $824C;
 GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = $824D;
 GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = $824E;
 GL_DEBUG_TYPE_PORTABILITY_ARB = $824F;
 GL_DEBUG_TYPE_PERFORMANCE_ARB = $8250;
 GL_DEBUG_TYPE_OTHER_ARB = $8251;
 GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = $9143;
 GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = $9144;
 GL_DEBUG_LOGGED_MESSAGES_ARB = $9145;
 GL_DEBUG_SEVERITY_HIGH_ARB = $9146;
 GL_DEBUG_SEVERITY_MEDIUM_ARB = $9147;
 GL_DEBUG_SEVERITY_LOW_ARB = $9148;
 GL_BLEND_COLOR = $8005;
 GL_BLEND_EQUATION = $8009;
 GL_PARAMETER_BUFFER_ARB = $80EE;
 GL_PARAMETER_BUFFER_BINDING_ARB = $80EF;
 GL_SRGB_DECODE_ARB = $8299;
 GL_VERTICES_SUBMITTED_ARB = $82EE;
 GL_PRIMITIVES_SUBMITTED_ARB = $82EF;
 GL_VERTEX_SHADER_INVOCATIONS_ARB = $82F0;
 GL_TESS_CONTROL_SHADER_PATCHES_ARB = $82F1;
 GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = $82F2;
 GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = $82F3;
 GL_FRAGMENT_SHADER_INVOCATIONS_ARB = $82F4;
 GL_COMPUTE_SHADER_INVOCATIONS_ARB = $82F5;
 GL_CLIPPING_INPUT_PRIMITIVES_ARB = $82F6;
 GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = $82F7;
 GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = $00000004;
 GL_LOSE_CONTEXT_ON_RESET_ARB = $8252;
 GL_GUILTY_CONTEXT_RESET_ARB = $8253;
 GL_INNOCENT_CONTEXT_RESET_ARB = $8254;
 GL_UNKNOWN_CONTEXT_RESET_ARB = $8255;
 GL_RESET_NOTIFICATION_STRATEGY_ARB = $8256;
 GL_NO_RESET_NOTIFICATION_ARB = $8261;
 GL_SAMPLE_SHADING_ARB = $8C36;
 GL_MIN_SAMPLE_SHADING_VALUE_ARB = $8C37;
 GL_SHADER_INCLUDE_ARB = $8DAE;
 GL_NAMED_STRING_LENGTH_ARB = $8DE9;
 GL_NAMED_STRING_TYPE_ARB = $8DEA;
 GL_SPARSE_STORAGE_BIT_ARB = $0400;
 GL_SPARSE_BUFFER_PAGE_SIZE_ARB = $82F8;
 GL_TEXTURE_SPARSE_ARB = $91A6;
 GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = $91A7;
 GL_NUM_SPARSE_LEVELS_ARB = $91AA;
 GL_NUM_VIRTUAL_PAGE_SIZES_ARB = $91A8;
 GL_VIRTUAL_PAGE_SIZE_X_ARB = $9195;
 GL_VIRTUAL_PAGE_SIZE_Y_ARB = $9196;
 GL_VIRTUAL_PAGE_SIZE_Z_ARB = $9197;
 GL_MAX_SPARSE_TEXTURE_SIZE_ARB = $9198;
 GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = $9199;
 GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = $919A;
 GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = $91A9;
 GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = $8E8C;
 GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = $8E8D;
 GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = $8E8E;
 GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = $8E8F;
 GL_TEXTURE_CUBE_MAP_ARRAY_ARB = $9009;
 GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = $900A;
 GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = $900B;
 GL_SAMPLER_CUBE_MAP_ARRAY_ARB = $900C;
 GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = $900D;
 GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = $900E;
 GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = $900F;
 GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = $8E5E;
 GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = $8E5F;
 GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = $8F9F;
 GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = $82EC;
 GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = $82ED;
 GL_CONTEXT_ROBUST_ACCESS = $90F3;
 GL_COMPRESSED_RGBA_ASTC_4x4_KHR = $93B0;
 GL_COMPRESSED_RGBA_ASTC_5x4_KHR = $93B1;
 GL_COMPRESSED_RGBA_ASTC_5x5_KHR = $93B2;
 GL_COMPRESSED_RGBA_ASTC_6x5_KHR = $93B3;
 GL_COMPRESSED_RGBA_ASTC_6x6_KHR = $93B4;
 GL_COMPRESSED_RGBA_ASTC_8x5_KHR = $93B5;
 GL_COMPRESSED_RGBA_ASTC_8x6_KHR = $93B6;
 GL_COMPRESSED_RGBA_ASTC_8x8_KHR = $93B7;
 GL_COMPRESSED_RGBA_ASTC_10x5_KHR = $93B8;
 GL_COMPRESSED_RGBA_ASTC_10x6_KHR = $93B9;
 GL_COMPRESSED_RGBA_ASTC_10x8_KHR = $93BA;
 GL_COMPRESSED_RGBA_ASTC_10x10_KHR = $93BB;
 GL_COMPRESSED_RGBA_ASTC_12x10_KHR = $93BC;
 GL_COMPRESSED_RGBA_ASTC_12x12_KHR = $93BD;
 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = $93D0;
 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = $93D1;
 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = $93D2;
 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = $93D3;
 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = $93D4;
 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = $93D5;
 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = $93D6;
 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = $93D7;
 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = $93D8;
 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = $93D9;
 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = $93DA;
 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = $93DB;
 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = $93DC;
 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = $93DD;

var
//317 procedures for GL_VERSION_3_2
 glCullFace: procedure(mode: GLenum); extdecl;
 glFrontFace: procedure(mode: GLenum); extdecl;
 glHint: procedure(target: GLenum; mode: GLenum); extdecl;
 glLineWidth: procedure(width: GLfloat); extdecl;
 glPointSize: procedure(size: GLfloat); extdecl;
 glPolygonMode: procedure(face: GLenum; mode: GLenum); extdecl;
 glScissor: procedure(x: GLint; y: GLint; width: GLsizei; height: GLsizei); extdecl;
 glTexParameterf: procedure(target: GLenum; pname: GLenum; param: GLfloat); extdecl;
 glTexParameterfv: procedure(target: GLenum; pname: GLenum; const params: PGLfloat); extdecl;
 glTexParameteri: procedure(target: GLenum; pname: GLenum; param: GLint); extdecl;
 glTexParameteriv: procedure(target: GLenum; pname: GLenum; const params: PGLint); extdecl;
 glTexImage1D: procedure(target: GLenum; level: GLint; internalformat: GLint; width: GLsizei; border: GLint; format: GLenum; _type: GLenum; const pixels: PGLvoid); extdecl;
 glTexImage2D: procedure(target: GLenum; level: GLint; internalformat: GLint; width: GLsizei; height: GLsizei; border: GLint; format: GLenum; _type: GLenum; const pixels: PGLvoid); extdecl;
 glDrawBuffer: procedure(buf: GLenum); extdecl;
 glClear: procedure(mask: GLbitfield); extdecl;
 glClearColor: procedure(red: GLfloat; green: GLfloat; blue: GLfloat; alpha: GLfloat); extdecl;
 glClearStencil: procedure(s: GLint); extdecl;
 glClearDepth: procedure(depth: GLdouble); extdecl;
 glStencilMask: procedure(mask: GLuint); extdecl;
 glColorMask: procedure(red: GLboolean; green: GLboolean; blue: GLboolean; alpha: GLboolean); extdecl;
 glDepthMask: procedure(flag: GLboolean); extdecl;
 glDisable: procedure(cap: GLenum); extdecl;
 glEnable: procedure(cap: GLenum); extdecl;
 glFinish: procedure(); extdecl;
 glFlush: procedure(); extdecl;
 glBlendFunc: procedure(sfactor: GLenum; dfactor: GLenum); extdecl;
 glLogicOp: procedure(opcode: GLenum); extdecl;
 glStencilFunc: procedure(func: GLenum; ref: GLint; mask: GLuint); extdecl;
 glStencilOp: procedure(fail: GLenum; zfail: GLenum; zpass: GLenum); extdecl;
 glDepthFunc: procedure(func: GLenum); extdecl;
 glPixelStoref: procedure(pname: GLenum; param: GLfloat); extdecl;
 glPixelStorei: procedure(pname: GLenum; param: GLint); extdecl;
 glReadBuffer: procedure(src: GLenum); extdecl;
 glReadPixels: procedure(x: GLint; y: GLint; width: GLsizei; height: GLsizei; format: GLenum; _type: GLenum; pixels: PGLvoid); extdecl;
 glGetBooleanv: procedure(pname: GLenum; data: PGLboolean); extdecl;
 glGetDoublev: procedure(pname: GLenum; data: PGLdouble); extdecl;
 glGetError: function(): GLenum; extdecl;
 glGetFloatv: procedure(pname: GLenum; data: PGLfloat); extdecl;
 glGetIntegerv: procedure(pname: GLenum; data: PGLint); extdecl;
 glGetString: function(name: GLenum): PChar; extdecl;
 glGetTexImage: procedure(target: GLenum; level: GLint; format: GLenum; _type: GLenum; pixels: PGLvoid); extdecl;
 glGetTexParameterfv: procedure(target: GLenum; pname: GLenum; params: PGLfloat); extdecl;
 glGetTexParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); extdecl;
 glGetTexLevelParameterfv: procedure(target: GLenum; level: GLint; pname: GLenum; params: PGLfloat); extdecl;
 glGetTexLevelParameteriv: procedure(target: GLenum; level: GLint; pname: GLenum; params: PGLint); extdecl;
 glIsEnabled: function(cap: GLenum): GLboolean; extdecl;
 glDepthRange: procedure(near: GLdouble; far: GLdouble); extdecl;
 glViewport: procedure(x: GLint; y: GLint; width: GLsizei; height: GLsizei); extdecl;
 glDrawArrays: procedure(mode: GLenum; first: GLint; count: GLsizei); extdecl;
 glDrawElements: procedure(mode: GLenum; count: GLsizei; _type: GLenum; const indices: PGLvoid); extdecl;
 glGetPointerv: procedure(pname: GLenum; params: PGLvoid); extdecl;
 glPolygonOffset: procedure(factor: GLfloat; units: GLfloat); extdecl;
 glCopyTexImage1D: procedure(target: GLenum; level: GLint; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei; border: GLint); extdecl;
 glCopyTexImage2D: procedure(target: GLenum; level: GLint; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei; height: GLsizei; border: GLint); extdecl;
 glCopyTexSubImage1D: procedure(target: GLenum; level: GLint; xoffset: GLint; x: GLint; y: GLint; width: GLsizei); extdecl;
 glCopyTexSubImage2D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; x: GLint; y: GLint; width: GLsizei; height: GLsizei); extdecl;
 glTexSubImage1D: procedure(target: GLenum; level: GLint; xoffset: GLint; width: GLsizei; format: GLenum; _type: GLenum; const pixels: PGLvoid); extdecl;
 glTexSubImage2D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; width: GLsizei; height: GLsizei; format: GLenum; _type: GLenum; const pixels: PGLvoid); extdecl;
 glBindTexture: procedure(target: GLenum; texture: GLuint); extdecl;
 glDeleteTextures: procedure(n: GLsizei; const textures: PGLuint); extdecl;
 glGenTextures: procedure(n: GLsizei; textures: PGLuint); extdecl;
 glIsTexture: function(texture: GLuint): GLboolean; extdecl;
 glDrawRangeElements: procedure(mode: GLenum; start: GLuint; _end: GLuint; count: GLsizei; _type: GLenum; const indices: PGLvoid); extdecl;
 glTexImage3D: procedure(target: GLenum; level: GLint; internalformat: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; border: GLint; format: GLenum; _type: GLenum; const pixels: PGLvoid); extdecl;
 glTexSubImage3D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; _type: GLenum; const pixels: PGLvoid); extdecl;
 glCopyTexSubImage3D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; x: GLint; y: GLint; width: GLsizei; height: GLsizei); extdecl;
 glActiveTexture: procedure(texture: GLenum); extdecl;
 glSampleCoverage: procedure(value: GLfloat; invert: GLboolean); extdecl;
 glCompressedTexImage3D: procedure(target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; border: GLint; imageSize: GLsizei; const data: PGLvoid); extdecl;
 glCompressedTexImage2D: procedure(target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; height: GLsizei; border: GLint; imageSize: GLsizei; const data: PGLvoid); extdecl;
 glCompressedTexImage1D: procedure(target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; border: GLint; imageSize: GLsizei; const data: PGLvoid); extdecl;
 glCompressedTexSubImage3D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; imageSize: GLsizei; const data: PGLvoid); extdecl;
 glCompressedTexSubImage2D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; width: GLsizei; height: GLsizei; format: GLenum; imageSize: GLsizei; const data: PGLvoid); extdecl;
 glCompressedTexSubImage1D: procedure(target: GLenum; level: GLint; xoffset: GLint; width: GLsizei; format: GLenum; imageSize: GLsizei; const data: PGLvoid); extdecl;
 glGetCompressedTexImage: procedure(target: GLenum; level: GLint; img: PGLvoid); extdecl;
 glBlendFuncSeparate: procedure(sfactorRGB: GLenum; dfactorRGB: GLenum; sfactorAlpha: GLenum; dfactorAlpha: GLenum); extdecl;
 glMultiDrawArrays: procedure(mode: GLenum; const first: PGLint; const count: PGLsizei; drawcount: GLsizei); extdecl;
 glMultiDrawElements: procedure(mode: GLenum; const count: PGLsizei; _type: GLenum; const constindices: PGLvoid; drawcount: GLsizei); extdecl;
 glPointParameterf: procedure(pname: GLenum; param: GLfloat); extdecl;
 glPointParameterfv: procedure(pname: GLenum; const params: PGLfloat); extdecl;
 glPointParameteri: procedure(pname: GLenum; param: GLint); extdecl;
 glPointParameteriv: procedure(pname: GLenum; const params: PGLint); extdecl;
 glBlendColor: procedure(red: GLfloat; green: GLfloat; blue: GLfloat; alpha: GLfloat); extdecl;
 glBlendEquation: procedure(mode: GLenum); extdecl;
 glGenQueries: procedure(n: GLsizei; ids: PGLuint); extdecl;
 glDeleteQueries: procedure(n: GLsizei; const ids: PGLuint); extdecl;
 glIsQuery: function(id: GLuint): GLboolean; extdecl;
 glBeginQuery: procedure(target: GLenum; id: GLuint); extdecl;
 glEndQuery: procedure(target: GLenum); extdecl;
 glGetQueryiv: procedure(target: GLenum; pname: GLenum; params: PGLint); extdecl;
 glGetQueryObjectiv: procedure(id: GLuint; pname: GLenum; params: PGLint); extdecl;
 glGetQueryObjectuiv: procedure(id: GLuint; pname: GLenum; params: PGLuint); extdecl;
 glBindBuffer: procedure(target: GLenum; buffer: GLuint); extdecl;
 glDeleteBuffers: procedure(n: GLsizei; const buffers: PGLuint); extdecl;
 glGenBuffers: procedure(n: GLsizei; buffers: PGLuint); extdecl;
 glIsBuffer: function(buffer: GLuint): GLboolean; extdecl;
 glBufferData: procedure(target: GLenum; size: GLsizeiptr; const data: PGLvoid; usage: GLenum); extdecl;
 glBufferSubData: procedure(target: GLenum; offset: GLintptr; size: GLsizeiptr; const data: PGLvoid); extdecl;
 glGetBufferSubData: procedure(target: GLenum; offset: GLintptr; size: GLsizeiptr; data: PGLvoid); extdecl;
 glMapBuffer: procedure(target: GLenum; access: GLenum); extdecl;
 glUnmapBuffer: function(target: GLenum): GLboolean; extdecl;
 glGetBufferParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); extdecl;
 glGetBufferPointerv: procedure(target: GLenum; pname: GLenum; params: PGLvoid); extdecl;
 glBlendEquationSeparate: procedure(modeRGB: GLenum; modeAlpha: GLenum); extdecl;
 glDrawBuffers: procedure(n: GLsizei; const bufs: PGLenum); extdecl;
 glStencilOpSeparate: procedure(face: GLenum; sfail: GLenum; dpfail: GLenum; dppass: GLenum); extdecl;
 glStencilFuncSeparate: procedure(face: GLenum; func: GLenum; ref: GLint; mask: GLuint); extdecl;
 glStencilMaskSeparate: procedure(face: GLenum; mask: GLuint); extdecl;
 glAttachShader: procedure(_program: GLuint; shader: GLuint); extdecl;
 glBindAttribLocation: procedure(_program: GLuint; index: GLuint; const name: PGLchar); extdecl;
 glCompileShader: procedure(shader: GLuint); extdecl;
 glCreateProgram: function(): GLuint; extdecl;
 glCreateShader: function(_type: GLenum): GLuint; extdecl;
 glDeleteProgram: procedure(_program: GLuint); extdecl;
 glDeleteShader: procedure(shader: GLuint); extdecl;
 glDetachShader: procedure(_program: GLuint; shader: GLuint); extdecl;
 glDisableVertexAttribArray: procedure(index: GLuint); extdecl;
 glEnableVertexAttribArray: procedure(index: GLuint); extdecl;
 glGetActiveAttrib: procedure(_program: GLuint; index: GLuint; bufSize: GLsizei; length: PGLsizei; size: PGLint; _type: PGLenum; name: PGLchar); extdecl;
 glGetActiveUniform: procedure(_program: GLuint; index: GLuint; bufSize: GLsizei; length: PGLsizei; size: PGLint; _type: PGLenum; name: PGLchar); extdecl;
 glGetAttachedShaders: procedure(_program: GLuint; maxCount: GLsizei; count: PGLsizei; shaders: PGLuint); extdecl;
 glGetAttribLocation: function(_program: GLuint; const name: PGLchar): GLint; extdecl;
 glGetProgramiv: procedure(_program: GLuint; pname: GLenum; params: PGLint); extdecl;
 glGetProgramInfoLog: procedure(_program: GLuint; bufSize: GLsizei; length: PGLsizei; infoLog: PGLchar); extdecl;
 glGetShaderiv: procedure(shader: GLuint; pname: GLenum; params: PGLint); extdecl;
 glGetShaderInfoLog: procedure(shader: GLuint; bufSize: GLsizei; length: PGLsizei; infoLog: PGLchar); extdecl;
 glGetShaderSource: procedure(shader: GLuint; bufSize: GLsizei; length: PGLsizei; source: PGLchar); extdecl;
 glGetUniformLocation: function(_program: GLuint; const name: PGLchar): GLint; extdecl;
 glGetUniformfv: procedure(_program: GLuint; location: GLint; params: PGLfloat); extdecl;
 glGetUniformiv: procedure(_program: GLuint; location: GLint; params: PGLint); extdecl;
 glGetVertexAttribdv: procedure(index: GLuint; pname: GLenum; params: PGLdouble); extdecl;
 glGetVertexAttribfv: procedure(index: GLuint; pname: GLenum; params: PGLfloat); extdecl;
 glGetVertexAttribiv: procedure(index: GLuint; pname: GLenum; params: PGLint); extdecl;
 glGetVertexAttribPointerv: procedure(index: GLuint; pname: GLenum; pointer: PGLvoid); extdecl;
 glIsProgram: function(_program: GLuint): GLboolean; extdecl;
 glIsShader: function(shader: GLuint): GLboolean; extdecl;
 glLinkProgram: procedure(_program: GLuint); extdecl;
 glShaderSource: procedure(shader: GLuint; count: GLsizei; const conststring: PGLchar; const length: PGLint); extdecl;
 glUseProgram: procedure(_program: GLuint); extdecl;
 glUniform1f: procedure(location: GLint; v0: GLfloat); extdecl;
 glUniform2f: procedure(location: GLint; v0: GLfloat; v1: GLfloat); extdecl;
 glUniform3f: procedure(location: GLint; v0: GLfloat; v1: GLfloat; v2: GLfloat); extdecl;
 glUniform4f: procedure(location: GLint; v0: GLfloat; v1: GLfloat; v2: GLfloat; v3: GLfloat); extdecl;
 glUniform1i: procedure(location: GLint; v0: GLint); extdecl;
 glUniform2i: procedure(location: GLint; v0: GLint; v1: GLint); extdecl;
 glUniform3i: procedure(location: GLint; v0: GLint; v1: GLint; v2: GLint); extdecl;
 glUniform4i: procedure(location: GLint; v0: GLint; v1: GLint; v2: GLint; v3: GLint); extdecl;
 glUniform1fv: procedure(location: GLint; count: GLsizei; const value: PGLfloat); extdecl;
 glUniform2fv: procedure(location: GLint; count: GLsizei; const value: PGLfloat); extdecl;
 glUniform3fv: procedure(location: GLint; count: GLsizei; const value: PGLfloat); extdecl;
 glUniform4fv: procedure(location: GLint; count: GLsizei; const value: PGLfloat); extdecl;
 glUniform1iv: procedure(location: GLint; count: GLsizei; const value: PGLint); extdecl;
 glUniform2iv: procedure(location: GLint; count: GLsizei; const value: PGLint); extdecl;
 glUniform3iv: procedure(location: GLint; count: GLsizei; const value: PGLint); extdecl;
 glUniform4iv: procedure(location: GLint; count: GLsizei; const value: PGLint); extdecl;
 glUniformMatrix2fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glUniformMatrix3fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glUniformMatrix4fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glValidateProgram: procedure(_program: GLuint); extdecl;
 glVertexAttrib1d: procedure(index: GLuint; x: GLdouble); extdecl;
 glVertexAttrib1dv: procedure(index: GLuint; const v: PGLdouble); extdecl;
 glVertexAttrib1f: procedure(index: GLuint; x: GLfloat); extdecl;
 glVertexAttrib1fv: procedure(index: GLuint; const v: PGLfloat); extdecl;
 glVertexAttrib1s: procedure(index: GLuint; x: GLshort); extdecl;
 glVertexAttrib1sv: procedure(index: GLuint; const v: PGLshort); extdecl;
 glVertexAttrib2d: procedure(index: GLuint; x: GLdouble; y: GLdouble); extdecl;
 glVertexAttrib2dv: procedure(index: GLuint; const v: PGLdouble); extdecl;
 glVertexAttrib2f: procedure(index: GLuint; x: GLfloat; y: GLfloat); extdecl;
 glVertexAttrib2fv: procedure(index: GLuint; const v: PGLfloat); extdecl;
 glVertexAttrib2s: procedure(index: GLuint; x: GLshort; y: GLshort); extdecl;
 glVertexAttrib2sv: procedure(index: GLuint; const v: PGLshort); extdecl;
 glVertexAttrib3d: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble); extdecl;
 glVertexAttrib3dv: procedure(index: GLuint; const v: PGLdouble); extdecl;
 glVertexAttrib3f: procedure(index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat); extdecl;
 glVertexAttrib3fv: procedure(index: GLuint; const v: PGLfloat); extdecl;
 glVertexAttrib3s: procedure(index: GLuint; x: GLshort; y: GLshort; z: GLshort); extdecl;
 glVertexAttrib3sv: procedure(index: GLuint; const v: PGLshort); extdecl;
 glVertexAttrib4Nbv: procedure(index: GLuint; const v: PGLbyte); extdecl;
 glVertexAttrib4Niv: procedure(index: GLuint; const v: PGLint); extdecl;
 glVertexAttrib4Nsv: procedure(index: GLuint; const v: PGLshort); extdecl;
 glVertexAttrib4Nub: procedure(index: GLuint; x: GLubyte; y: GLubyte; z: GLubyte; w: GLubyte); extdecl;
 glVertexAttrib4Nubv: procedure(index: GLuint; const v: PGLubyte); extdecl;
 glVertexAttrib4Nuiv: procedure(index: GLuint; const v: PGLuint); extdecl;
 glVertexAttrib4Nusv: procedure(index: GLuint; const v: PGLushort); extdecl;
 glVertexAttrib4bv: procedure(index: GLuint; const v: PGLbyte); extdecl;
 glVertexAttrib4d: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); extdecl;
 glVertexAttrib4dv: procedure(index: GLuint; const v: PGLdouble); extdecl;
 glVertexAttrib4f: procedure(index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); extdecl;
 glVertexAttrib4fv: procedure(index: GLuint; const v: PGLfloat); extdecl;
 glVertexAttrib4iv: procedure(index: GLuint; const v: PGLint); extdecl;
 glVertexAttrib4s: procedure(index: GLuint; x: GLshort; y: GLshort; z: GLshort; w: GLshort); extdecl;
 glVertexAttrib4sv: procedure(index: GLuint; const v: PGLshort); extdecl;
 glVertexAttrib4ubv: procedure(index: GLuint; const v: PGLubyte); extdecl;
 glVertexAttrib4uiv: procedure(index: GLuint; const v: PGLuint); extdecl;
 glVertexAttrib4usv: procedure(index: GLuint; const v: PGLushort); extdecl;
 glVertexAttribPointer: procedure(index: GLuint; size: GLint; _type: GLenum; normalized: GLboolean; stride: GLsizei; const pointer: PGLvoid); extdecl;
 glUniformMatrix2x3fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glUniformMatrix3x2fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glUniformMatrix2x4fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glUniformMatrix4x2fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glUniformMatrix3x4fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glUniformMatrix4x3fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glColorMaski: procedure(index: GLuint; r: GLboolean; g: GLboolean; b: GLboolean; a: GLboolean); extdecl;
 glGetBooleani_v: procedure(target: GLenum; index: GLuint; data: PGLboolean); extdecl;
 glGetIntegeri_v: procedure(target: GLenum; index: GLuint; data: PGLint); extdecl;
 glEnablei: procedure(target: GLenum; index: GLuint); extdecl;
 glDisablei: procedure(target: GLenum; index: GLuint); extdecl;
 glIsEnabledi: function(target: GLenum; index: GLuint): GLboolean; extdecl;
 glBeginTransformFeedback: procedure(primitiveMode: GLenum); extdecl;
 glEndTransformFeedback: procedure(); extdecl;
 glBindBufferRange: procedure(target: GLenum; index: GLuint; buffer: GLuint; offset: GLintptr; size: GLsizeiptr); extdecl;
 glBindBufferBase: procedure(target: GLenum; index: GLuint; buffer: GLuint); extdecl;
 glTransformFeedbackVaryings: procedure(_program: GLuint; count: GLsizei; const constvaryings: PGLchar; bufferMode: GLenum); extdecl;
 glGetTransformFeedbackVarying: procedure(_program: GLuint; index: GLuint; bufSize: GLsizei; length: PGLsizei; size: PGLsizei; _type: PGLenum; name: PGLchar); extdecl;
 glClampColor: procedure(target: GLenum; clamp: GLenum); extdecl;
 glBeginConditionalRender: procedure(id: GLuint; mode: GLenum); extdecl;
 glEndConditionalRender: procedure(); extdecl;
 glVertexAttribIPointer: procedure(index: GLuint; size: GLint; _type: GLenum; stride: GLsizei; const pointer: PGLvoid); extdecl;
 glGetVertexAttribIiv: procedure(index: GLuint; pname: GLenum; params: PGLint); extdecl;
 glGetVertexAttribIuiv: procedure(index: GLuint; pname: GLenum; params: PGLuint); extdecl;
 glVertexAttribI1i: procedure(index: GLuint; x: GLint); extdecl;
 glVertexAttribI2i: procedure(index: GLuint; x: GLint; y: GLint); extdecl;
 glVertexAttribI3i: procedure(index: GLuint; x: GLint; y: GLint; z: GLint); extdecl;
 glVertexAttribI4i: procedure(index: GLuint; x: GLint; y: GLint; z: GLint; w: GLint); extdecl;
 glVertexAttribI1ui: procedure(index: GLuint; x: GLuint); extdecl;
 glVertexAttribI2ui: procedure(index: GLuint; x: GLuint; y: GLuint); extdecl;
 glVertexAttribI3ui: procedure(index: GLuint; x: GLuint; y: GLuint; z: GLuint); extdecl;
 glVertexAttribI4ui: procedure(index: GLuint; x: GLuint; y: GLuint; z: GLuint; w: GLuint); extdecl;
 glVertexAttribI1iv: procedure(index: GLuint; const v: PGLint); extdecl;
 glVertexAttribI2iv: procedure(index: GLuint; const v: PGLint); extdecl;
 glVertexAttribI3iv: procedure(index: GLuint; const v: PGLint); extdecl;
 glVertexAttribI4iv: procedure(index: GLuint; const v: PGLint); extdecl;
 glVertexAttribI1uiv: procedure(index: GLuint; const v: PGLuint); extdecl;
 glVertexAttribI2uiv: procedure(index: GLuint; const v: PGLuint); extdecl;
 glVertexAttribI3uiv: procedure(index: GLuint; const v: PGLuint); extdecl;
 glVertexAttribI4uiv: procedure(index: GLuint; const v: PGLuint); extdecl;
 glVertexAttribI4bv: procedure(index: GLuint; const v: PGLbyte); extdecl;
 glVertexAttribI4sv: procedure(index: GLuint; const v: PGLshort); extdecl;
 glVertexAttribI4ubv: procedure(index: GLuint; const v: PGLubyte); extdecl;
 glVertexAttribI4usv: procedure(index: GLuint; const v: PGLushort); extdecl;
 glGetUniformuiv: procedure(_program: GLuint; location: GLint; params: PGLuint); extdecl;
 glBindFragDataLocation: procedure(_program: GLuint; color: GLuint; const name: PGLchar); extdecl;
 glGetFragDataLocation: function(_program: GLuint; const name: PGLchar): GLint; extdecl;
 glUniform1ui: procedure(location: GLint; v0: GLuint); extdecl;
 glUniform2ui: procedure(location: GLint; v0: GLuint; v1: GLuint); extdecl;
 glUniform3ui: procedure(location: GLint; v0: GLuint; v1: GLuint; v2: GLuint); extdecl;
 glUniform4ui: procedure(location: GLint; v0: GLuint; v1: GLuint; v2: GLuint; v3: GLuint); extdecl;
 glUniform1uiv: procedure(location: GLint; count: GLsizei; const value: PGLuint); extdecl;
 glUniform2uiv: procedure(location: GLint; count: GLsizei; const value: PGLuint); extdecl;
 glUniform3uiv: procedure(location: GLint; count: GLsizei; const value: PGLuint); extdecl;
 glUniform4uiv: procedure(location: GLint; count: GLsizei; const value: PGLuint); extdecl;
 glTexParameterIiv: procedure(target: GLenum; pname: GLenum; const params: PGLint); extdecl;
 glTexParameterIuiv: procedure(target: GLenum; pname: GLenum; const params: PGLuint); extdecl;
 glGetTexParameterIiv: procedure(target: GLenum; pname: GLenum; params: PGLint); extdecl;
 glGetTexParameterIuiv: procedure(target: GLenum; pname: GLenum; params: PGLuint); extdecl;
 glClearBufferiv: procedure(buffer: GLenum; drawbuffer: GLint; const value: PGLint); extdecl;
 glClearBufferuiv: procedure(buffer: GLenum; drawbuffer: GLint; const value: PGLuint); extdecl;
 glClearBufferfv: procedure(buffer: GLenum; drawbuffer: GLint; const value: PGLfloat); extdecl;
 glClearBufferfi: procedure(buffer: GLenum; drawbuffer: GLint; depth: GLfloat; stencil: GLint); extdecl;
 glGetStringi: function(name: GLenum; index: GLuint): PChar; extdecl;
 glIsRenderbuffer: function(renderbuffer: GLuint): GLboolean; extdecl;
 glBindRenderbuffer: procedure(target: GLenum; renderbuffer: GLuint); extdecl;
 glDeleteRenderbuffers: procedure(n: GLsizei; const renderbuffers: PGLuint); extdecl;
 glGenRenderbuffers: procedure(n: GLsizei; renderbuffers: PGLuint); extdecl;
 glRenderbufferStorage: procedure(target: GLenum; internalformat: GLenum; width: GLsizei; height: GLsizei); extdecl;
 glGetRenderbufferParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); extdecl;
 glIsFramebuffer: function(framebuffer: GLuint): GLboolean; extdecl;
 glBindFramebuffer: procedure(target: GLenum; framebuffer: GLuint); extdecl;
 glDeleteFramebuffers: procedure(n: GLsizei; const framebuffers: PGLuint); extdecl;
 glGenFramebuffers: procedure(n: GLsizei; framebuffers: PGLuint); extdecl;
 glCheckFramebufferStatus: function(target: GLenum): GLenum; extdecl;
 glFramebufferTexture1D: procedure(target: GLenum; attachment: GLenum; textarget: GLenum; texture: GLuint; level: GLint); extdecl;
 glFramebufferTexture2D: procedure(target: GLenum; attachment: GLenum; textarget: GLenum; texture: GLuint; level: GLint); extdecl;
 glFramebufferTexture3D: procedure(target: GLenum; attachment: GLenum; textarget: GLenum; texture: GLuint; level: GLint; zoffset: GLint); extdecl;
 glFramebufferRenderbuffer: procedure(target: GLenum; attachment: GLenum; renderbuffertarget: GLenum; renderbuffer: GLuint); extdecl;
 glGetFramebufferAttachmentParameteriv: procedure(target: GLenum; attachment: GLenum; pname: GLenum; params: PGLint); extdecl;
 glGenerateMipmap: procedure(target: GLenum); extdecl;
 glBlitFramebuffer: procedure(srcX0: GLint; srcY0: GLint; srcX1: GLint; srcY1: GLint; dstX0: GLint; dstY0: GLint; dstX1: GLint; dstY1: GLint; mask: GLbitfield; filter: GLenum); extdecl;
 glRenderbufferStorageMultisample: procedure(target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei); extdecl;
 glFramebufferTextureLayer: procedure(target: GLenum; attachment: GLenum; texture: GLuint; level: GLint; layer: GLint); extdecl;
 glMapBufferRange: procedure(target: GLenum; offset: GLintptr; length: GLsizeiptr; access: GLbitfield); extdecl;
 glFlushMappedBufferRange: procedure(target: GLenum; offset: GLintptr; length: GLsizeiptr); extdecl;
 glBindVertexArray: procedure(_array: GLuint); extdecl;
 glDeleteVertexArrays: procedure(n: GLsizei; const arrays: PGLuint); extdecl;
 glGenVertexArrays: procedure(n: GLsizei; arrays: PGLuint); extdecl;
 glIsVertexArray: function(_array: GLuint): GLboolean; extdecl;
 glDrawArraysInstanced: procedure(mode: GLenum; first: GLint; count: GLsizei; instancecount: GLsizei); extdecl;
 glDrawElementsInstanced: procedure(mode: GLenum; count: GLsizei; _type: GLenum; const indices: PGLvoid; instancecount: GLsizei); extdecl;
 glTexBuffer: procedure(target: GLenum; internalformat: GLenum; buffer: GLuint); extdecl;
 glPrimitiveRestartIndex: procedure(index: GLuint); extdecl;
 glCopyBufferSubData: procedure(readTarget: GLenum; writeTarget: GLenum; readOffset: GLintptr; writeOffset: GLintptr; size: GLsizeiptr); extdecl;
 glGetUniformIndices: procedure(_program: GLuint; uniformCount: GLsizei; const constuniformNames: PGLchar; uniformIndices: PGLuint); extdecl;
 glGetActiveUniformsiv: procedure(_program: GLuint; uniformCount: GLsizei; const uniformIndices: PGLuint; pname: GLenum; params: PGLint); extdecl;
 glGetActiveUniformName: procedure(_program: GLuint; uniformIndex: GLuint; bufSize: GLsizei; length: PGLsizei; uniformName: PGLchar); extdecl;
 glGetUniformBlockIndex: function(_program: GLuint; const uniformBlockName: PGLchar): GLuint; extdecl;
 glGetActiveUniformBlockiv: procedure(_program: GLuint; uniformBlockIndex: GLuint; pname: GLenum; params: PGLint); extdecl;
 glGetActiveUniformBlockName: procedure(_program: GLuint; uniformBlockIndex: GLuint; bufSize: GLsizei; length: PGLsizei; uniformBlockName: PGLchar); extdecl;
 glUniformBlockBinding: procedure(_program: GLuint; uniformBlockIndex: GLuint; uniformBlockBinding: GLuint); extdecl;
 glDrawElementsBaseVertex: procedure(mode: GLenum; count: GLsizei; _type: GLenum; const indices: PGLvoid; basevertex: GLint); extdecl;
 glDrawRangeElementsBaseVertex: procedure(mode: GLenum; start: GLuint; _end: GLuint; count: GLsizei; _type: GLenum; const indices: PGLvoid; basevertex: GLint); extdecl;
 glDrawElementsInstancedBaseVertex: procedure(mode: GLenum; count: GLsizei; _type: GLenum; const indices: PGLvoid; instancecount: GLsizei; basevertex: GLint); extdecl;
 glMultiDrawElementsBaseVertex: procedure(mode: GLenum; const count: PGLsizei; _type: GLenum; const constindices: PGLvoid; drawcount: GLsizei; const basevertex: PGLint); extdecl;
 glProvokingVertex: procedure(mode: GLenum); extdecl;
 glFenceSync: function(condition: GLenum; flags: GLbitfield): GLsync; extdecl;
 glIsSync: function(sync: GLsync): GLboolean; extdecl;
 glDeleteSync: procedure(sync: GLsync); extdecl;
 glClientWaitSync: function(sync: GLsync; flags: GLbitfield; timeout: GLuint64): GLenum; extdecl;
 glWaitSync: procedure(sync: GLsync; flags: GLbitfield; timeout: GLuint64); extdecl;
 glGetInteger64v: procedure(pname: GLenum; data: PGLint64); extdecl;
 glGetSynciv: procedure(sync: GLsync; pname: GLenum; bufSize: GLsizei; length: PGLsizei; values: PGLint); extdecl;
 glGetInteger64i_v: procedure(target: GLenum; index: GLuint; data: PGLint64); extdecl;
 glGetBufferParameteri64v: procedure(target: GLenum; pname: GLenum; params: PGLint64); extdecl;
 glFramebufferTexture: procedure(target: GLenum; attachment: GLenum; texture: GLuint; level: GLint); extdecl;
 glTexImage2DMultisample: procedure(target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; fixedsamplelocations: GLboolean); extdecl;
 glTexImage3DMultisample: procedure(target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; fixedsamplelocations: GLboolean); extdecl;
 glGetMultisamplefv: procedure(pname: GLenum; index: GLuint; val: PGLfloat); extdecl;
 glSampleMaski: procedure(maskNumber: GLuint; mask: GLbitfield); extdecl;
//28 procedures for GL_VERSION_3_3
 glBindFragDataLocationIndexed: procedure(_program: GLuint; colorNumber: GLuint; index: GLuint; const name: PGLchar); extdecl;
 glGetFragDataIndex: function(_program: GLuint; const name: PGLchar): GLint; extdecl;
 glGenSamplers: procedure(count: GLsizei; samplers: PGLuint); extdecl;
 glDeleteSamplers: procedure(count: GLsizei; const samplers: PGLuint); extdecl;
 glIsSampler: function(sampler: GLuint): GLboolean; extdecl;
 glBindSampler: procedure(_unit: GLuint; sampler: GLuint); extdecl;
 glSamplerParameteri: procedure(sampler: GLuint; pname: GLenum; param: GLint); extdecl;
 glSamplerParameteriv: procedure(sampler: GLuint; pname: GLenum; const param: PGLint); extdecl;
 glSamplerParameterf: procedure(sampler: GLuint; pname: GLenum; param: GLfloat); extdecl;
 glSamplerParameterfv: procedure(sampler: GLuint; pname: GLenum; const param: PGLfloat); extdecl;
 glSamplerParameterIiv: procedure(sampler: GLuint; pname: GLenum; const param: PGLint); extdecl;
 glSamplerParameterIuiv: procedure(sampler: GLuint; pname: GLenum; const param: PGLuint); extdecl;
 glGetSamplerParameteriv: procedure(sampler: GLuint; pname: GLenum; params: PGLint); extdecl;
 glGetSamplerParameterIiv: procedure(sampler: GLuint; pname: GLenum; params: PGLint); extdecl;
 glGetSamplerParameterfv: procedure(sampler: GLuint; pname: GLenum; params: PGLfloat); extdecl;
 glGetSamplerParameterIuiv: procedure(sampler: GLuint; pname: GLenum; params: PGLuint); extdecl;
 glQueryCounter: procedure(id: GLuint; target: GLenum); extdecl;
 glGetQueryObjecti64v: procedure(id: GLuint; pname: GLenum; params: PGLint64); extdecl;
 glGetQueryObjectui64v: procedure(id: GLuint; pname: GLenum; params: PGLuint64); extdecl;
 glVertexAttribDivisor: procedure(index: GLuint; divisor: GLuint); extdecl;
 glVertexAttribP1ui: procedure(index: GLuint; _type: GLenum; normalized: GLboolean; value: GLuint); extdecl;
 glVertexAttribP1uiv: procedure(index: GLuint; _type: GLenum; normalized: GLboolean; const value: PGLuint); extdecl;
 glVertexAttribP2ui: procedure(index: GLuint; _type: GLenum; normalized: GLboolean; value: GLuint); extdecl;
 glVertexAttribP2uiv: procedure(index: GLuint; _type: GLenum; normalized: GLboolean; const value: PGLuint); extdecl;
 glVertexAttribP3ui: procedure(index: GLuint; _type: GLenum; normalized: GLboolean; value: GLuint); extdecl;
 glVertexAttribP3uiv: procedure(index: GLuint; _type: GLenum; normalized: GLboolean; const value: PGLuint); extdecl;
 glVertexAttribP4ui: procedure(index: GLuint; _type: GLenum; normalized: GLboolean; value: GLuint); extdecl;
 glVertexAttribP4uiv: procedure(index: GLuint; _type: GLenum; normalized: GLboolean; const value: PGLuint); extdecl;
//46 procedures for GL_VERSION_4_0
 glMinSampleShading: procedure(value: GLfloat); extdecl;
 glBlendEquationi: procedure(buf: GLuint; mode: GLenum); extdecl;
 glBlendEquationSeparatei: procedure(buf: GLuint; modeRGB: GLenum; modeAlpha: GLenum); extdecl;
 glBlendFunci: procedure(buf: GLuint; src: GLenum; dst: GLenum); extdecl;
 glBlendFuncSeparatei: procedure(buf: GLuint; srcRGB: GLenum; dstRGB: GLenum; srcAlpha: GLenum; dstAlpha: GLenum); extdecl;
 glDrawArraysIndirect: procedure(mode: GLenum; const indirect: PGLvoid); extdecl;
 glDrawElementsIndirect: procedure(mode: GLenum; _type: GLenum; const indirect: PGLvoid); extdecl;
 glUniform1d: procedure(location: GLint; x: GLdouble); extdecl;
 glUniform2d: procedure(location: GLint; x: GLdouble; y: GLdouble); extdecl;
 glUniform3d: procedure(location: GLint; x: GLdouble; y: GLdouble; z: GLdouble); extdecl;
 glUniform4d: procedure(location: GLint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); extdecl;
 glUniform1dv: procedure(location: GLint; count: GLsizei; const value: PGLdouble); extdecl;
 glUniform2dv: procedure(location: GLint; count: GLsizei; const value: PGLdouble); extdecl;
 glUniform3dv: procedure(location: GLint; count: GLsizei; const value: PGLdouble); extdecl;
 glUniform4dv: procedure(location: GLint; count: GLsizei; const value: PGLdouble); extdecl;
 glUniformMatrix2dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glUniformMatrix3dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glUniformMatrix4dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glUniformMatrix2x3dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glUniformMatrix2x4dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glUniformMatrix3x2dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glUniformMatrix3x4dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glUniformMatrix4x2dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glUniformMatrix4x3dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glGetUniformdv: procedure(_program: GLuint; location: GLint; params: PGLdouble); extdecl;
 glGetSubroutineUniformLocation: function(_program: GLuint; shadertype: GLenum; const name: PGLchar): GLint; extdecl;
 glGetSubroutineIndex: function(_program: GLuint; shadertype: GLenum; const name: PGLchar): GLuint; extdecl;
 glGetActiveSubroutineUniformiv: procedure(_program: GLuint; shadertype: GLenum; index: GLuint; pname: GLenum; values: PGLint); extdecl;
 glGetActiveSubroutineUniformName: procedure(_program: GLuint; shadertype: GLenum; index: GLuint; bufsize: GLsizei; length: PGLsizei; name: PGLchar); extdecl;
 glGetActiveSubroutineName: procedure(_program: GLuint; shadertype: GLenum; index: GLuint; bufsize: GLsizei; length: PGLsizei; name: PGLchar); extdecl;
 glUniformSubroutinesuiv: procedure(shadertype: GLenum; count: GLsizei; const indices: PGLuint); extdecl;
 glGetUniformSubroutineuiv: procedure(shadertype: GLenum; location: GLint; params: PGLuint); extdecl;
 glGetProgramStageiv: procedure(_program: GLuint; shadertype: GLenum; pname: GLenum; values: PGLint); extdecl;
 glPatchParameteri: procedure(pname: GLenum; value: GLint); extdecl;
 glPatchParameterfv: procedure(pname: GLenum; const values: PGLfloat); extdecl;
 glBindTransformFeedback: procedure(target: GLenum; id: GLuint); extdecl;
 glDeleteTransformFeedbacks: procedure(n: GLsizei; const ids: PGLuint); extdecl;
 glGenTransformFeedbacks: procedure(n: GLsizei; ids: PGLuint); extdecl;
 glIsTransformFeedback: function(id: GLuint): GLboolean; extdecl;
 glPauseTransformFeedback: procedure(); extdecl;
 glResumeTransformFeedback: procedure(); extdecl;
 glDrawTransformFeedback: procedure(mode: GLenum; id: GLuint); extdecl;
 glDrawTransformFeedbackStream: procedure(mode: GLenum; id: GLuint; stream: GLuint); extdecl;
 glBeginQueryIndexed: procedure(target: GLenum; index: GLuint; id: GLuint); extdecl;
 glEndQueryIndexed: procedure(target: GLenum; index: GLuint); extdecl;
 glGetQueryIndexediv: procedure(target: GLenum; index: GLuint; pname: GLenum; params: PGLint); extdecl;
//88 procedures for GL_VERSION_4_1
 glReleaseShaderCompiler: procedure(); extdecl;
 glShaderBinary: procedure(count: GLsizei; const shaders: PGLuint; binaryformat: GLenum; const binary: PGLvoid; length: GLsizei); extdecl;
 glGetShaderPrecisionFormat: procedure(shadertype: GLenum; precisiontype: GLenum; range: PGLint; precision: PGLint); extdecl;
 glDepthRangef: procedure(n: GLfloat; f: GLfloat); extdecl;
 glClearDepthf: procedure(d: GLfloat); extdecl;
 glGetProgramBinary: procedure(_program: GLuint; bufSize: GLsizei; length: PGLsizei; binaryFormat: PGLenum; binary: PGLvoid); extdecl;
 glProgramBinary: procedure(_program: GLuint; binaryFormat: GLenum; const binary: PGLvoid; length: GLsizei); extdecl;
 glProgramParameteri: procedure(_program: GLuint; pname: GLenum; value: GLint); extdecl;
 glUseProgramStages: procedure(pipeline: GLuint; stages: GLbitfield; _program: GLuint); extdecl;
 glActiveShaderProgram: procedure(pipeline: GLuint; _program: GLuint); extdecl;
 glCreateShaderProgramv: function(_type: GLenum; count: GLsizei; const conststrings: PGLchar): GLuint; extdecl;
 glBindProgramPipeline: procedure(pipeline: GLuint); extdecl;
 glDeleteProgramPipelines: procedure(n: GLsizei; const pipelines: PGLuint); extdecl;
 glGenProgramPipelines: procedure(n: GLsizei; pipelines: PGLuint); extdecl;
 glIsProgramPipeline: function(pipeline: GLuint): GLboolean; extdecl;
 glGetProgramPipelineiv: procedure(pipeline: GLuint; pname: GLenum; params: PGLint); extdecl;
 glProgramUniform1i: procedure(_program: GLuint; location: GLint; v0: GLint); extdecl;
 glProgramUniform1iv: procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLint); extdecl;
 glProgramUniform1f: procedure(_program: GLuint; location: GLint; v0: GLfloat); extdecl;
 glProgramUniform1fv: procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLfloat); extdecl;
 glProgramUniform1d: procedure(_program: GLuint; location: GLint; v0: GLdouble); extdecl;
 glProgramUniform1dv: procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLdouble); extdecl;
 glProgramUniform1ui: procedure(_program: GLuint; location: GLint; v0: GLuint); extdecl;
 glProgramUniform1uiv: procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLuint); extdecl;
 glProgramUniform2i: procedure(_program: GLuint; location: GLint; v0: GLint; v1: GLint); extdecl;
 glProgramUniform2iv: procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLint); extdecl;
 glProgramUniform2f: procedure(_program: GLuint; location: GLint; v0: GLfloat; v1: GLfloat); extdecl;
 glProgramUniform2fv: procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLfloat); extdecl;
 glProgramUniform2d: procedure(_program: GLuint; location: GLint; v0: GLdouble; v1: GLdouble); extdecl;
 glProgramUniform2dv: procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLdouble); extdecl;
 glProgramUniform2ui: procedure(_program: GLuint; location: GLint; v0: GLuint; v1: GLuint); extdecl;
 glProgramUniform2uiv: procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLuint); extdecl;
 glProgramUniform3i: procedure(_program: GLuint; location: GLint; v0: GLint; v1: GLint; v2: GLint); extdecl;
 glProgramUniform3iv: procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLint); extdecl;
 glProgramUniform3f: procedure(_program: GLuint; location: GLint; v0: GLfloat; v1: GLfloat; v2: GLfloat); extdecl;
 glProgramUniform3fv: procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLfloat); extdecl;
 glProgramUniform3d: procedure(_program: GLuint; location: GLint; v0: GLdouble; v1: GLdouble; v2: GLdouble); extdecl;
 glProgramUniform3dv: procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLdouble); extdecl;
 glProgramUniform3ui: procedure(_program: GLuint; location: GLint; v0: GLuint; v1: GLuint; v2: GLuint); extdecl;
 glProgramUniform3uiv: procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLuint); extdecl;
 glProgramUniform4i: procedure(_program: GLuint; location: GLint; v0: GLint; v1: GLint; v2: GLint; v3: GLint); extdecl;
 glProgramUniform4iv: procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLint); extdecl;
 glProgramUniform4f: procedure(_program: GLuint; location: GLint; v0: GLfloat; v1: GLfloat; v2: GLfloat; v3: GLfloat); extdecl;
 glProgramUniform4fv: procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLfloat); extdecl;
 glProgramUniform4d: procedure(_program: GLuint; location: GLint; v0: GLdouble; v1: GLdouble; v2: GLdouble; v3: GLdouble); extdecl;
 glProgramUniform4dv: procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLdouble); extdecl;
 glProgramUniform4ui: procedure(_program: GLuint; location: GLint; v0: GLuint; v1: GLuint; v2: GLuint; v3: GLuint); extdecl;
 glProgramUniform4uiv: procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLuint); extdecl;
 glProgramUniformMatrix2fv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glProgramUniformMatrix3fv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glProgramUniformMatrix4fv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glProgramUniformMatrix2dv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glProgramUniformMatrix3dv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glProgramUniformMatrix4dv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glProgramUniformMatrix2x3fv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glProgramUniformMatrix3x2fv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glProgramUniformMatrix2x4fv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glProgramUniformMatrix4x2fv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glProgramUniformMatrix3x4fv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glProgramUniformMatrix4x3fv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); extdecl;
 glProgramUniformMatrix2x3dv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glProgramUniformMatrix3x2dv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glProgramUniformMatrix2x4dv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glProgramUniformMatrix4x2dv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glProgramUniformMatrix3x4dv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glProgramUniformMatrix4x3dv: procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); extdecl;
 glValidateProgramPipeline: procedure(pipeline: GLuint); extdecl;
 glGetProgramPipelineInfoLog: procedure(pipeline: GLuint; bufSize: GLsizei; length: PGLsizei; infoLog: PGLchar); extdecl;
 glVertexAttribL1d: procedure(index: GLuint; x: GLdouble); extdecl;
 glVertexAttribL2d: procedure(index: GLuint; x: GLdouble; y: GLdouble); extdecl;
 glVertexAttribL3d: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble); extdecl;
 glVertexAttribL4d: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); extdecl;
 glVertexAttribL1dv: procedure(index: GLuint; const v: PGLdouble); extdecl;
 glVertexAttribL2dv: procedure(index: GLuint; const v: PGLdouble); extdecl;
 glVertexAttribL3dv: procedure(index: GLuint; const v: PGLdouble); extdecl;
 glVertexAttribL4dv: procedure(index: GLuint; const v: PGLdouble); extdecl;
 glVertexAttribLPointer: procedure(index: GLuint; size: GLint; _type: GLenum; stride: GLsizei; const pointer: PGLvoid); extdecl;
 glGetVertexAttribLdv: procedure(index: GLuint; pname: GLenum; params: PGLdouble); extdecl;
 glViewportArrayv: procedure(first: GLuint; count: GLsizei; const v: PGLfloat); extdecl;
 glViewportIndexedf: procedure(index: GLuint; x: GLfloat; y: GLfloat; w: GLfloat; h: GLfloat); extdecl;
 glViewportIndexedfv: procedure(index: GLuint; const v: PGLfloat); extdecl;
 glScissorArrayv: procedure(first: GLuint; count: GLsizei; const v: PGLint); extdecl;
 glScissorIndexed: procedure(index: GLuint; left: GLint; bottom: GLint; width: GLsizei; height: GLsizei); extdecl;
 glScissorIndexedv: procedure(index: GLuint; const v: PGLint); extdecl;
 glDepthRangeArrayv: procedure(first: GLuint; count: GLsizei; const v: PGLdouble); extdecl;
 glDepthRangeIndexed: procedure(index: GLuint; n: GLdouble; f: GLdouble); extdecl;
 glGetFloati_v: procedure(target: GLenum; index: GLuint; data: PGLfloat); extdecl;
 glGetDoublei_v: procedure(target: GLenum; index: GLuint; data: PGLdouble); extdecl;
//12 procedures for GL_VERSION_4_2
 glDrawArraysInstancedBaseInstance: procedure(mode: GLenum; first: GLint; count: GLsizei; instancecount: GLsizei; baseinstance: GLuint); extdecl;
 glDrawElementsInstancedBaseInstance: procedure(mode: GLenum; count: GLsizei; _type: GLenum; const indices: PGLvoid; instancecount: GLsizei; baseinstance: GLuint); extdecl;
 glDrawElementsInstancedBaseVertexBaseInstance: procedure(mode: GLenum; count: GLsizei; _type: GLenum; const indices: PGLvoid; instancecount: GLsizei; basevertex: GLint; baseinstance: GLuint); extdecl;
 glGetInternalformativ: procedure(target: GLenum; internalformat: GLenum; pname: GLenum; bufSize: GLsizei; params: PGLint); extdecl;
 glGetActiveAtomicCounterBufferiv: procedure(_program: GLuint; bufferIndex: GLuint; pname: GLenum; params: PGLint); extdecl;
 glBindImageTexture: procedure(_unit: GLuint; texture: GLuint; level: GLint; layered: GLboolean; layer: GLint; access: GLenum; format: GLenum); extdecl;
 glMemoryBarrier: procedure(barriers: GLbitfield); extdecl;
 glTexStorage1D: procedure(target: GLenum; levels: GLsizei; internalformat: GLenum; width: GLsizei); extdecl;
 glTexStorage2D: procedure(target: GLenum; levels: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei); extdecl;
 glTexStorage3D: procedure(target: GLenum; levels: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei); extdecl;
 glDrawTransformFeedbackInstanced: procedure(mode: GLenum; id: GLuint; instancecount: GLsizei); extdecl;
 glDrawTransformFeedbackStreamInstanced: procedure(mode: GLenum; id: GLuint; stream: GLuint; instancecount: GLsizei); extdecl;
//43 procedures for GL_VERSION_4_3
 glClearBufferData: procedure(target: GLenum; internalformat: GLenum; format: GLenum; _type: GLenum; const data: PGLvoid); extdecl;
 glClearBufferSubData: procedure(target: GLenum; internalformat: GLenum; offset: GLintptr; size: GLsizeiptr; format: GLenum; _type: GLenum; const data: PGLvoid); extdecl;
 glDispatchCompute: procedure(num_groups_x: GLuint; num_groups_y: GLuint; num_groups_z: GLuint); extdecl;
 glDispatchComputeIndirect: procedure(indirect: GLintptr); extdecl;
 glCopyImageSubData: procedure(srcName: GLuint; srcTarget: GLenum; srcLevel: GLint; srcX: GLint; srcY: GLint; srcZ: GLint; dstName: GLuint; dstTarget: GLenum; dstLevel: GLint; dstX: GLint; dstY: GLint; dstZ: GLint; srcWidth: GLsizei; srcHeight: GLsizei; srcDepth: GLsizei); extdecl;
 glFramebufferParameteri: procedure(target: GLenum; pname: GLenum; param: GLint); extdecl;
 glGetFramebufferParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); extdecl;
 glGetInternalformati64v: procedure(target: GLenum; internalformat: GLenum; pname: GLenum; bufSize: GLsizei; params: PGLint64); extdecl;
 glInvalidateTexSubImage: procedure(texture: GLuint; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei); extdecl;
 glInvalidateTexImage: procedure(texture: GLuint; level: GLint); extdecl;
 glInvalidateBufferSubData: procedure(buffer: GLuint; offset: GLintptr; length: GLsizeiptr); extdecl;
 glInvalidateBufferData: procedure(buffer: GLuint); extdecl;
 glInvalidateFramebuffer: procedure(target: GLenum; numAttachments: GLsizei; const attachments: PGLenum); extdecl;
 glInvalidateSubFramebuffer: procedure(target: GLenum; numAttachments: GLsizei; const attachments: PGLenum; x: GLint; y: GLint; width: GLsizei; height: GLsizei); extdecl;
 glMultiDrawArraysIndirect: procedure(mode: GLenum; const indirect: PGLvoid; drawcount: GLsizei; stride: GLsizei); extdecl;
 glMultiDrawElementsIndirect: procedure(mode: GLenum; _type: GLenum; const indirect: PGLvoid; drawcount: GLsizei; stride: GLsizei); extdecl;
 glGetProgramInterfaceiv: procedure(_program: GLuint; programInterface: GLenum; pname: GLenum; params: PGLint); extdecl;
 glGetProgramResourceIndex: function(_program: GLuint; programInterface: GLenum; const name: PGLchar): GLuint; extdecl;
 glGetProgramResourceName: procedure(_program: GLuint; programInterface: GLenum; index: GLuint; bufSize: GLsizei; length: PGLsizei; name: PGLchar); extdecl;
 glGetProgramResourceiv: procedure(_program: GLuint; programInterface: GLenum; index: GLuint; propCount: GLsizei; const props: PGLenum; bufSize: GLsizei; length: PGLsizei; params: PGLint); extdecl;
 glGetProgramResourceLocation: function(_program: GLuint; programInterface: GLenum; const name: PGLchar): GLint; extdecl;
 glGetProgramResourceLocationIndex: function(_program: GLuint; programInterface: GLenum; const name: PGLchar): GLint; extdecl;
 glShaderStorageBlockBinding: procedure(_program: GLuint; storageBlockIndex: GLuint; storageBlockBinding: GLuint); extdecl;
 glTexBufferRange: procedure(target: GLenum; internalformat: GLenum; buffer: GLuint; offset: GLintptr; size: GLsizeiptr); extdecl;
 glTexStorage2DMultisample: procedure(target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; fixedsamplelocations: GLboolean); extdecl;
 glTexStorage3DMultisample: procedure(target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; fixedsamplelocations: GLboolean); extdecl;
 glTextureView: procedure(texture: GLuint; target: GLenum; origtexture: GLuint; internalformat: GLenum; minlevel: GLuint; numlevels: GLuint; minlayer: GLuint; numlayers: GLuint); extdecl;
 glBindVertexBuffer: procedure(bindingindex: GLuint; buffer: GLuint; offset: GLintptr; stride: GLsizei); extdecl;
 glVertexAttribFormat: procedure(attribindex: GLuint; size: GLint; _type: GLenum; normalized: GLboolean; relativeoffset: GLuint); extdecl;
 glVertexAttribIFormat: procedure(attribindex: GLuint; size: GLint; _type: GLenum; relativeoffset: GLuint); extdecl;
 glVertexAttribLFormat: procedure(attribindex: GLuint; size: GLint; _type: GLenum; relativeoffset: GLuint); extdecl;
 glVertexAttribBinding: procedure(attribindex: GLuint; bindingindex: GLuint); extdecl;
 glVertexBindingDivisor: procedure(bindingindex: GLuint; divisor: GLuint); extdecl;
 glDebugMessageControl: procedure(source: GLenum; _type: GLenum; severity: GLenum; count: GLsizei; const ids: PGLuint; enabled: GLboolean); extdecl;
 glDebugMessageInsert: procedure(source: GLenum; _type: GLenum; id: GLuint; severity: GLenum; length: GLsizei; const buf: PGLchar); extdecl;
 glDebugMessageCallback: procedure(callback: GLDEBUGPROC; const userParam: PGLvoid); extdecl;
 glGetDebugMessageLog: function(count: GLuint; bufSize: GLsizei; sources: PGLenum; types: PGLenum; ids: PGLuint; severities: PGLenum; lengths: PGLsizei; messageLog: PGLchar): GLuint; extdecl;
 glPushDebugGroup: procedure(source: GLenum; id: GLuint; length: GLsizei; const message: PGLchar); extdecl;
 glPopDebugGroup: procedure(); extdecl;
 glObjectLabel: procedure(identifier: GLenum; name: GLuint; length: GLsizei; const _label: PGLchar); extdecl;
 glGetObjectLabel: procedure(identifier: GLenum; name: GLuint; bufSize: GLsizei; length: PGLsizei; _label: PGLchar); extdecl;
 glObjectPtrLabel: procedure(const ptr: PGLvoid; length: GLsizei; const _label: PGLchar); extdecl;
 glGetObjectPtrLabel: procedure(const ptr: PGLvoid; bufSize: GLsizei; length: PGLsizei; _label: PGLchar); extdecl;
//9 procedures for GL_VERSION_4_4
 glBufferStorage: procedure(target: GLenum; size: GLsizeiptr; const data: PGLvoid; flags: GLbitfield); extdecl;
 glClearTexImage: procedure(texture: GLuint; level: GLint; format: GLenum; _type: GLenum; const data: PGLvoid); extdecl;
 glClearTexSubImage: procedure(texture: GLuint; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; _type: GLenum; const data: PGLvoid); extdecl;
 glBindBuffersBase: procedure(target: GLenum; first: GLuint; count: GLsizei; const buffers: PGLuint); extdecl;
 glBindBuffersRange: procedure(target: GLenum; first: GLuint; count: GLsizei; const buffers: PGLuint; const offsets: PGLintptr; const sizes: PGLsizeiptr); extdecl;
 glBindTextures: procedure(first: GLuint; count: GLsizei; const textures: PGLuint); extdecl;
 glBindSamplers: procedure(first: GLuint; count: GLsizei; const samplers: PGLuint); extdecl;
 glBindImageTextures: procedure(first: GLuint; count: GLsizei; const textures: PGLuint); extdecl;
 glBindVertexBuffers: procedure(first: GLuint; count: GLsizei; const buffers: PGLuint; const offsets: PGLintptr; const strides: PGLsizei); extdecl;
//110 procedures for GL_VERSION_4_5
 glClipControl: procedure(origin: GLenum; depth: GLenum); extdecl;
 glCreateTransformFeedbacks: procedure(n: GLsizei; ids: PGLuint); extdecl;
 glTransformFeedbackBufferBase: procedure(xfb: GLuint; index: GLuint; buffer: GLuint); extdecl;
 glTransformFeedbackBufferRange: procedure(xfb: GLuint; index: GLuint; buffer: GLuint; offset: GLintptr; size: GLsizeiptr); extdecl;
 glGetTransformFeedbackiv: procedure(xfb: GLuint; pname: GLenum; param: PGLint); extdecl;
 glGetTransformFeedbacki_v: procedure(xfb: GLuint; pname: GLenum; index: GLuint; param: PGLint); extdecl;
 glGetTransformFeedbacki64_v: procedure(xfb: GLuint; pname: GLenum; index: GLuint; param: PGLint64); extdecl;
 glCreateBuffers: procedure(n: GLsizei; buffers: PGLuint); extdecl;
 glNamedBufferStorage: procedure(buffer: GLuint; size: GLsizeiptr; const data: PGLvoid; flags: GLbitfield); extdecl;
 glNamedBufferData: procedure(buffer: GLuint; size: GLsizeiptr; const data: PGLvoid; usage: GLenum); extdecl;
 glNamedBufferSubData: procedure(buffer: GLuint; offset: GLintptr; size: GLsizeiptr; const data: PGLvoid); extdecl;
 glCopyNamedBufferSubData: procedure(readBuffer: GLuint; writeBuffer: GLuint; readOffset: GLintptr; writeOffset: GLintptr; size: GLsizeiptr); extdecl;
 glClearNamedBufferData: procedure(buffer: GLuint; internalformat: GLenum; format: GLenum; _type: GLenum; const data: PGLvoid); extdecl;
 glClearNamedBufferSubData: procedure(buffer: GLuint; internalformat: GLenum; offset: GLintptr; size: GLsizeiptr; format: GLenum; _type: GLenum; const data: PGLvoid); extdecl;
 glMapNamedBuffer: procedure(buffer: GLuint; access: GLenum); extdecl;
 glMapNamedBufferRange: procedure(buffer: GLuint; offset: GLintptr; length: GLsizeiptr; access: GLbitfield); extdecl;
 glUnmapNamedBuffer: function(buffer: GLuint): GLboolean; extdecl;
 glFlushMappedNamedBufferRange: procedure(buffer: GLuint; offset: GLintptr; length: GLsizeiptr); extdecl;
 glGetNamedBufferParameteriv: procedure(buffer: GLuint; pname: GLenum; params: PGLint); extdecl;
 glGetNamedBufferParameteri64v: procedure(buffer: GLuint; pname: GLenum; params: PGLint64); extdecl;
 glGetNamedBufferPointerv: procedure(buffer: GLuint; pname: GLenum; params: PGLvoid); extdecl;
 glGetNamedBufferSubData: procedure(buffer: GLuint; offset: GLintptr; size: GLsizeiptr; data: PGLvoid); extdecl;
 glCreateFramebuffers: procedure(n: GLsizei; framebuffers: PGLuint); extdecl;
 glNamedFramebufferRenderbuffer: procedure(framebuffer: GLuint; attachment: GLenum; renderbuffertarget: GLenum; renderbuffer: GLuint); extdecl;
 glNamedFramebufferParameteri: procedure(framebuffer: GLuint; pname: GLenum; param: GLint); extdecl;
 glNamedFramebufferTexture: procedure(framebuffer: GLuint; attachment: GLenum; texture: GLuint; level: GLint); extdecl;
 glNamedFramebufferTextureLayer: procedure(framebuffer: GLuint; attachment: GLenum; texture: GLuint; level: GLint; layer: GLint); extdecl;
 glNamedFramebufferDrawBuffer: procedure(framebuffer: GLuint; buf: GLenum); extdecl;
 glNamedFramebufferDrawBuffers: procedure(framebuffer: GLuint; n: GLsizei; const bufs: PGLenum); extdecl;
 glNamedFramebufferReadBuffer: procedure(framebuffer: GLuint; src: GLenum); extdecl;
 glInvalidateNamedFramebufferData: procedure(framebuffer: GLuint; numAttachments: GLsizei; const attachments: PGLenum); extdecl;
 glInvalidateNamedFramebufferSubData: procedure(framebuffer: GLuint; numAttachments: GLsizei; const attachments: PGLenum; x: GLint; y: GLint; width: GLsizei; height: GLsizei); extdecl;
 glClearNamedFramebufferiv: procedure(framebuffer: GLuint; buffer: GLenum; drawbuffer: GLint; const value: PGLint); extdecl;
 glClearNamedFramebufferuiv: procedure(framebuffer: GLuint; buffer: GLenum; drawbuffer: GLint; const value: PGLuint); extdecl;
 glClearNamedFramebufferfv: procedure(framebuffer: GLuint; buffer: GLenum; drawbuffer: GLint; const value: PGLfloat); extdecl;
 glClearNamedFramebufferfi: procedure(framebuffer: GLuint; buffer: GLenum; const depth: GLfloat; stencil: GLint); extdecl;
 glBlitNamedFramebuffer: procedure(readFramebuffer: GLuint; drawFramebuffer: GLuint; srcX0: GLint; srcY0: GLint; srcX1: GLint; srcY1: GLint; dstX0: GLint; dstY0: GLint; dstX1: GLint; dstY1: GLint; mask: GLbitfield; filter: GLenum); extdecl;
 glCheckNamedFramebufferStatus: function(framebuffer: GLuint; target: GLenum): GLenum; extdecl;
 glGetNamedFramebufferParameteriv: procedure(framebuffer: GLuint; pname: GLenum; param: PGLint); extdecl;
 glGetNamedFramebufferAttachmentParameteriv: procedure(framebuffer: GLuint; attachment: GLenum; pname: GLenum; params: PGLint); extdecl;
 glCreateRenderbuffers: procedure(n: GLsizei; renderbuffers: PGLuint); extdecl;
 glNamedRenderbufferStorage: procedure(renderbuffer: GLuint; internalformat: GLenum; width: GLsizei; height: GLsizei); extdecl;
 glNamedRenderbufferStorageMultisample: procedure(renderbuffer: GLuint; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei); extdecl;
 glGetNamedRenderbufferParameteriv: procedure(renderbuffer: GLuint; pname: GLenum; params: PGLint); extdecl;
 glCreateTextures: procedure(target: GLenum; n: GLsizei; textures: PGLuint); extdecl;
 glTextureBuffer: procedure(texture: GLuint; internalformat: GLenum; buffer: GLuint); extdecl;
 glTextureBufferRange: procedure(texture: GLuint; internalformat: GLenum; buffer: GLuint; offset: GLintptr; size: GLsizeiptr); extdecl;
 glTextureStorage1D: procedure(texture: GLuint; levels: GLsizei; internalformat: GLenum; width: GLsizei); extdecl;
 glTextureStorage2D: procedure(texture: GLuint; levels: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei); extdecl;
 glTextureStorage3D: procedure(texture: GLuint; levels: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei); extdecl;
 glTextureStorage2DMultisample: procedure(texture: GLuint; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; fixedsamplelocations: GLboolean); extdecl;
 glTextureStorage3DMultisample: procedure(texture: GLuint; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; fixedsamplelocations: GLboolean); extdecl;
 glTextureSubImage1D: procedure(texture: GLuint; level: GLint; xoffset: GLint; width: GLsizei; format: GLenum; _type: GLenum; const pixels: PGLvoid); extdecl;
 glTextureSubImage2D: procedure(texture: GLuint; level: GLint; xoffset: GLint; yoffset: GLint; width: GLsizei; height: GLsizei; format: GLenum; _type: GLenum; const pixels: PGLvoid); extdecl;
 glTextureSubImage3D: procedure(texture: GLuint; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; _type: GLenum; const pixels: PGLvoid); extdecl;
 glCompressedTextureSubImage1D: procedure(texture: GLuint; level: GLint; xoffset: GLint; width: GLsizei; format: GLenum; imageSize: GLsizei; const data: PGLvoid); extdecl;
 glCompressedTextureSubImage2D: procedure(texture: GLuint; level: GLint; xoffset: GLint; yoffset: GLint; width: GLsizei; height: GLsizei; format: GLenum; imageSize: GLsizei; const data: PGLvoid); extdecl;
 glCompressedTextureSubImage3D: procedure(texture: GLuint; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; imageSize: GLsizei; const data: PGLvoid); extdecl;
 glCopyTextureSubImage1D: procedure(texture: GLuint; level: GLint; xoffset: GLint; x: GLint; y: GLint; width: GLsizei); extdecl;
 glCopyTextureSubImage2D: procedure(texture: GLuint; level: GLint; xoffset: GLint; yoffset: GLint; x: GLint; y: GLint; width: GLsizei; height: GLsizei); extdecl;
 glCopyTextureSubImage3D: procedure(texture: GLuint; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; x: GLint; y: GLint; width: GLsizei; height: GLsizei); extdecl;
 glTextureParameterf: procedure(texture: GLuint; pname: GLenum; param: GLfloat); extdecl;
 glTextureParameterfv: procedure(texture: GLuint; pname: GLenum; const param: PGLfloat); extdecl;
 glTextureParameteri: procedure(texture: GLuint; pname: GLenum; param: GLint); extdecl;
 glTextureParameterIiv: procedure(texture: GLuint; pname: GLenum; const params: PGLint); extdecl;
 glTextureParameterIuiv: procedure(texture: GLuint; pname: GLenum; const params: PGLuint); extdecl;
 glTextureParameteriv: procedure(texture: GLuint; pname: GLenum; const param: PGLint); extdecl;
 glGenerateTextureMipmap: procedure(texture: GLuint); extdecl;
 glBindTextureUnit: procedure(_unit: GLuint; texture: GLuint); extdecl;
 glGetTextureImage: procedure(texture: GLuint; level: GLint; format: GLenum; _type: GLenum; bufSize: GLsizei; pixels: PGLvoid); extdecl;
 glGetCompressedTextureImage: procedure(texture: GLuint; level: GLint; bufSize: GLsizei; pixels: PGLvoid); extdecl;
 glGetTextureLevelParameterfv: procedure(texture: GLuint; level: GLint; pname: GLenum; params: PGLfloat); extdecl;
 glGetTextureLevelParameteriv: procedure(texture: GLuint; level: GLint; pname: GLenum; params: PGLint); extdecl;
 glGetTextureParameterfv: procedure(texture: GLuint; pname: GLenum; params: PGLfloat); extdecl;
 glGetTextureParameterIiv: procedure(texture: GLuint; pname: GLenum; params: PGLint); extdecl;
 glGetTextureParameterIuiv: procedure(texture: GLuint; pname: GLenum; params: PGLuint); extdecl;
 glGetTextureParameteriv: procedure(texture: GLuint; pname: GLenum; params: PGLint); extdecl;
 glCreateVertexArrays: procedure(n: GLsizei; arrays: PGLuint); extdecl;
 glDisableVertexArrayAttrib: procedure(vaobj: GLuint; index: GLuint); extdecl;
 glEnableVertexArrayAttrib: procedure(vaobj: GLuint; index: GLuint); extdecl;
 glVertexArrayElementBuffer: procedure(vaobj: GLuint; buffer: GLuint); extdecl;
 glVertexArrayVertexBuffer: procedure(vaobj: GLuint; bindingindex: GLuint; buffer: GLuint; offset: GLintptr; stride: GLsizei); extdecl;
 glVertexArrayVertexBuffers: procedure(vaobj: GLuint; first: GLuint; count: GLsizei; const buffers: PGLuint; const offsets: PGLintptr; const strides: PGLsizei); extdecl;
 glVertexArrayAttribBinding: procedure(vaobj: GLuint; attribindex: GLuint; bindingindex: GLuint); extdecl;
 glVertexArrayAttribFormat: procedure(vaobj: GLuint; attribindex: GLuint; size: GLint; _type: GLenum; normalized: GLboolean; relativeoffset: GLuint); extdecl;
 glVertexArrayAttribIFormat: procedure(vaobj: GLuint; attribindex: GLuint; size: GLint; _type: GLenum; relativeoffset: GLuint); extdecl;
 glVertexArrayAttribLFormat: procedure(vaobj: GLuint; attribindex: GLuint; size: GLint; _type: GLenum; relativeoffset: GLuint); extdecl;
 glVertexArrayBindingDivisor: procedure(vaobj: GLuint; bindingindex: GLuint; divisor: GLuint); extdecl;
 glGetVertexArrayiv: procedure(vaobj: GLuint; pname: GLenum; param: PGLint); extdecl;
 glGetVertexArrayIndexediv: procedure(vaobj: GLuint; index: GLuint; pname: GLenum; param: PGLint); extdecl;
 glGetVertexArrayIndexed64iv: procedure(vaobj: GLuint; index: GLuint; pname: GLenum; param: PGLint64); extdecl;
 glCreateSamplers: procedure(n: GLsizei; samplers: PGLuint); extdecl;
 glCreateProgramPipelines: procedure(n: GLsizei; pipelines: PGLuint); extdecl;
 glCreateQueries: procedure(target: GLenum; n: GLsizei; ids: PGLuint); extdecl;
 glGetQueryBufferObjecti64v: procedure(id: GLuint; buffer: GLuint; pname: GLenum; offset: GLintptr); extdecl;
 glGetQueryBufferObjectiv: procedure(id: GLuint; buffer: GLuint; pname: GLenum; offset: GLintptr); extdecl;
 glGetQueryBufferObjectui64v: procedure(id: GLuint; buffer: GLuint; pname: GLenum; offset: GLintptr); extdecl;
 glGetQueryBufferObjectuiv: procedure(id: GLuint; buffer: GLuint; pname: GLenum; offset: GLintptr); extdecl;
 glMemoryBarrierByRegion: procedure(barriers: GLbitfield); extdecl;
 glGetTextureSubImage: procedure(texture: GLuint; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; _type: GLenum; bufSize: GLsizei; pixels: PGLvoid); extdecl;
 glGetCompressedTextureSubImage: procedure(texture: GLuint; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; bufSize: GLsizei; pixels: PGLvoid); extdecl;
 glGetGraphicsResetStatus: function(): GLenum; extdecl;
 glGetnCompressedTexImage: procedure(target: GLenum; lod: GLint; bufSize: GLsizei; pixels: PGLvoid); extdecl;
 glGetnTexImage: procedure(target: GLenum; level: GLint; format: GLenum; _type: GLenum; bufSize: GLsizei; pixels: PGLvoid); extdecl;
 glGetnUniformdv: procedure(_program: GLuint; location: GLint; bufSize: GLsizei; params: PGLdouble); extdecl;
 glGetnUniformfv: procedure(_program: GLuint; location: GLint; bufSize: GLsizei; params: PGLfloat); extdecl;
 glGetnUniformiv: procedure(_program: GLuint; location: GLint; bufSize: GLsizei; params: PGLint); extdecl;
 glGetnUniformuiv: procedure(_program: GLuint; location: GLint; bufSize: GLsizei; params: PGLuint); extdecl;
 glReadnPixels: procedure(x: GLint; y: GLint; width: GLsizei; height: GLsizei; format: GLenum; _type: GLenum; bufSize: GLsizei; data: PGLvoid); extdecl;
 glTextureBarrier: procedure(); extdecl;
//47 procedures for GL_ARB
 glGetTextureHandleARB: function(texture: GLuint): GLuint64; extdecl;
 glGetTextureSamplerHandleARB: function(texture: GLuint; sampler: GLuint): GLuint64; extdecl;
 glMakeTextureHandleResidentARB: procedure(handle: GLuint64); extdecl;
 glMakeTextureHandleNonResidentARB: procedure(handle: GLuint64); extdecl;
 glGetImageHandleARB: function(texture: GLuint; level: GLint; layered: GLboolean; layer: GLint; format: GLenum): GLuint64; extdecl;
 glMakeImageHandleResidentARB: procedure(handle: GLuint64; access: GLenum); extdecl;
 glMakeImageHandleNonResidentARB: procedure(handle: GLuint64); extdecl;
 glUniformHandleui64ARB: procedure(location: GLint; value: GLuint64); extdecl;
 glUniformHandleui64vARB: procedure(location: GLint; count: GLsizei; const value: PGLuint64); extdecl;
 glProgramUniformHandleui64ARB: procedure(_program: GLuint; location: GLint; value: GLuint64); extdecl;
 glProgramUniformHandleui64vARB: procedure(_program: GLuint; location: GLint; count: GLsizei; const values: PGLuint64); extdecl;
 glIsTextureHandleResidentARB: function(handle: GLuint64): GLboolean; extdecl;
 glIsImageHandleResidentARB: function(handle: GLuint64): GLboolean; extdecl;
 glVertexAttribL1ui64ARB: procedure(index: GLuint; x: GLuint64EXT); extdecl;
 glVertexAttribL1ui64vARB: procedure(index: GLuint; const v: PGLuint64EXT); extdecl;
 glGetVertexAttribLui64vARB: procedure(index: GLuint; pname: GLenum; params: PGLuint64EXT); extdecl;
 glCreateSyncFromCLeventARB: function(context: P_cl_context; event: P_cl_event; flags: GLbitfield): GLsync; extdecl;
 glDispatchComputeGroupSizeARB: procedure(num_groups_x: GLuint; num_groups_y: GLuint; num_groups_z: GLuint; group_size_x: GLuint; group_size_y: GLuint; group_size_z: GLuint); extdecl;
 glDebugMessageControlARB: procedure(source: GLenum; _type: GLenum; severity: GLenum; count: GLsizei; const ids: PGLuint; enabled: GLboolean); extdecl;
 glDebugMessageInsertARB: procedure(source: GLenum; _type: GLenum; id: GLuint; severity: GLenum; length: GLsizei; const buf: PGLchar); extdecl;
 glDebugMessageCallbackARB: procedure(callback: GLDEBUGPROCARB; const userParam: PGLvoid); extdecl;
 glGetDebugMessageLogARB: function(count: GLuint; bufSize: GLsizei; sources: PGLenum; types: PGLenum; ids: PGLuint; severities: PGLenum; lengths: PGLsizei; messageLog: PGLchar): GLuint; extdecl;
 glBlendEquationiARB: procedure(buf: GLuint; mode: GLenum); extdecl;
 glBlendEquationSeparateiARB: procedure(buf: GLuint; modeRGB: GLenum; modeAlpha: GLenum); extdecl;
 glBlendFunciARB: procedure(buf: GLuint; src: GLenum; dst: GLenum); extdecl;
 glBlendFuncSeparateiARB: procedure(buf: GLuint; srcRGB: GLenum; dstRGB: GLenum; srcAlpha: GLenum; dstAlpha: GLenum); extdecl;
 glMultiDrawArraysIndirectCountARB: procedure(mode: GLenum; indirect: GLintptr; drawcount: GLintptr; maxdrawcount: GLsizei; stride: GLsizei); extdecl;
 glMultiDrawElementsIndirectCountARB: procedure(mode: GLenum; _type: GLenum; indirect: GLintptr; drawcount: GLintptr; maxdrawcount: GLsizei; stride: GLsizei); extdecl;
 glGetGraphicsResetStatusARB: function(): GLenum; extdecl;
 glGetnTexImageARB: procedure(target: GLenum; level: GLint; format: GLenum; _type: GLenum; bufSize: GLsizei; img: PGLvoid); extdecl;
 glReadnPixelsARB: procedure(x: GLint; y: GLint; width: GLsizei; height: GLsizei; format: GLenum; _type: GLenum; bufSize: GLsizei; data: PGLvoid); extdecl;
 glGetnCompressedTexImageARB: procedure(target: GLenum; lod: GLint; bufSize: GLsizei; img: PGLvoid); extdecl;
 glGetnUniformfvARB: procedure(_program: GLuint; location: GLint; bufSize: GLsizei; params: PGLfloat); extdecl;
 glGetnUniformivARB: procedure(_program: GLuint; location: GLint; bufSize: GLsizei; params: PGLint); extdecl;
 glGetnUniformuivARB: procedure(_program: GLuint; location: GLint; bufSize: GLsizei; params: PGLuint); extdecl;
 glGetnUniformdvARB: procedure(_program: GLuint; location: GLint; bufSize: GLsizei; params: PGLdouble); extdecl;
 glMinSampleShadingARB: procedure(value: GLfloat); extdecl;
 glNamedStringARB: procedure(_type: GLenum; namelen: GLint; const name: PGLchar; stringlen: GLint; const _string: PGLchar); extdecl;
 glDeleteNamedStringARB: procedure(namelen: GLint; const name: PGLchar); extdecl;
 glCompileShaderIncludeARB: procedure(shader: GLuint; count: GLsizei; const constpath: PGLchar; const length: PGLint); extdecl;
 glIsNamedStringARB: function(namelen: GLint; const name: PGLchar): GLboolean; extdecl;
 glGetNamedStringARB: procedure(namelen: GLint; const name: PGLchar; bufSize: GLsizei; stringlen: PGLint; _string: PGLchar); extdecl;
 glGetNamedStringivARB: procedure(namelen: GLint; const name: PGLchar; pname: GLenum; params: PGLint); extdecl;
 glBufferPageCommitmentARB: procedure(target: GLenum; offset: GLintptr; size: GLsizeiptr; commit: GLboolean); extdecl;
 glNamedBufferPageCommitmentEXT: procedure(buffer: GLuint; offset: GLintptr; size: GLsizeiptr; commit: GLboolean); extdecl;
 glNamedBufferPageCommitmentARB: procedure(buffer: GLuint; offset: GLintptr; size: GLsizeiptr; commit: GLboolean); extdecl;
 glTexPageCommitmentARB: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; resident: GLboolean); extdecl;
 function Load_GL_VERSION_3_2_CORE : boolean;
 function Load_GL_VERSION_3_3_CORE : boolean;
 function Load_GL_VERSION_4_0_CORE : boolean;
 function Load_GL_VERSION_4_1_CORE : boolean;
 function Load_GL_VERSION_4_2_CORE : boolean;
 function Load_GL_VERSION_4_3_CORE : boolean;
 function Load_GL_VERSION_4_4_CORE : boolean;
 function Load_GL_VERSION_4_5_CORE : boolean;
 function Load_GL_ARB_CORE : boolean;

implementation

{$IFDEF Windows}
var
  gLibGL : Pointer = nil;

function getProc(proc: PChar; var OK: boolean): Pointer;
begin
  if gLibGL <> nil then begin
     result := GetProcAddress(HMODULE(gLibGL), proc);
     if result <> nil then
        exit;
  end;
  if Addr(wglGetProcAddress) <> nil then
     result := wglGetProcAddress(proc);
  if not Assigned(result) then OK := false;
end;
{$ELSE}
function getProc(proc: PChar; var OK: boolean): Pointer;
begin
  result := GetProcAddress(LibGL, proc);
  //writeln('Loading ' + proc);
  if not Assigned(result) then begin
  	writeln('Unable to load ' + proc);
  	OK := false;
  end;
end;
{$ENDIF}

//317 procedures for GL_VERSION_3_2
function Load_GL_VERSION_3_2_CORE : boolean;
var
 OK : boolean = true;
begin
 {$IFDEF Windows}  //see gl.pp
 if gLibGL <> nil then
   FreeLibrary(HMODULE(gLibGL));
 gLibGL := Pointer(LoadLibrary(PChar('OpenGL32.dll')));
 {$ENDIF}
 glCullFace := getProc('glCullFace', OK);
 glFrontFace := getProc('glFrontFace', OK);
 glHint := getProc('glHint', OK);
 glLineWidth := getProc('glLineWidth', OK);
 glPointSize := getProc('glPointSize', OK);
 glPolygonMode := getProc('glPolygonMode', OK);
 glScissor := getProc('glScissor', OK);
 glTexParameterf := getProc('glTexParameterf', OK);
 glTexParameterfv := getProc('glTexParameterfv', OK);
 glTexParameteri := getProc('glTexParameteri', OK);
 glTexParameteriv := getProc('glTexParameteriv', OK);
 glTexImage1D := getProc('glTexImage1D', OK);
 glTexImage2D := getProc('glTexImage2D', OK);
 glDrawBuffer := getProc('glDrawBuffer', OK);
 glClear := getProc('glClear', OK);
 glClearColor := getProc('glClearColor', OK);
 glClearStencil := getProc('glClearStencil', OK);
 glClearDepth := getProc('glClearDepth', OK);
 glStencilMask := getProc('glStencilMask', OK);
 glColorMask := getProc('glColorMask', OK);
 glDepthMask := getProc('glDepthMask', OK);
 glDisable := getProc('glDisable', OK);
 glEnable := getProc('glEnable', OK);
 glFinish := getProc('glFinish', OK);
 glFlush := getProc('glFlush', OK);
 glBlendFunc := getProc('glBlendFunc', OK);
 glLogicOp := getProc('glLogicOp', OK);
 glStencilFunc := getProc('glStencilFunc', OK);
 glStencilOp := getProc('glStencilOp', OK);
 glDepthFunc := getProc('glDepthFunc', OK);
 glPixelStoref := getProc('glPixelStoref', OK);
 glPixelStorei := getProc('glPixelStorei', OK);
 glReadBuffer := getProc('glReadBuffer', OK);
 glReadPixels := getProc('glReadPixels', OK);
 glGetBooleanv := getProc('glGetBooleanv', OK);
 glGetDoublev := getProc('glGetDoublev', OK);
 glGetError := getProc('glGetError', OK);
 glGetFloatv := getProc('glGetFloatv', OK);
 glGetIntegerv := getProc('glGetIntegerv', OK);
 glGetString := getProc('glGetString', OK);
 glGetTexImage := getProc('glGetTexImage', OK);
 glGetTexParameterfv := getProc('glGetTexParameterfv', OK);
 glGetTexParameteriv := getProc('glGetTexParameteriv', OK);
 glGetTexLevelParameterfv := getProc('glGetTexLevelParameterfv', OK);
 glGetTexLevelParameteriv := getProc('glGetTexLevelParameteriv', OK);
 glIsEnabled := getProc('glIsEnabled', OK);
 glDepthRange := getProc('glDepthRange', OK);
 glViewport := getProc('glViewport', OK);
 glDrawArrays := getProc('glDrawArrays', OK);
 glDrawElements := getProc('glDrawElements', OK);
 glGetPointerv := getProc('glGetPointerv', OK);
 glPolygonOffset := getProc('glPolygonOffset', OK);
 glCopyTexImage1D := getProc('glCopyTexImage1D', OK);
 glCopyTexImage2D := getProc('glCopyTexImage2D', OK);
 glCopyTexSubImage1D := getProc('glCopyTexSubImage1D', OK);
 glCopyTexSubImage2D := getProc('glCopyTexSubImage2D', OK);
 glTexSubImage1D := getProc('glTexSubImage1D', OK);
 glTexSubImage2D := getProc('glTexSubImage2D', OK);
 glBindTexture := getProc('glBindTexture', OK);
 glDeleteTextures := getProc('glDeleteTextures', OK);
 glGenTextures := getProc('glGenTextures', OK);
 glIsTexture := getProc('glIsTexture', OK);
 glDrawRangeElements := getProc('glDrawRangeElements', OK);
 glTexImage3D := getProc('glTexImage3D', OK);
 glTexSubImage3D := getProc('glTexSubImage3D', OK);
 glCopyTexSubImage3D := getProc('glCopyTexSubImage3D', OK);
 glActiveTexture := getProc('glActiveTexture', OK);
 glSampleCoverage := getProc('glSampleCoverage', OK);
 glCompressedTexImage3D := getProc('glCompressedTexImage3D', OK);
 glCompressedTexImage2D := getProc('glCompressedTexImage2D', OK);
 glCompressedTexImage1D := getProc('glCompressedTexImage1D', OK);
 glCompressedTexSubImage3D := getProc('glCompressedTexSubImage3D', OK);
 glCompressedTexSubImage2D := getProc('glCompressedTexSubImage2D', OK);
 glCompressedTexSubImage1D := getProc('glCompressedTexSubImage1D', OK);
 glGetCompressedTexImage := getProc('glGetCompressedTexImage', OK);
 glBlendFuncSeparate := getProc('glBlendFuncSeparate', OK);
 glMultiDrawArrays := getProc('glMultiDrawArrays', OK);
 glMultiDrawElements := getProc('glMultiDrawElements', OK);
 glPointParameterf := getProc('glPointParameterf', OK);
 glPointParameterfv := getProc('glPointParameterfv', OK);
 glPointParameteri := getProc('glPointParameteri', OK);
 glPointParameteriv := getProc('glPointParameteriv', OK);
 glBlendColor := getProc('glBlendColor', OK);
 glBlendEquation := getProc('glBlendEquation', OK);
 glGenQueries := getProc('glGenQueries', OK);
 glDeleteQueries := getProc('glDeleteQueries', OK);
 glIsQuery := getProc('glIsQuery', OK);
 glBeginQuery := getProc('glBeginQuery', OK);
 glEndQuery := getProc('glEndQuery', OK);
 glGetQueryiv := getProc('glGetQueryiv', OK);
 glGetQueryObjectiv := getProc('glGetQueryObjectiv', OK);
 glGetQueryObjectuiv := getProc('glGetQueryObjectuiv', OK);
 glBindBuffer := getProc('glBindBuffer', OK);
 glDeleteBuffers := getProc('glDeleteBuffers', OK);
 glGenBuffers := getProc('glGenBuffers', OK);
 glIsBuffer := getProc('glIsBuffer', OK);
 glBufferData := getProc('glBufferData', OK);
 glBufferSubData := getProc('glBufferSubData', OK);
 glGetBufferSubData := getProc('glGetBufferSubData', OK);
 glMapBuffer := getProc('glMapBuffer', OK);
 glUnmapBuffer := getProc('glUnmapBuffer', OK);
 glGetBufferParameteriv := getProc('glGetBufferParameteriv', OK);
 glGetBufferPointerv := getProc('glGetBufferPointerv', OK);
 glBlendEquationSeparate := getProc('glBlendEquationSeparate', OK);
 glDrawBuffers := getProc('glDrawBuffers', OK);
 glStencilOpSeparate := getProc('glStencilOpSeparate', OK);
 glStencilFuncSeparate := getProc('glStencilFuncSeparate', OK);
 glStencilMaskSeparate := getProc('glStencilMaskSeparate', OK);
 glAttachShader := getProc('glAttachShader', OK);
 glBindAttribLocation := getProc('glBindAttribLocation', OK);
 glCompileShader := getProc('glCompileShader', OK);
 glCreateProgram := getProc('glCreateProgram', OK);
 glCreateShader := getProc('glCreateShader', OK);
 glDeleteProgram := getProc('glDeleteProgram', OK);
 glDeleteShader := getProc('glDeleteShader', OK);
 glDetachShader := getProc('glDetachShader', OK);
 glDisableVertexAttribArray := getProc('glDisableVertexAttribArray', OK);
 glEnableVertexAttribArray := getProc('glEnableVertexAttribArray', OK);
 glGetActiveAttrib := getProc('glGetActiveAttrib', OK);
 glGetActiveUniform := getProc('glGetActiveUniform', OK);
 glGetAttachedShaders := getProc('glGetAttachedShaders', OK);
 glGetAttribLocation := getProc('glGetAttribLocation', OK);
 glGetProgramiv := getProc('glGetProgramiv', OK);
 glGetProgramInfoLog := getProc('glGetProgramInfoLog', OK);
 glGetShaderiv := getProc('glGetShaderiv', OK);
 glGetShaderInfoLog := getProc('glGetShaderInfoLog', OK);
 glGetShaderSource := getProc('glGetShaderSource', OK);
 glGetUniformLocation := getProc('glGetUniformLocation', OK);
 glGetUniformfv := getProc('glGetUniformfv', OK);
 glGetUniformiv := getProc('glGetUniformiv', OK);
 glGetVertexAttribdv := getProc('glGetVertexAttribdv', OK);
 glGetVertexAttribfv := getProc('glGetVertexAttribfv', OK);
 glGetVertexAttribiv := getProc('glGetVertexAttribiv', OK);
 glGetVertexAttribPointerv := getProc('glGetVertexAttribPointerv', OK);
 glIsProgram := getProc('glIsProgram', OK);
 glIsShader := getProc('glIsShader', OK);
 glLinkProgram := getProc('glLinkProgram', OK);
 glShaderSource := getProc('glShaderSource', OK);
 glUseProgram := getProc('glUseProgram', OK);
 glUniform1f := getProc('glUniform1f', OK);
 glUniform2f := getProc('glUniform2f', OK);
 glUniform3f := getProc('glUniform3f', OK);
 glUniform4f := getProc('glUniform4f', OK);
 glUniform1i := getProc('glUniform1i', OK);
 glUniform2i := getProc('glUniform2i', OK);
 glUniform3i := getProc('glUniform3i', OK);
 glUniform4i := getProc('glUniform4i', OK);
 glUniform1fv := getProc('glUniform1fv', OK);
 glUniform2fv := getProc('glUniform2fv', OK);
 glUniform3fv := getProc('glUniform3fv', OK);
 glUniform4fv := getProc('glUniform4fv', OK);
 glUniform1iv := getProc('glUniform1iv', OK);
 glUniform2iv := getProc('glUniform2iv', OK);
 glUniform3iv := getProc('glUniform3iv', OK);
 glUniform4iv := getProc('glUniform4iv', OK);
 glUniformMatrix2fv := getProc('glUniformMatrix2fv', OK);
 glUniformMatrix3fv := getProc('glUniformMatrix3fv', OK);
 glUniformMatrix4fv := getProc('glUniformMatrix4fv', OK);
 glValidateProgram := getProc('glValidateProgram', OK);
 glVertexAttrib1d := getProc('glVertexAttrib1d', OK);
 glVertexAttrib1dv := getProc('glVertexAttrib1dv', OK);
 glVertexAttrib1f := getProc('glVertexAttrib1f', OK);
 glVertexAttrib1fv := getProc('glVertexAttrib1fv', OK);
 glVertexAttrib1s := getProc('glVertexAttrib1s', OK);
 glVertexAttrib1sv := getProc('glVertexAttrib1sv', OK);
 glVertexAttrib2d := getProc('glVertexAttrib2d', OK);
 glVertexAttrib2dv := getProc('glVertexAttrib2dv', OK);
 glVertexAttrib2f := getProc('glVertexAttrib2f', OK);
 glVertexAttrib2fv := getProc('glVertexAttrib2fv', OK);
 glVertexAttrib2s := getProc('glVertexAttrib2s', OK);
 glVertexAttrib2sv := getProc('glVertexAttrib2sv', OK);
 glVertexAttrib3d := getProc('glVertexAttrib3d', OK);
 glVertexAttrib3dv := getProc('glVertexAttrib3dv', OK);
 glVertexAttrib3f := getProc('glVertexAttrib3f', OK);
 glVertexAttrib3fv := getProc('glVertexAttrib3fv', OK);
 glVertexAttrib3s := getProc('glVertexAttrib3s', OK);
 glVertexAttrib3sv := getProc('glVertexAttrib3sv', OK);
 glVertexAttrib4Nbv := getProc('glVertexAttrib4Nbv', OK);
 glVertexAttrib4Niv := getProc('glVertexAttrib4Niv', OK);
 glVertexAttrib4Nsv := getProc('glVertexAttrib4Nsv', OK);
 glVertexAttrib4Nub := getProc('glVertexAttrib4Nub', OK);
 glVertexAttrib4Nubv := getProc('glVertexAttrib4Nubv', OK);
 glVertexAttrib4Nuiv := getProc('glVertexAttrib4Nuiv', OK);
 glVertexAttrib4Nusv := getProc('glVertexAttrib4Nusv', OK);
 glVertexAttrib4bv := getProc('glVertexAttrib4bv', OK);
 glVertexAttrib4d := getProc('glVertexAttrib4d', OK);
 glVertexAttrib4dv := getProc('glVertexAttrib4dv', OK);
 glVertexAttrib4f := getProc('glVertexAttrib4f', OK);
 glVertexAttrib4fv := getProc('glVertexAttrib4fv', OK);
 glVertexAttrib4iv := getProc('glVertexAttrib4iv', OK);
 glVertexAttrib4s := getProc('glVertexAttrib4s', OK);
 glVertexAttrib4sv := getProc('glVertexAttrib4sv', OK);
 glVertexAttrib4ubv := getProc('glVertexAttrib4ubv', OK);
 glVertexAttrib4uiv := getProc('glVertexAttrib4uiv', OK);
 glVertexAttrib4usv := getProc('glVertexAttrib4usv', OK);
 glVertexAttribPointer := getProc('glVertexAttribPointer', OK);
 glUniformMatrix2x3fv := getProc('glUniformMatrix2x3fv', OK);
 glUniformMatrix3x2fv := getProc('glUniformMatrix3x2fv', OK);
 glUniformMatrix2x4fv := getProc('glUniformMatrix2x4fv', OK);
 glUniformMatrix4x2fv := getProc('glUniformMatrix4x2fv', OK);
 glUniformMatrix3x4fv := getProc('glUniformMatrix3x4fv', OK);
 glUniformMatrix4x3fv := getProc('glUniformMatrix4x3fv', OK);
 glColorMaski := getProc('glColorMaski', OK);
 glGetBooleani_v := getProc('glGetBooleani_v', OK);
 glGetIntegeri_v := getProc('glGetIntegeri_v', OK);
 glEnablei := getProc('glEnablei', OK);
 glDisablei := getProc('glDisablei', OK);
 glIsEnabledi := getProc('glIsEnabledi', OK);
 glBeginTransformFeedback := getProc('glBeginTransformFeedback', OK);
 glEndTransformFeedback := getProc('glEndTransformFeedback', OK);
 glBindBufferRange := getProc('glBindBufferRange', OK);
 glBindBufferBase := getProc('glBindBufferBase', OK);
 glTransformFeedbackVaryings := getProc('glTransformFeedbackVaryings', OK);
 glGetTransformFeedbackVarying := getProc('glGetTransformFeedbackVarying', OK);
 glClampColor := getProc('glClampColor', OK);
 glBeginConditionalRender := getProc('glBeginConditionalRender', OK);
 glEndConditionalRender := getProc('glEndConditionalRender', OK);
 glVertexAttribIPointer := getProc('glVertexAttribIPointer', OK);
 glGetVertexAttribIiv := getProc('glGetVertexAttribIiv', OK);
 glGetVertexAttribIuiv := getProc('glGetVertexAttribIuiv', OK);
 glVertexAttribI1i := getProc('glVertexAttribI1i', OK);
 glVertexAttribI2i := getProc('glVertexAttribI2i', OK);
 glVertexAttribI3i := getProc('glVertexAttribI3i', OK);
 glVertexAttribI4i := getProc('glVertexAttribI4i', OK);
 glVertexAttribI1ui := getProc('glVertexAttribI1ui', OK);
 glVertexAttribI2ui := getProc('glVertexAttribI2ui', OK);
 glVertexAttribI3ui := getProc('glVertexAttribI3ui', OK);
 glVertexAttribI4ui := getProc('glVertexAttribI4ui', OK);
 glVertexAttribI1iv := getProc('glVertexAttribI1iv', OK);
 glVertexAttribI2iv := getProc('glVertexAttribI2iv', OK);
 glVertexAttribI3iv := getProc('glVertexAttribI3iv', OK);
 glVertexAttribI4iv := getProc('glVertexAttribI4iv', OK);
 glVertexAttribI1uiv := getProc('glVertexAttribI1uiv', OK);
 glVertexAttribI2uiv := getProc('glVertexAttribI2uiv', OK);
 glVertexAttribI3uiv := getProc('glVertexAttribI3uiv', OK);
 glVertexAttribI4uiv := getProc('glVertexAttribI4uiv', OK);
 glVertexAttribI4bv := getProc('glVertexAttribI4bv', OK);
 glVertexAttribI4sv := getProc('glVertexAttribI4sv', OK);
 glVertexAttribI4ubv := getProc('glVertexAttribI4ubv', OK);
 glVertexAttribI4usv := getProc('glVertexAttribI4usv', OK);
 glGetUniformuiv := getProc('glGetUniformuiv', OK);
 glBindFragDataLocation := getProc('glBindFragDataLocation', OK);
 glGetFragDataLocation := getProc('glGetFragDataLocation', OK);
 glUniform1ui := getProc('glUniform1ui', OK);
 glUniform2ui := getProc('glUniform2ui', OK);
 glUniform3ui := getProc('glUniform3ui', OK);
 glUniform4ui := getProc('glUniform4ui', OK);
 glUniform1uiv := getProc('glUniform1uiv', OK);
 glUniform2uiv := getProc('glUniform2uiv', OK);
 glUniform3uiv := getProc('glUniform3uiv', OK);
 glUniform4uiv := getProc('glUniform4uiv', OK);
 glTexParameterIiv := getProc('glTexParameterIiv', OK);
 glTexParameterIuiv := getProc('glTexParameterIuiv', OK);
 glGetTexParameterIiv := getProc('glGetTexParameterIiv', OK);
 glGetTexParameterIuiv := getProc('glGetTexParameterIuiv', OK);
 glClearBufferiv := getProc('glClearBufferiv', OK);
 glClearBufferuiv := getProc('glClearBufferuiv', OK);
 glClearBufferfv := getProc('glClearBufferfv', OK);
 glClearBufferfi := getProc('glClearBufferfi', OK);
 glGetStringi := getProc('glGetStringi', OK);
 glIsRenderbuffer := getProc('glIsRenderbuffer', OK);
 glBindRenderbuffer := getProc('glBindRenderbuffer', OK);
 glDeleteRenderbuffers := getProc('glDeleteRenderbuffers', OK);
 glGenRenderbuffers := getProc('glGenRenderbuffers', OK);
 glRenderbufferStorage := getProc('glRenderbufferStorage', OK);
 glGetRenderbufferParameteriv := getProc('glGetRenderbufferParameteriv', OK);
 glIsFramebuffer := getProc('glIsFramebuffer', OK);
 glBindFramebuffer := getProc('glBindFramebuffer', OK);
 glDeleteFramebuffers := getProc('glDeleteFramebuffers', OK);
 glGenFramebuffers := getProc('glGenFramebuffers', OK);
 glCheckFramebufferStatus := getProc('glCheckFramebufferStatus', OK);
 glFramebufferTexture1D := getProc('glFramebufferTexture1D', OK);
 glFramebufferTexture2D := getProc('glFramebufferTexture2D', OK);
 glFramebufferTexture3D := getProc('glFramebufferTexture3D', OK);
 glFramebufferRenderbuffer := getProc('glFramebufferRenderbuffer', OK);
 glGetFramebufferAttachmentParameteriv := getProc('glGetFramebufferAttachmentParameteriv', OK);
 glGenerateMipmap := getProc('glGenerateMipmap', OK);
 glBlitFramebuffer := getProc('glBlitFramebuffer', OK);
 glRenderbufferStorageMultisample := getProc('glRenderbufferStorageMultisample', OK);
 glFramebufferTextureLayer := getProc('glFramebufferTextureLayer', OK);
 glMapBufferRange := getProc('glMapBufferRange', OK);
 glFlushMappedBufferRange := getProc('glFlushMappedBufferRange', OK);
 glBindVertexArray := getProc('glBindVertexArray', OK);
 glDeleteVertexArrays := getProc('glDeleteVertexArrays', OK);
 glGenVertexArrays := getProc('glGenVertexArrays', OK);
 glIsVertexArray := getProc('glIsVertexArray', OK);
 glDrawArraysInstanced := getProc('glDrawArraysInstanced', OK);
 glDrawElementsInstanced := getProc('glDrawElementsInstanced', OK);
 glTexBuffer := getProc('glTexBuffer', OK);
 glPrimitiveRestartIndex := getProc('glPrimitiveRestartIndex', OK);
 glCopyBufferSubData := getProc('glCopyBufferSubData', OK);
 glGetUniformIndices := getProc('glGetUniformIndices', OK);
 glGetActiveUniformsiv := getProc('glGetActiveUniformsiv', OK);
 glGetActiveUniformName := getProc('glGetActiveUniformName', OK);
 glGetUniformBlockIndex := getProc('glGetUniformBlockIndex', OK);
 glGetActiveUniformBlockiv := getProc('glGetActiveUniformBlockiv', OK);
 glGetActiveUniformBlockName := getProc('glGetActiveUniformBlockName', OK);
 glUniformBlockBinding := getProc('glUniformBlockBinding', OK);
 glDrawElementsBaseVertex := getProc('glDrawElementsBaseVertex', OK);
 glDrawRangeElementsBaseVertex := getProc('glDrawRangeElementsBaseVertex', OK);
 glDrawElementsInstancedBaseVertex := getProc('glDrawElementsInstancedBaseVertex', OK);
 glMultiDrawElementsBaseVertex := getProc('glMultiDrawElementsBaseVertex', OK);
 glProvokingVertex := getProc('glProvokingVertex', OK);
 glFenceSync := getProc('glFenceSync', OK);
 glIsSync := getProc('glIsSync', OK);
 glDeleteSync := getProc('glDeleteSync', OK);
 glClientWaitSync := getProc('glClientWaitSync', OK);
 glWaitSync := getProc('glWaitSync', OK);
 glGetInteger64v := getProc('glGetInteger64v', OK);
 glGetSynciv := getProc('glGetSynciv', OK);
 glGetInteger64i_v := getProc('glGetInteger64i_v', OK);
 glGetBufferParameteri64v := getProc('glGetBufferParameteri64v', OK);
 glFramebufferTexture := getProc('glFramebufferTexture', OK);
 glTexImage2DMultisample := getProc('glTexImage2DMultisample', OK);
 glTexImage3DMultisample := getProc('glTexImage3DMultisample', OK);
 glGetMultisamplefv := getProc('glGetMultisamplefv', OK);
 glSampleMaski := getProc('glSampleMaski', OK);
 result := OK;
end;

//28 procedures for GL_VERSION_3_3
function Load_GL_VERSION_3_3_CORE : boolean;
var
 OK : boolean = true;
begin
 OK := Load_GL_VERSION_3_2_CORE;
 glBindFragDataLocationIndexed := getProc('glBindFragDataLocationIndexed', OK);
 glGetFragDataIndex := getProc('glGetFragDataIndex', OK);
 glGenSamplers := getProc('glGenSamplers', OK);
 glDeleteSamplers := getProc('glDeleteSamplers', OK);
 glIsSampler := getProc('glIsSampler', OK);
 glBindSampler := getProc('glBindSampler', OK);
 glSamplerParameteri := getProc('glSamplerParameteri', OK);
 glSamplerParameteriv := getProc('glSamplerParameteriv', OK);
 glSamplerParameterf := getProc('glSamplerParameterf', OK);
 glSamplerParameterfv := getProc('glSamplerParameterfv', OK);
 glSamplerParameterIiv := getProc('glSamplerParameterIiv', OK);
 glSamplerParameterIuiv := getProc('glSamplerParameterIuiv', OK);
 glGetSamplerParameteriv := getProc('glGetSamplerParameteriv', OK);
 glGetSamplerParameterIiv := getProc('glGetSamplerParameterIiv', OK);
 glGetSamplerParameterfv := getProc('glGetSamplerParameterfv', OK);
 glGetSamplerParameterIuiv := getProc('glGetSamplerParameterIuiv', OK);
 glQueryCounter := getProc('glQueryCounter', OK);
 glGetQueryObjecti64v := getProc('glGetQueryObjecti64v', OK);
 glGetQueryObjectui64v := getProc('glGetQueryObjectui64v', OK);
 glVertexAttribDivisor := getProc('glVertexAttribDivisor', OK);
 glVertexAttribP1ui := getProc('glVertexAttribP1ui', OK);
 glVertexAttribP1uiv := getProc('glVertexAttribP1uiv', OK);
 glVertexAttribP2ui := getProc('glVertexAttribP2ui', OK);
 glVertexAttribP2uiv := getProc('glVertexAttribP2uiv', OK);
 glVertexAttribP3ui := getProc('glVertexAttribP3ui', OK);
 glVertexAttribP3uiv := getProc('glVertexAttribP3uiv', OK);
 glVertexAttribP4ui := getProc('glVertexAttribP4ui', OK);
 glVertexAttribP4uiv := getProc('glVertexAttribP4uiv', OK);
 result := OK;
end;

//46 procedures for GL_VERSION_4_0
function Load_GL_VERSION_4_0_CORE : boolean;
var
 OK : boolean = true;
begin
 OK := Load_GL_VERSION_3_3_CORE;
 glMinSampleShading := getProc('glMinSampleShading', OK);
 glBlendEquationi := getProc('glBlendEquationi', OK);
 glBlendEquationSeparatei := getProc('glBlendEquationSeparatei', OK);
 glBlendFunci := getProc('glBlendFunci', OK);
 glBlendFuncSeparatei := getProc('glBlendFuncSeparatei', OK);
 glDrawArraysIndirect := getProc('glDrawArraysIndirect', OK);
 glDrawElementsIndirect := getProc('glDrawElementsIndirect', OK);
 glUniform1d := getProc('glUniform1d', OK);
 glUniform2d := getProc('glUniform2d', OK);
 glUniform3d := getProc('glUniform3d', OK);
 glUniform4d := getProc('glUniform4d', OK);
 glUniform1dv := getProc('glUniform1dv', OK);
 glUniform2dv := getProc('glUniform2dv', OK);
 glUniform3dv := getProc('glUniform3dv', OK);
 glUniform4dv := getProc('glUniform4dv', OK);
 glUniformMatrix2dv := getProc('glUniformMatrix2dv', OK);
 glUniformMatrix3dv := getProc('glUniformMatrix3dv', OK);
 glUniformMatrix4dv := getProc('glUniformMatrix4dv', OK);
 glUniformMatrix2x3dv := getProc('glUniformMatrix2x3dv', OK);
 glUniformMatrix2x4dv := getProc('glUniformMatrix2x4dv', OK);
 glUniformMatrix3x2dv := getProc('glUniformMatrix3x2dv', OK);
 glUniformMatrix3x4dv := getProc('glUniformMatrix3x4dv', OK);
 glUniformMatrix4x2dv := getProc('glUniformMatrix4x2dv', OK);
 glUniformMatrix4x3dv := getProc('glUniformMatrix4x3dv', OK);
 glGetUniformdv := getProc('glGetUniformdv', OK);
 glGetSubroutineUniformLocation := getProc('glGetSubroutineUniformLocation', OK);
 glGetSubroutineIndex := getProc('glGetSubroutineIndex', OK);
 glGetActiveSubroutineUniformiv := getProc('glGetActiveSubroutineUniformiv', OK);
 glGetActiveSubroutineUniformName := getProc('glGetActiveSubroutineUniformName', OK);
 glGetActiveSubroutineName := getProc('glGetActiveSubroutineName', OK);
 glUniformSubroutinesuiv := getProc('glUniformSubroutinesuiv', OK);
 glGetUniformSubroutineuiv := getProc('glGetUniformSubroutineuiv', OK);
 glGetProgramStageiv := getProc('glGetProgramStageiv', OK);
 glPatchParameteri := getProc('glPatchParameteri', OK);
 glPatchParameterfv := getProc('glPatchParameterfv', OK);
 glBindTransformFeedback := getProc('glBindTransformFeedback', OK);
 glDeleteTransformFeedbacks := getProc('glDeleteTransformFeedbacks', OK);
 glGenTransformFeedbacks := getProc('glGenTransformFeedbacks', OK);
 glIsTransformFeedback := getProc('glIsTransformFeedback', OK);
 glPauseTransformFeedback := getProc('glPauseTransformFeedback', OK);
 glResumeTransformFeedback := getProc('glResumeTransformFeedback', OK);
 glDrawTransformFeedback := getProc('glDrawTransformFeedback', OK);
 glDrawTransformFeedbackStream := getProc('glDrawTransformFeedbackStream', OK);
 glBeginQueryIndexed := getProc('glBeginQueryIndexed', OK);
 glEndQueryIndexed := getProc('glEndQueryIndexed', OK);
 glGetQueryIndexediv := getProc('glGetQueryIndexediv', OK);
 result := OK;
end;

//88 procedures for GL_VERSION_4_1
function Load_GL_VERSION_4_1_CORE : boolean;
var
 OK : boolean = true;
begin
 OK := Load_GL_VERSION_4_0_CORE;
 glReleaseShaderCompiler := getProc('glReleaseShaderCompiler', OK);
 glShaderBinary := getProc('glShaderBinary', OK);
 glGetShaderPrecisionFormat := getProc('glGetShaderPrecisionFormat', OK);
 glDepthRangef := getProc('glDepthRangef', OK);
 glClearDepthf := getProc('glClearDepthf', OK);
 glGetProgramBinary := getProc('glGetProgramBinary', OK);
 glProgramBinary := getProc('glProgramBinary', OK);
 glProgramParameteri := getProc('glProgramParameteri', OK);
 glUseProgramStages := getProc('glUseProgramStages', OK);
 glActiveShaderProgram := getProc('glActiveShaderProgram', OK);
 glCreateShaderProgramv := getProc('glCreateShaderProgramv', OK);
 glBindProgramPipeline := getProc('glBindProgramPipeline', OK);
 glDeleteProgramPipelines := getProc('glDeleteProgramPipelines', OK);
 glGenProgramPipelines := getProc('glGenProgramPipelines', OK);
 glIsProgramPipeline := getProc('glIsProgramPipeline', OK);
 glGetProgramPipelineiv := getProc('glGetProgramPipelineiv', OK);
 glProgramUniform1i := getProc('glProgramUniform1i', OK);
 glProgramUniform1iv := getProc('glProgramUniform1iv', OK);
 glProgramUniform1f := getProc('glProgramUniform1f', OK);
 glProgramUniform1fv := getProc('glProgramUniform1fv', OK);
 glProgramUniform1d := getProc('glProgramUniform1d', OK);
 glProgramUniform1dv := getProc('glProgramUniform1dv', OK);
 glProgramUniform1ui := getProc('glProgramUniform1ui', OK);
 glProgramUniform1uiv := getProc('glProgramUniform1uiv', OK);
 glProgramUniform2i := getProc('glProgramUniform2i', OK);
 glProgramUniform2iv := getProc('glProgramUniform2iv', OK);
 glProgramUniform2f := getProc('glProgramUniform2f', OK);
 glProgramUniform2fv := getProc('glProgramUniform2fv', OK);
 glProgramUniform2d := getProc('glProgramUniform2d', OK);
 glProgramUniform2dv := getProc('glProgramUniform2dv', OK);
 glProgramUniform2ui := getProc('glProgramUniform2ui', OK);
 glProgramUniform2uiv := getProc('glProgramUniform2uiv', OK);
 glProgramUniform3i := getProc('glProgramUniform3i', OK);
 glProgramUniform3iv := getProc('glProgramUniform3iv', OK);
 glProgramUniform3f := getProc('glProgramUniform3f', OK);
 glProgramUniform3fv := getProc('glProgramUniform3fv', OK);
 glProgramUniform3d := getProc('glProgramUniform3d', OK);
 glProgramUniform3dv := getProc('glProgramUniform3dv', OK);
 glProgramUniform3ui := getProc('glProgramUniform3ui', OK);
 glProgramUniform3uiv := getProc('glProgramUniform3uiv', OK);
 glProgramUniform4i := getProc('glProgramUniform4i', OK);
 glProgramUniform4iv := getProc('glProgramUniform4iv', OK);
 glProgramUniform4f := getProc('glProgramUniform4f', OK);
 glProgramUniform4fv := getProc('glProgramUniform4fv', OK);
 glProgramUniform4d := getProc('glProgramUniform4d', OK);
 glProgramUniform4dv := getProc('glProgramUniform4dv', OK);
 glProgramUniform4ui := getProc('glProgramUniform4ui', OK);
 glProgramUniform4uiv := getProc('glProgramUniform4uiv', OK);
 glProgramUniformMatrix2fv := getProc('glProgramUniformMatrix2fv', OK);
 glProgramUniformMatrix3fv := getProc('glProgramUniformMatrix3fv', OK);
 glProgramUniformMatrix4fv := getProc('glProgramUniformMatrix4fv', OK);
 glProgramUniformMatrix2dv := getProc('glProgramUniformMatrix2dv', OK);
 glProgramUniformMatrix3dv := getProc('glProgramUniformMatrix3dv', OK);
 glProgramUniformMatrix4dv := getProc('glProgramUniformMatrix4dv', OK);
 glProgramUniformMatrix2x3fv := getProc('glProgramUniformMatrix2x3fv', OK);
 glProgramUniformMatrix3x2fv := getProc('glProgramUniformMatrix3x2fv', OK);
 glProgramUniformMatrix2x4fv := getProc('glProgramUniformMatrix2x4fv', OK);
 glProgramUniformMatrix4x2fv := getProc('glProgramUniformMatrix4x2fv', OK);
 glProgramUniformMatrix3x4fv := getProc('glProgramUniformMatrix3x4fv', OK);
 glProgramUniformMatrix4x3fv := getProc('glProgramUniformMatrix4x3fv', OK);
 glProgramUniformMatrix2x3dv := getProc('glProgramUniformMatrix2x3dv', OK);
 glProgramUniformMatrix3x2dv := getProc('glProgramUniformMatrix3x2dv', OK);
 glProgramUniformMatrix2x4dv := getProc('glProgramUniformMatrix2x4dv', OK);
 glProgramUniformMatrix4x2dv := getProc('glProgramUniformMatrix4x2dv', OK);
 glProgramUniformMatrix3x4dv := getProc('glProgramUniformMatrix3x4dv', OK);
 glProgramUniformMatrix4x3dv := getProc('glProgramUniformMatrix4x3dv', OK);
 glValidateProgramPipeline := getProc('glValidateProgramPipeline', OK);
 glGetProgramPipelineInfoLog := getProc('glGetProgramPipelineInfoLog', OK);
 glVertexAttribL1d := getProc('glVertexAttribL1d', OK);
 glVertexAttribL2d := getProc('glVertexAttribL2d', OK);
 glVertexAttribL3d := getProc('glVertexAttribL3d', OK);
 glVertexAttribL4d := getProc('glVertexAttribL4d', OK);
 glVertexAttribL1dv := getProc('glVertexAttribL1dv', OK);
 glVertexAttribL2dv := getProc('glVertexAttribL2dv', OK);
 glVertexAttribL3dv := getProc('glVertexAttribL3dv', OK);
 glVertexAttribL4dv := getProc('glVertexAttribL4dv', OK);
 glVertexAttribLPointer := getProc('glVertexAttribLPointer', OK);
 glGetVertexAttribLdv := getProc('glGetVertexAttribLdv', OK);
 glViewportArrayv := getProc('glViewportArrayv', OK);
 glViewportIndexedf := getProc('glViewportIndexedf', OK);
 glViewportIndexedfv := getProc('glViewportIndexedfv', OK);
 glScissorArrayv := getProc('glScissorArrayv', OK);
 glScissorIndexed := getProc('glScissorIndexed', OK);
 glScissorIndexedv := getProc('glScissorIndexedv', OK);
 glDepthRangeArrayv := getProc('glDepthRangeArrayv', OK);
 glDepthRangeIndexed := getProc('glDepthRangeIndexed', OK);
 glGetFloati_v := getProc('glGetFloati_v', OK);
 glGetDoublei_v := getProc('glGetDoublei_v', OK);
 result := OK;
end;

//12 procedures for GL_VERSION_4_2
function Load_GL_VERSION_4_2_CORE : boolean;
var
 OK : boolean = true;
begin
 OK := Load_GL_VERSION_4_1_CORE;
 glDrawArraysInstancedBaseInstance := getProc('glDrawArraysInstancedBaseInstance', OK);
 glDrawElementsInstancedBaseInstance := getProc('glDrawElementsInstancedBaseInstance', OK);
 glDrawElementsInstancedBaseVertexBaseInstance := getProc('glDrawElementsInstancedBaseVertexBaseInstance', OK);
 glGetInternalformativ := getProc('glGetInternalformativ', OK);
 glGetActiveAtomicCounterBufferiv := getProc('glGetActiveAtomicCounterBufferiv', OK);
 glBindImageTexture := getProc('glBindImageTexture', OK);
 glMemoryBarrier := getProc('glMemoryBarrier', OK);
 glTexStorage1D := getProc('glTexStorage1D', OK);
 glTexStorage2D := getProc('glTexStorage2D', OK);
 glTexStorage3D := getProc('glTexStorage3D', OK);
 glDrawTransformFeedbackInstanced := getProc('glDrawTransformFeedbackInstanced', OK);
 glDrawTransformFeedbackStreamInstanced := getProc('glDrawTransformFeedbackStreamInstanced', OK);
 result := OK;
end;

//43 procedures for GL_VERSION_4_3
function Load_GL_VERSION_4_3_CORE : boolean;
var
 OK : boolean = true;
begin
 OK := Load_GL_VERSION_4_2_CORE;
 glClearBufferData := getProc('glClearBufferData', OK);
 glClearBufferSubData := getProc('glClearBufferSubData', OK);
 glDispatchCompute := getProc('glDispatchCompute', OK);
 glDispatchComputeIndirect := getProc('glDispatchComputeIndirect', OK);
 glCopyImageSubData := getProc('glCopyImageSubData', OK);
 glFramebufferParameteri := getProc('glFramebufferParameteri', OK);
 glGetFramebufferParameteriv := getProc('glGetFramebufferParameteriv', OK);
 glGetInternalformati64v := getProc('glGetInternalformati64v', OK);
 glInvalidateTexSubImage := getProc('glInvalidateTexSubImage', OK);
 glInvalidateTexImage := getProc('glInvalidateTexImage', OK);
 glInvalidateBufferSubData := getProc('glInvalidateBufferSubData', OK);
 glInvalidateBufferData := getProc('glInvalidateBufferData', OK);
 glInvalidateFramebuffer := getProc('glInvalidateFramebuffer', OK);
 glInvalidateSubFramebuffer := getProc('glInvalidateSubFramebuffer', OK);
 glMultiDrawArraysIndirect := getProc('glMultiDrawArraysIndirect', OK);
 glMultiDrawElementsIndirect := getProc('glMultiDrawElementsIndirect', OK);
 glGetProgramInterfaceiv := getProc('glGetProgramInterfaceiv', OK);
 glGetProgramResourceIndex := getProc('glGetProgramResourceIndex', OK);
 glGetProgramResourceName := getProc('glGetProgramResourceName', OK);
 glGetProgramResourceiv := getProc('glGetProgramResourceiv', OK);
 glGetProgramResourceLocation := getProc('glGetProgramResourceLocation', OK);
 glGetProgramResourceLocationIndex := getProc('glGetProgramResourceLocationIndex', OK);
 glShaderStorageBlockBinding := getProc('glShaderStorageBlockBinding', OK);
 glTexBufferRange := getProc('glTexBufferRange', OK);
 glTexStorage2DMultisample := getProc('glTexStorage2DMultisample', OK);
 glTexStorage3DMultisample := getProc('glTexStorage3DMultisample', OK);
 glTextureView := getProc('glTextureView', OK);
 glBindVertexBuffer := getProc('glBindVertexBuffer', OK);
 glVertexAttribFormat := getProc('glVertexAttribFormat', OK);
 glVertexAttribIFormat := getProc('glVertexAttribIFormat', OK);
 glVertexAttribLFormat := getProc('glVertexAttribLFormat', OK);
 glVertexAttribBinding := getProc('glVertexAttribBinding', OK);
 glVertexBindingDivisor := getProc('glVertexBindingDivisor', OK);
 glDebugMessageControl := getProc('glDebugMessageControl', OK);
 glDebugMessageInsert := getProc('glDebugMessageInsert', OK);
 glDebugMessageCallback := getProc('glDebugMessageCallback', OK);
 glGetDebugMessageLog := getProc('glGetDebugMessageLog', OK);
 glPushDebugGroup := getProc('glPushDebugGroup', OK);
 glPopDebugGroup := getProc('glPopDebugGroup', OK);
 glObjectLabel := getProc('glObjectLabel', OK);
 glGetObjectLabel := getProc('glGetObjectLabel', OK);
 glObjectPtrLabel := getProc('glObjectPtrLabel', OK);
 glGetObjectPtrLabel := getProc('glGetObjectPtrLabel', OK);
 result := OK;
end;

//9 procedures for GL_VERSION_4_4
function Load_GL_VERSION_4_4_CORE : boolean;
var
 OK : boolean = true;
begin
 OK := Load_GL_VERSION_4_3_CORE;
 glBufferStorage := getProc('glBufferStorage', OK);
 glClearTexImage := getProc('glClearTexImage', OK);
 glClearTexSubImage := getProc('glClearTexSubImage', OK);
 glBindBuffersBase := getProc('glBindBuffersBase', OK);
 glBindBuffersRange := getProc('glBindBuffersRange', OK);
 glBindTextures := getProc('glBindTextures', OK);
 glBindSamplers := getProc('glBindSamplers', OK);
 glBindImageTextures := getProc('glBindImageTextures', OK);
 glBindVertexBuffers := getProc('glBindVertexBuffers', OK);
 result := OK;
end;

//110 procedures for GL_VERSION_4_5
function Load_GL_VERSION_4_5_CORE : boolean;
var
 OK : boolean = true;
begin
 OK := Load_GL_VERSION_4_4_CORE;
 glClipControl := getProc('glClipControl', OK);
 glCreateTransformFeedbacks := getProc('glCreateTransformFeedbacks', OK);
 glTransformFeedbackBufferBase := getProc('glTransformFeedbackBufferBase', OK);
 glTransformFeedbackBufferRange := getProc('glTransformFeedbackBufferRange', OK);
 glGetTransformFeedbackiv := getProc('glGetTransformFeedbackiv', OK);
 glGetTransformFeedbacki_v := getProc('glGetTransformFeedbacki_v', OK);
 glGetTransformFeedbacki64_v := getProc('glGetTransformFeedbacki64_v', OK);
 glCreateBuffers := getProc('glCreateBuffers', OK);
 glNamedBufferStorage := getProc('glNamedBufferStorage', OK);
 glNamedBufferData := getProc('glNamedBufferData', OK);
 glNamedBufferSubData := getProc('glNamedBufferSubData', OK);
 glCopyNamedBufferSubData := getProc('glCopyNamedBufferSubData', OK);
 glClearNamedBufferData := getProc('glClearNamedBufferData', OK);
 glClearNamedBufferSubData := getProc('glClearNamedBufferSubData', OK);
 glMapNamedBuffer := getProc('glMapNamedBuffer', OK);
 glMapNamedBufferRange := getProc('glMapNamedBufferRange', OK);
 glUnmapNamedBuffer := getProc('glUnmapNamedBuffer', OK);
 glFlushMappedNamedBufferRange := getProc('glFlushMappedNamedBufferRange', OK);
 glGetNamedBufferParameteriv := getProc('glGetNamedBufferParameteriv', OK);
 glGetNamedBufferParameteri64v := getProc('glGetNamedBufferParameteri64v', OK);
 glGetNamedBufferPointerv := getProc('glGetNamedBufferPointerv', OK);
 glGetNamedBufferSubData := getProc('glGetNamedBufferSubData', OK);
 glCreateFramebuffers := getProc('glCreateFramebuffers', OK);
 glNamedFramebufferRenderbuffer := getProc('glNamedFramebufferRenderbuffer', OK);
 glNamedFramebufferParameteri := getProc('glNamedFramebufferParameteri', OK);
 glNamedFramebufferTexture := getProc('glNamedFramebufferTexture', OK);
 glNamedFramebufferTextureLayer := getProc('glNamedFramebufferTextureLayer', OK);
 glNamedFramebufferDrawBuffer := getProc('glNamedFramebufferDrawBuffer', OK);
 glNamedFramebufferDrawBuffers := getProc('glNamedFramebufferDrawBuffers', OK);
 glNamedFramebufferReadBuffer := getProc('glNamedFramebufferReadBuffer', OK);
 glInvalidateNamedFramebufferData := getProc('glInvalidateNamedFramebufferData', OK);
 glInvalidateNamedFramebufferSubData := getProc('glInvalidateNamedFramebufferSubData', OK);
 glClearNamedFramebufferiv := getProc('glClearNamedFramebufferiv', OK);
 glClearNamedFramebufferuiv := getProc('glClearNamedFramebufferuiv', OK);
 glClearNamedFramebufferfv := getProc('glClearNamedFramebufferfv', OK);
 glClearNamedFramebufferfi := getProc('glClearNamedFramebufferfi', OK);
 glBlitNamedFramebuffer := getProc('glBlitNamedFramebuffer', OK);
 glCheckNamedFramebufferStatus := getProc('glCheckNamedFramebufferStatus', OK);
 glGetNamedFramebufferParameteriv := getProc('glGetNamedFramebufferParameteriv', OK);
 glGetNamedFramebufferAttachmentParameteriv := getProc('glGetNamedFramebufferAttachmentParameteriv', OK);
 glCreateRenderbuffers := getProc('glCreateRenderbuffers', OK);
 glNamedRenderbufferStorage := getProc('glNamedRenderbufferStorage', OK);
 glNamedRenderbufferStorageMultisample := getProc('glNamedRenderbufferStorageMultisample', OK);
 glGetNamedRenderbufferParameteriv := getProc('glGetNamedRenderbufferParameteriv', OK);
 glCreateTextures := getProc('glCreateTextures', OK);
 glTextureBuffer := getProc('glTextureBuffer', OK);
 glTextureBufferRange := getProc('glTextureBufferRange', OK);
 glTextureStorage1D := getProc('glTextureStorage1D', OK);
 glTextureStorage2D := getProc('glTextureStorage2D', OK);
 glTextureStorage3D := getProc('glTextureStorage3D', OK);
 glTextureStorage2DMultisample := getProc('glTextureStorage2DMultisample', OK);
 glTextureStorage3DMultisample := getProc('glTextureStorage3DMultisample', OK);
 glTextureSubImage1D := getProc('glTextureSubImage1D', OK);
 glTextureSubImage2D := getProc('glTextureSubImage2D', OK);
 glTextureSubImage3D := getProc('glTextureSubImage3D', OK);
 glCompressedTextureSubImage1D := getProc('glCompressedTextureSubImage1D', OK);
 glCompressedTextureSubImage2D := getProc('glCompressedTextureSubImage2D', OK);
 glCompressedTextureSubImage3D := getProc('glCompressedTextureSubImage3D', OK);
 glCopyTextureSubImage1D := getProc('glCopyTextureSubImage1D', OK);
 glCopyTextureSubImage2D := getProc('glCopyTextureSubImage2D', OK);
 glCopyTextureSubImage3D := getProc('glCopyTextureSubImage3D', OK);
 glTextureParameterf := getProc('glTextureParameterf', OK);
 glTextureParameterfv := getProc('glTextureParameterfv', OK);
 glTextureParameteri := getProc('glTextureParameteri', OK);
 glTextureParameterIiv := getProc('glTextureParameterIiv', OK);
 glTextureParameterIuiv := getProc('glTextureParameterIuiv', OK);
 glTextureParameteriv := getProc('glTextureParameteriv', OK);
 glGenerateTextureMipmap := getProc('glGenerateTextureMipmap', OK);
 glBindTextureUnit := getProc('glBindTextureUnit', OK);
 glGetTextureImage := getProc('glGetTextureImage', OK);
 glGetCompressedTextureImage := getProc('glGetCompressedTextureImage', OK);
 glGetTextureLevelParameterfv := getProc('glGetTextureLevelParameterfv', OK);
 glGetTextureLevelParameteriv := getProc('glGetTextureLevelParameteriv', OK);
 glGetTextureParameterfv := getProc('glGetTextureParameterfv', OK);
 glGetTextureParameterIiv := getProc('glGetTextureParameterIiv', OK);
 glGetTextureParameterIuiv := getProc('glGetTextureParameterIuiv', OK);
 glGetTextureParameteriv := getProc('glGetTextureParameteriv', OK);
 glCreateVertexArrays := getProc('glCreateVertexArrays', OK);
 glDisableVertexArrayAttrib := getProc('glDisableVertexArrayAttrib', OK);
 glEnableVertexArrayAttrib := getProc('glEnableVertexArrayAttrib', OK);
 glVertexArrayElementBuffer := getProc('glVertexArrayElementBuffer', OK);
 glVertexArrayVertexBuffer := getProc('glVertexArrayVertexBuffer', OK);
 glVertexArrayVertexBuffers := getProc('glVertexArrayVertexBuffers', OK);
 glVertexArrayAttribBinding := getProc('glVertexArrayAttribBinding', OK);
 glVertexArrayAttribFormat := getProc('glVertexArrayAttribFormat', OK);
 glVertexArrayAttribIFormat := getProc('glVertexArrayAttribIFormat', OK);
 glVertexArrayAttribLFormat := getProc('glVertexArrayAttribLFormat', OK);
 glVertexArrayBindingDivisor := getProc('glVertexArrayBindingDivisor', OK);
 glGetVertexArrayiv := getProc('glGetVertexArrayiv', OK);
 glGetVertexArrayIndexediv := getProc('glGetVertexArrayIndexediv', OK);
 glGetVertexArrayIndexed64iv := getProc('glGetVertexArrayIndexed64iv', OK);
 glCreateSamplers := getProc('glCreateSamplers', OK);
 glCreateProgramPipelines := getProc('glCreateProgramPipelines', OK);
 glCreateQueries := getProc('glCreateQueries', OK);
 glGetQueryBufferObjecti64v := getProc('glGetQueryBufferObjecti64v', OK);
 glGetQueryBufferObjectiv := getProc('glGetQueryBufferObjectiv', OK);
 glGetQueryBufferObjectui64v := getProc('glGetQueryBufferObjectui64v', OK);
 glGetQueryBufferObjectuiv := getProc('glGetQueryBufferObjectuiv', OK);
 glMemoryBarrierByRegion := getProc('glMemoryBarrierByRegion', OK);
 glGetTextureSubImage := getProc('glGetTextureSubImage', OK);
 glGetCompressedTextureSubImage := getProc('glGetCompressedTextureSubImage', OK);
 glGetGraphicsResetStatus := getProc('glGetGraphicsResetStatus', OK);
 glGetnCompressedTexImage := getProc('glGetnCompressedTexImage', OK);
 glGetnTexImage := getProc('glGetnTexImage', OK);
 glGetnUniformdv := getProc('glGetnUniformdv', OK);
 glGetnUniformfv := getProc('glGetnUniformfv', OK);
 glGetnUniformiv := getProc('glGetnUniformiv', OK);
 glGetnUniformuiv := getProc('glGetnUniformuiv', OK);
 glReadnPixels := getProc('glReadnPixels', OK);
 glTextureBarrier := getProc('glTextureBarrier', OK);
 result := OK;
end;

//47 procedures for GL_ARB
function Load_GL_ARB_CORE : boolean;
var
 OK : boolean = true;
begin
 glGetTextureHandleARB := getProc('glGetTextureHandleARB', OK);
 glGetTextureSamplerHandleARB := getProc('glGetTextureSamplerHandleARB', OK);
 glMakeTextureHandleResidentARB := getProc('glMakeTextureHandleResidentARB', OK);
 glMakeTextureHandleNonResidentARB := getProc('glMakeTextureHandleNonResidentARB', OK);
 glGetImageHandleARB := getProc('glGetImageHandleARB', OK);
 glMakeImageHandleResidentARB := getProc('glMakeImageHandleResidentARB', OK);
 glMakeImageHandleNonResidentARB := getProc('glMakeImageHandleNonResidentARB', OK);
 glUniformHandleui64ARB := getProc('glUniformHandleui64ARB', OK);
 glUniformHandleui64vARB := getProc('glUniformHandleui64vARB', OK);
 glProgramUniformHandleui64ARB := getProc('glProgramUniformHandleui64ARB', OK);
 glProgramUniformHandleui64vARB := getProc('glProgramUniformHandleui64vARB', OK);
 glIsTextureHandleResidentARB := getProc('glIsTextureHandleResidentARB', OK);
 glIsImageHandleResidentARB := getProc('glIsImageHandleResidentARB', OK);
 glVertexAttribL1ui64ARB := getProc('glVertexAttribL1ui64ARB', OK);
 glVertexAttribL1ui64vARB := getProc('glVertexAttribL1ui64vARB', OK);
 glGetVertexAttribLui64vARB := getProc('glGetVertexAttribLui64vARB', OK);
 glCreateSyncFromCLeventARB := getProc('glCreateSyncFromCLeventARB', OK);
 glDispatchComputeGroupSizeARB := getProc('glDispatchComputeGroupSizeARB', OK);
 glDebugMessageControlARB := getProc('glDebugMessageControlARB', OK);
 glDebugMessageInsertARB := getProc('glDebugMessageInsertARB', OK);
 glDebugMessageCallbackARB := getProc('glDebugMessageCallbackARB', OK);
 glGetDebugMessageLogARB := getProc('glGetDebugMessageLogARB', OK);
 glBlendEquationiARB := getProc('glBlendEquationiARB', OK);
 glBlendEquationSeparateiARB := getProc('glBlendEquationSeparateiARB', OK);
 glBlendFunciARB := getProc('glBlendFunciARB', OK);
 glBlendFuncSeparateiARB := getProc('glBlendFuncSeparateiARB', OK);
 glMultiDrawArraysIndirectCountARB := getProc('glMultiDrawArraysIndirectCountARB', OK);
 glMultiDrawElementsIndirectCountARB := getProc('glMultiDrawElementsIndirectCountARB', OK);
 glGetGraphicsResetStatusARB := getProc('glGetGraphicsResetStatusARB', OK);
 glGetnTexImageARB := getProc('glGetnTexImageARB', OK);
 glReadnPixelsARB := getProc('glReadnPixelsARB', OK);
 glGetnCompressedTexImageARB := getProc('glGetnCompressedTexImageARB', OK);
 glGetnUniformfvARB := getProc('glGetnUniformfvARB', OK);
 glGetnUniformivARB := getProc('glGetnUniformivARB', OK);
 glGetnUniformuivARB := getProc('glGetnUniformuivARB', OK);
 glGetnUniformdvARB := getProc('glGetnUniformdvARB', OK);
 glMinSampleShadingARB := getProc('glMinSampleShadingARB', OK);
 glNamedStringARB := getProc('glNamedStringARB', OK);
 glDeleteNamedStringARB := getProc('glDeleteNamedStringARB', OK);
 glCompileShaderIncludeARB := getProc('glCompileShaderIncludeARB', OK);
 glIsNamedStringARB := getProc('glIsNamedStringARB', OK);
 glGetNamedStringARB := getProc('glGetNamedStringARB', OK);
 glGetNamedStringivARB := getProc('glGetNamedStringivARB', OK);
 glBufferPageCommitmentARB := getProc('glBufferPageCommitmentARB', OK);
 glNamedBufferPageCommitmentEXT := getProc('glNamedBufferPageCommitmentEXT', OK);
 glNamedBufferPageCommitmentARB := getProc('glNamedBufferPageCommitmentARB', OK);
 glTexPageCommitmentARB := getProc('glTexPageCommitmentARB', OK);
 result := OK;
end;

procedure FreeOpenGL;
begin
 if (LibGL <> 0) then
    FreeLibrary(LibGL);
end;

procedure LoadOpenGL(const dll: String);
var
  MethodName: string = '';
  function GetGLProcAddress(Lib: PtrInt; ProcName: PChar): Pointer;
  begin
    MethodName:=ProcName;
    Result:=GetProcAddress(Lib, ProcName);
  end;
begin
  FreeOpenGL;
  LibGL := LoadLibrary(PChar(dll));
  if LibGL = 0 then raise Exception.Create('Could not load OpenGL from ' + dll);
  (*{$IFDEF Windows}
  try
    @ChoosePixelFormat := GetGLProcAddress(LibGL, 'ChoosePixelFormat');
    if not Assigned(ChoosePixelFormat) then
      @ChoosePixelFormat := @WinChoosePixelFormat;
  except
    raise Exception.Create('Unable to select pixel format');
  end;
  {$ENDIF}*)
end;

initialization
  { according to bug 7570, this is necessary on all x86 platforms,
    maybe we've to fix the sse control word as well }
  { Yes, at least for darwin/x86_64 (JM) }
  {$if defined(cpui386) or defined(cpux86_64)}
  //? SetExceptionMask([exInvalidOp, exDenormalized, exZeroDivide,exOverflow, exUnderflow, exPrecision]);
  {$endif}
  {$IFDEF Windows}
  LoadOpenGL('opengl32.dll');
  {$ELSE}
  {$IFDEF OS2}
  LoadOpenGL('opengl.dll');
  {$ELSE OS2}
  {$ifdef darwin}
  LoadOpenGL('/System/Library/Frameworks/OpenGL.framework/Libraries/libGL.dylib');
  {$ELSE}
  {$IFDEF MorphOS}
  InitTinyGLLibrary;
  {$ELSE}
  {$ifdef haiku}
  LoadOpenGL('libGL.so');
  {$else}
  LoadOpenGL('libGL.so.1');
  {$endif}
  {$ENDIF}
  {$endif}
  {$ENDIF OS2}
  {$ENDIF}
finalization
  FreeOpenGL;
end.
